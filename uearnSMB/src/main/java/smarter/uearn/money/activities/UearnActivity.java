package smarter.uearn.money.activities;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.ActivityManager;
import android.app.AlarmManager;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.ProgressDialog;
import android.app.TimePickerDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothHeadset;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.Point;
import android.graphics.PorterDuff;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.media.AudioManager;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.os.StrictMode;
import android.preference.PreferenceManager;
import android.provider.MediaStore;
import android.support.annotation.RequiresPermission;
import android.support.design.widget.TextInputLayout;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v4.content.FileProvider;
import android.support.v4.content.LocalBroadcastManager;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.app.AppCompatDelegate;
import android.support.v7.widget.CardView;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.telecom.TelecomManager;
import android.telephony.PhoneNumberUtils;
import android.telephony.SubscriptionInfo;
import android.telephony.SubscriptionManager;
import android.telephony.TelephonyManager;
import android.text.Editable;
import android.text.TextWatcher;
import android.text.format.DateFormat;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.webkit.ValueCallback;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RatingBar;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import com.github.nkzawa.emitter.Emitter;
import com.github.nkzawa.socketio.client.IO;
import com.google.gson.Gson;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Method;
import java.net.URISyntaxException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import smarter.uearn.money.R;
import smarter.uearn.money.adapters.AutoDialListAdapter;
import smarter.uearn.money.adapters.CheckboxAdapter;
import smarter.uearn.money.adapters.FlpCursorAdapter;
import smarter.uearn.money.callrecord.RecorderService;
import smarter.uearn.money.callrecord.ServiceHandler;
import smarter.uearn.money.dialogs.CustomTwoButtonDialog;
import smarter.uearn.money.models.CustomerLite;
import smarter.uearn.money.models.GetCalendarEntryInfo;
import smarter.uearn.money.models.SalesStageInfo;
import smarter.uearn.money.utils.AppConstants;
import smarter.uearn.money.utils.ApplicationSettings;
import smarter.uearn.money.utils.CommonUtils;
import smarter.uearn.money.utils.JSONParser;
import smarter.uearn.money.utils.LogUtils;
import smarter.uearn.money.utils.MultiSelectionSpinner;
import smarter.uearn.money.utils.MySql;
import smarter.uearn.money.utils.NotificationData;
import smarter.uearn.money.utils.ServerAPIConnectors.APIProvider;
import smarter.uearn.money.utils.ServerAPIConnectors.API_Response_Listener;
import smarter.uearn.money.utils.ServerAPIConnectors.KnowlarityModel;
import smarter.uearn.money.utils.ServerAPIConnectors.MyJsonObject;
import smarter.uearn.money.utils.ServerAPIConnectors.Urls;
import smarter.uearn.money.utils.SmarterSMBApplication;
import smarter.uearn.money.utils.upload.DataUploadUtils;
import smarter.uearn.money.utils.upload.GPSTracker;
import smarter.uearn.money.utils.upload.ReuploadService;
import smarter.uearn.money.utils.webservice.ServiceApplicationUsage;
import smarter.uearn.money.views.GeneralButton;
import smarter.uearn.money.views.events.CheckBoxInterface;

import static smarter.uearn.money.utils.ServerAPIConnectors.Urls.getSioAddress;
import static smarter.uearn.money.utils.SmarterSMBApplication.conferenceCallEnabled;
import static smarter.uearn.money.utils.SmarterSMBApplication.connectToPushServer;
import static smarter.uearn.money.utils.SmarterSMBApplication.connectedCustomerState;
import static smarter.uearn.money.utils.SmarterSMBApplication.mSocket;
import static smarter.uearn.money.utils.SmarterSMBApplication.pushSioUrl;
import static smarter.uearn.money.utils.SmarterSMBApplication.transferCallEnabled;

public class UearnActivity extends AppCompatActivity implements View.OnClickListener, View.OnSystemUiVisibilityChangeListener, MultiSelectionSpinner.OnMultipleItemsSelectedListener, CheckBoxInterface, RadioGroup.OnCheckedChangeListener {

    private double latitude = 0;
    private double longitude = 0;
    private String getUrl = "";
    public String customerNumber = "", statusString = "", salesStage1 = "";
    private String eventType, callStartTime, callerName, cotactName = "", duraionOfACall = "", ameyocallStartTime = "";
    public final static String AFTER_CALL_NOTES = "afterCallNotes";
    public final static String AFTER_CALL_ASSIGN = "assignTo";
    public final static String AFTER_CALL_NAME = "after_call_name";
    public final static String AFTER_CALL_DESIGNATION = "after_call_designation";
    public final static String AFTER_CALL_PHONE = "after_call_phone";
    public final static String AFTER_CALL_COMPANY = "after_call_company";
    public final static String AFTER_CALL_EMAIL = "after_call_email";
    public final static String AFTER_CALL_LEAD = "after_call_lead";
    public final static String AFTER_CALL_APPOINTMENT_ID = "after_call_appointment_id";
    public final static String CUSTOMER_TO_CONTACT = "customer_tocontact";
    public final static String AFTER_CALL_ADDRESS = "after_call_address";
    public final static String AFTER_CALL_REMARKS = "after_call_remarks";
    private long dbid = 0L, reminderdbId = 0L, lastDbId = 0L;
    private int flpCount = 0, rnr_count = 0, rnr_callbacks = 0, flpValue = 1;
    public int final_start_hour = 0, final_end_hour = 0, final_start_min = 0, final_end_min = 0, final_start_year = 0, final_end_year = 0, final_start_month = 0, final_end_month = 0, final_start_dayOfMonth = 0, final_end_dayOfMonth = 0;
    public String to, from;
    private String mydbAppointmentId = "";
    String checkboxData = "";
    public static String currentSelectedCheckBoxValue = "";
    private boolean autoCheck = false, preAlarmSet = false, responseCheck = false;
    String stage1 = "";
    long localdbId = 0;
    long currentTime = System.currentTimeMillis();
    private boolean nextfollowup = false;
    private int max_yes = 0;
    private String max_yes_action = "";
    private String cb_action = "";
    private String next_action = "";
    private JSONObject next_action_obj = null;
    long nextAppointment_dbId = 0L;
    private boolean callbackCheck = false;
    Long rnr_id = 0L;
    private int alarmBefore = 10;
    int apiCount = 1;
    boolean knowlarityCheck = false;
    private int showInProgress = 0;
    GetCalendarEntryInfo getCalendarEntryInfo = new GetCalendarEntryInfo();
    Calendar mCalendar, mTodayCalendar;
    private boolean cloudCheck = false, checkRNR = false;
    public String dbImageUrl = "", dbSubject, dbNotes, dbLocation, dbDesignation, dbCompanyName, dbwebsiteString, db_appointmentId, dborderValue, dbemailIdString, dbcompany_Address, dbproduct_type, dblead_source, db_external_reference, dbstatusString;
    public String toNumber, callRec_url, toname;
    private String dialledNumber;
    String appointmentId = null;
    private String subStatus1 = "", subStatus2 = "";
    private String assignToEmail = "";
    private String currentSalesStatus = "";
    private String currentSubject = "";
    private boolean knowlarityupload = false;
    Dialog dialog;
    private ProgressDialog waitDialog;
    private String notesString = "";
    private String sub1 = "", sub2, extranote, leadsrc, wrapup, eventstartdate, transactionid;
    String name1 = "";
    String uuid = "";
    String parent = "";
    List<String> checkboxValues = new ArrayList<>();
    private LinkedHashMap checkboxHash = new LinkedHashMap();
    public static boolean onBackPressed = false;
    public static boolean redialScenario = false;
    public static boolean redialScenarioCompleted = false;
    public static boolean APP_MOVED_TO_BACKGROUND = false;
    private String status = "";
    List<String> questionerDropDownValues = new ArrayList<>();

    private CardView questionnaire_create_followup_card, applicationNumber_Card, councelingDateTimeCard, notInterested_Card;
    private LinearLayout questionnaire_llCallAgain, allianceInterestedLayout, councellingLocationLayout;
    private RelativeLayout questionnaire_btnTen, questionnaire_btnThirty, questionnaire_btnSixty;
    private TextView questionnaire_orText, lastUpdateFromCustomerTv;
    private TextView questionnaire_followupError;
    private TextView checkboxTextView;
    private WebView checkboxWebView;

    private TextView connection_status;
    private TextView connectingText1;
    private TextView connectingText2;

    //OYO Changes
    private RelativeLayout bank1Layout, oyoLayout, oyobtnTen, oyoBtnThirty, oyoBtnSixty;
    private LinearLayout sub_disposition_Layout, comment_box_layout, sub_disposition, meal_plan_layout, new_booking, new_booking_spinner, meal_plan, call_back_dateTimeLayout, oyo_toolBar_layout, meals_type_layout, allianceSalesStage;
    private Button invalidButton, rnrButton, mmtInvalidButton;
    private TextView dispositionTv, sub_dispositionTv, add_commentTv, callBackDate, callBackTime, roomTv, nightTv, title_bar;
    private Spinner disposition_spinner, sub_disposition_spinner, room_spinner, night_spinner, no_of_lunch_spinner, no_of_dinner_spinner;
    private EditText oyo_comment_edit_text, notInterestedRemarks_edit_text;
    private String selected_disposition = "";
    private String oyoStatus = "";
    private String allianceStatus = "";
    private String allianceSubStatus = "";
    private String oyoSubStatus1 = "";
    private String oyoSubStatus2 = "";
    private String numberOfRooms = "";
    private String numberOfNights = "";
    private String numberOfLunch = "";
    private String numberOfDinner = "";
    private Boolean isOyoCallBack = false;
    private Boolean isOyoRnr = false;
    private Boolean isOyoInvalid = false;
    TextWatcher tw;
    ArrayAdapter<CharSequence> dispositionAdapter, subDispositionAdapter, roomAdapter, nightAdapter, noOfLunchDinnerAdapter, counselingAdapter;
    private String company = "";
    private boolean radStarted = false;
    public static boolean startAutodialler = false;
    private boolean submitButtonPressed = false;
    private boolean processAfterCallConnected = false;
    private boolean connectedNumberInList = false;
    private long nextFollowUpTime = 0L;
    private boolean doNotCloseActivity = false;
    public static boolean dismissAlertDialog = false;
    private boolean dummyAppointmentForRedial = false;
    private String oyoCustomerName = "";
    private TextView customerNumberText;
    private TextView mCustomDate, mCustomTime;
    private CardView card_view;
    private boolean isShowMore = false;
    private String addressString = "";
    private String remoteAutoEnabled = "";
    String callEndDuration = "";

    // Others
    private TextView customername, customernumber, companyname, leadsource, salesstage, salesstage1, address, notes;
    private TextView uploadAttachmentTv, tv_attached_name;
    private LinearLayout flp_layout, llAfterCall, pan_available_layout, llCallAgain;
    private LinearLayout checkboxLayout;
    private RelativeLayout nameNumberRelativeLayout, getCustomInfoLayout;
    private LinearLayout updateLayout, callbacklayoutview, rnrLayout, redialLayout, layout5, formButtonLayout, acpBottomLayout, isInterestedButtonsLayout, endCallButtonLayout, mmtAcpBottomLayout;
    private RelativeLayout uView, cView, rView, redialView;
    private CardView rnrCard, redialCard, callBackCard;
    private Button submitButton, mmtSubmitButton;
    private ImageView uploadAttachmentButton;
    private CardView create_followup_card, remarksCard;
    private RelativeLayout btnTen, btnThirty, btnSixty;
    private TextView orText;
    private TextView questDate, questTime, followupDate, followupTime, councelingfollowup_time, councelingfollowup_date;
    private TextView followupError;
    private EditText tv_name_or_number, remarks, applicationNumber_edit_text;
    private LinearLayout attachmentReadyButton;
    private ImageView editName, showMore;
    private TextView followupTv;
    private LinearLayout followup_layout;
    private final static int UPLOAD_ATTACHMENT = 103;
    private String imagePath, imageUrl = "";
    private View dateView, timeView;

    private TextView quesButtonTenTextView, quesButtonThirtyTextView, quesButtonSixtyTextView;

    // BPCL
    private LinearLayout ratingsLayout;
    private LinearLayout freeTextLayout;
    private LinearLayout dropdownLayout;
    private LinearLayout buttonsLayout;
    private LinearLayout radiobuttonsLayout;
    private LinearLayout numberpickerLayout;
    private LinearLayout isInterestedLayout;
    private LinearLayout dateTimeLayout;
    private LinearLayout followupLayout;
    private LinearLayout freeNumberLayout;
    private LinearLayout searchableDropDownLayout;
    private LinearLayout multiSelectionDropDownLayout;
    private LinearLayout uploadAttachmentLayout;
    private LinearLayout callManagerLayout;

    private LinearLayout questionnaireDateTimeLayout;
    private LinearLayout followupDateTimeLayout;
    private LinearLayout freeTextEditTextLayout;

    private Button nextButton, previousButton;
    private Button appliedBtn, interestedBtn, notInterestedBtn;
    private ImageView endCallButton, muteCallButton, launchAppButton;
    private ImageView transferCallButton, conferenceCallButton;
    private String currentSelectedScenario = "";
    private Spinner spinner, councelingLocation_spinner;
    private Button yesButton, noButton;
    private String formStatus = "";
    private String dropDownValueFromList = "";
    private String paymentModeFromButton = "";
    private TextView customerRatings;
    private RatingBar ratingsView;

    private LinkedHashMap questionnaireHash = new LinkedHashMap();
    private LinkedHashMap dropDownHash = new LinkedHashMap();
    private LinkedHashMap checkBoxHash = new LinkedHashMap();
    private LinkedHashMap buttonHash = new LinkedHashMap();
    private LinkedHashMap radiobuttonHash = new LinkedHashMap();
    private LinkedHashMap searchableDropDownHash = new LinkedHashMap();
    private LinkedHashMap multiSelectionDropDownHash = new LinkedHashMap();

    private TextView ratingsTextView;
    private WebView ratingsWebView;
    private TextView freeTextTextView;
    private WebView freeTextWebView;
    private TextView dropDownTextView;
    private WebView dropDownWebView;
    private TextView buttonsTextView;
    private WebView buttonsWebView;
    private TextView radiobuttonsTextView;
    private WebView radiobuttonsWebView;
    private TextView numberpickerTextView;
    private WebView numberpickerWebView;
    private TextView isInterestedTextView, titleTextView;
    private WebView isInterestedWebView;
    private WebView titleWebView;
    private TextView dateTimeTextView;
    private WebView dateTimeWebView;
    private TextView followupTextView;
    private WebView followupWebView;
    private TextView freeNumberTextView;
    private WebView freeNumberWebView;
    private TextView searchableDropDownTextView;
    private WebView searchableDropDownWebView;
    private TextView multiSelectionDropDownTextView;
    private WebView multiSelectionDropDownWebView;
    private TextView uploadAttachmentTextView;
    private WebView uploadAttachmentWebView;

    private EditText customerExperience;
    private EditText freeNumber;
    TextInputLayout etFreeNumber;
    TextInputLayout etCustomerExperience;
    private String currentSelectedButton;
    private String currentSelectedRadioButton;

    ArrayList<Integer> selectedButtonList = new ArrayList<Integer>(1);
    private LinkedHashMap tempQnAHash = new LinkedHashMap();
    private LinkedHashMap questionAnswerHash = new LinkedHashMap();
    List<String> tempQuesList = new ArrayList<>();
    private LinkedHashMap titleQHash = new LinkedHashMap();

    // CENTRAL
    JSONArray rootArrayData = null;
    JSONArray rootArrayDataOrg = null;
    private int questionCount = 0;

    String rootQ = "";
    String rootR = "";
    String rootA = "";
    String rootLastUpdate = "";
    String rootValue = "";
    String dropDownData = "";
    String buttonData = "";
    String radiobuttonData = "";

    String searchableDropDownData = "";
    String multiSelectionDropDownData = "";
    String hintText = "";
    String titleText = "";

    String mandatory = "";
    String decision = "";
    String actionType = "";

    String currentObject = "";
    boolean yesnobuttonClicked = false;
    boolean dropDownHasItem = false;
    boolean searchableDropDownHasItem = false;
    boolean multiselectionDropDownHasItem = false;
    String currentQuestionnaire = "";
    private boolean nextButtonClicked = false;
    private boolean previousButtonClicked = false;

    private HashMap<String, Boolean> currentSelectedCheckboxHashMap;
    private HashMap<String, Boolean> checkedDataHashMap;
    private boolean checkBoxScenario = false;
    public static int noOfCheckboxChecked = 0;
    public static int noneOfTheAboveChecked = 0;
    public String checkBoxData = "";

    private String currentRatings = "";
    private boolean leadSheetAttached = false;

    private boolean isCalled = false;

    private Spinner searchableSpinner;
    private String searchableDropDownValueFromList = "";

    private MultiSelectionSpinner multiSelectionSpinner;
    private String multiSelectionDropDownValueFromList = "";
    //private boolean multiSelectionDropDownValueCaptured = false;

    private RelativeLayout customersInfoLayout;
    private LinearLayout titleLayout;
    private TextView custNameTv, custNumberTv, companyNameTv, leadSourceTv, salesStageTv, salesStage1Tv, salesStage2Tv, remarksTv;

    private RelativeLayout customersListLayout;
    List<CustomerLite> customerDetailsList = null;
    List<CustomerLite> rnrCallsList = null;

    public static boolean callRecordingStarted = false;
    private RecyclerView mRecyclerView = null;
    private String connectedCustomer = "";

    private TextView ratingsCustomerDetailsName;
    private TextView ratingsCustomerDetailsStatus;
    private TextView ratingsCustomerDetailsSubstatus1;
    private TextView ratingsCustomerDetailsSubstatus2;
    private TextView ratingsCustomerDetailsNotes;

    private TextView freeNumberCustomerDetailsName;
    private TextView freeNumberCustomerDetailsStatus;
    private TextView freeNumberCustomerDetailsSubstatus1;
    private TextView freeNumberCustomerDetailsSubstatus2;
    private TextView freeNumberCustomerDetailsNotes;

    private TextView freeTextCustomerDetailsName;
    private TextView freeTextCustomerDetailsStatus;
    private TextView freeTextCustomerDetailsSubstatus1;
    private TextView freeTextCustomerDetailsSubstatus2;
    private TextView freeTextCustomerDetailsNotes;

    private TextView searchableDropdownCustomerDetailsName;
    private TextView searchableDropdownCustomerDetailsStatus;
    private TextView searchableDropdownCustomerDetailsSubstatus1;
    private TextView searchableDropdownCustomerDetailsSubstatus2;
    private TextView searchableDropdownCustomerDetailsNotes;

    private TextView multiSelectionDropdownCustomerDetailsName;
    private TextView multiSelectionDropdownCustomerDetailsStatus;
    private TextView multiSelectionDropdownCustomerDetailsSubstatus1;
    private TextView multiSelectionDropdownCustomerDetailsSubstatus2;
    private TextView multiSelectionDropdownCustomerDetailsNotes;

    private TextView dropdownCustomerDetailsName;
    private TextView dropdownCustomerDetailsStatus;
    private TextView dropdownCustomerDetailsSubstatus1;
    private TextView dropdownCustomerDetailsSubstatus2;
    private TextView dropdownCustomerDetailsNotes;

    private TextView buttonsCustomerDetailsName;
    private TextView buttonsCustomerDetailsStatus;
    private TextView buttonsCustomerDetailsSubstatus1;
    private TextView buttonsCustomerDetailsSubstatus2;
    private TextView buttonsCustomerDetailsNotes;

    private TextView isInterestedCustomerDetailsName;
    private TextView isInterestedCustomerDetailsStatus;
    private TextView isInterestedCustomerDetailsSubstatus1;
    private TextView isInterestedCustomerDetailsSubstatus2;
    private TextView isInterestedCustomerDetailsNotes;

    private TextView dateTimeCustomerDetailsName;
    private TextView dateTimeCustomerDetailsStatus;
    private TextView dateTimeCustomerDetailsSubstatus1;
    private TextView dateTimeCustomerDetailsSubstatus2;
    private TextView dateTimeCustomerDetailsNotes;

    private TextView uploadAttachmentCustomerDetailsName;
    private TextView uploadAttachmentCustomerDetailsStatus;
    private TextView uploadAttachmentCustomerDetailsSubstatus1;
    private TextView uploadAttachmentCustomerDetailsSubstatus2;
    private TextView uploadAttachmentCustomerDetailsNotes;

    private TextView followupCustomerDetailsName;
    private TextView followupCustomerDetailsStatus;
    private TextView followupCustomerDetailsSubstatus1;
    private TextView followupCustomerDetailsSubstatus2;
    private TextView followupCustomerDetailsNotes;

    private boolean leadSheetAttachCancel = false;
    private boolean manualAndRNR = false;

    private Activity activity;
    public static boolean goToHomeScreen = false;

    public static boolean navigateBackAndStop = false;

    private List<CustomerLite> customerList = null;
    private List<CustomerLite> tempcustomerList = null;

    private boolean activatedButtonClicked = false;
    private boolean followUpButtonClicked = false;
    private boolean noAnswerButtonClicked = false;
    private boolean notInterestedButtonClicked = false;

    private String mmtStatus = "";
    private String mmtSubStatus1 = "";
    private String mmtNotes = "";
    private boolean redialClicked = false;

    public static boolean callEndedFromDuringCall = false;
    private boolean salesStageUpdated = false;
    private static boolean mmtRedialScenario = false;

    private static boolean submitButtonClicked = false;
    private static boolean mmtInvalidButtonClicked = false;
    private TextView getInfo, connectionStatus;
    private RelativeLayout statusGetInfoRelativeLayout;

    public static boolean serverDialingRedialScenario = false;

    // public static boolean dismissAlertDialog = false;

    String customerInfo = "";
    private AutoDialListAdapter adapter;
    private static boolean getInfoCalled = false;


    public static boolean redialNumber = false;
    public static boolean APP_IN_BACKGROUND = false;
    private ProgressDialog progressDialog = null;
    private boolean rnrScenario = false;
    private String latestStatus = "";
    private boolean connectedRNR = false;
    private boolean rnrConnected = false;

    private boolean updateTabClicked = false;
    private boolean callbackTabClicked = false;
    private boolean rnrTabClicked = false;
    private boolean redialTabClicked = false;

    private boolean submitACPTimeout = false;
    private boolean tpdrnrScenario = false;
    private boolean sdrnrScenario = false;
    private boolean submitButtonPressedFromTimer = false;
    private boolean predefinedTime = false;
    private String selectedDateTime = "";
    private LinearLayout submitLayout;
    private LinearLayout updateMainLinearLayout, callbackMainLinearLayout, rnrMainLinearLayout, redialMainLinearLayout;
    CountDownTimer waitTimer;
    CountDownTimer endSessionWaitTimer;
    View decorView = null;

    private int count = 0;

    Timer timer;
    TimerTask timerTask;
    //we are going to use a handler to be able to run in our TimerTask
    final Handler handler = new Handler();

    private AlarmManager alarmMgr;
    private PendingIntent alarmIntent;

    private boolean enableESBTimerStarted = false;
    private boolean enableESBTimerCompleted = false;
    private RadioGroup rg = null;

    private EditText et_number;
    private int min, max;

    private RelativeLayout radMessageLayout;
    private WebView radMessageText;

    private RelativeLayout customkvsLayout;
    private WebView customkvsText;
    private LinearLayout ll_call_flow_upload_file, ll_call_flow_delete;

    private EditText et_sm_number;
    private GeneralButton sm_call_button;

    private String flpDuration = "";
    private int flp_duration = 0;

    ArrayList<String> decisionArrayList = null;
    private LinkedHashMap nestedQuesHash = new LinkedHashMap();
    private LinkedHashMap indexQuesHash = new LinkedHashMap();
    private LinkedHashMap actionTypeHash = new LinkedHashMap();

//    Handler collapseNotificationHandler = new Handler();
//    Runnable collapseNotificationRunnable;

    static {
        AppCompatDelegate.setCompatVectorFromResourcesEnabled(true);
    }

    private BroadcastReceiver mMessageReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            //Log.d("FKDemoTest", "UearnActivity - mMessageReceiver - onReceive() called");
            String connectednumber = intent.getStringExtra("connectedcustomer");
            if (connectednumber != null && !connectednumber.isEmpty()) {
                if (connectednumber.startsWith("clickview")) {
                    String[] args = connectednumber.split("@", 2);
                    int resID = getResources().getIdentifier(args[1], "id", getPackageName());
                    try {
                        View toClick = findViewById(resID);
                        toClick.performClick();
                    } catch (Exception e) {
                    }
                } else if (connectednumber.startsWith("clickspinner")) {
                    String[] args = connectednumber.split("@", 3);
                    int resID = getResources().getIdentifier(args[1], "id", getPackageName());
                    try {
                        Spinner selectedSpinner = findViewById(resID);
                        selectedSpinner.setSelection(Integer.parseInt(args[2]));
                    } catch (Exception e) {
                    }
                } else {
                    if (!getInfoCalled) {
                        ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER, "");
                        ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER, connectednumber);
                        NotificationData.dialledCustomerNumber = connectednumber;
                        if (SmarterSMBApplication.outgoingCallNotInStartMode) {
                            NotificationData.outboundDialledCustomerNumber = connectednumber;
                        }
                        connectedCustomer = connectednumber;
                        CommonUtils.storeUuidHash(connectednumber, NotificationData.uuid);
                        CommonUtils.storeAutoDialerHash(connectednumber);
                        if (!processAfterCallConnected) {
                            processAfterCallConnected();
                        }
                        if (mSocket != null && mSocket.connected()) {
                            try {
                                mSocket.off("connectedcustomer", onCustomerConnected);
                            } catch (Exception e) {
                            }
                        }
                    }
                }
            }

            if (intent.hasExtra("result")) {
                String result = intent.getStringExtra("result");
                if (result.equals("call_disconnected")) {
                    SmarterSMBApplication.autoCallDisconnected = true;
                    if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
                        boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
                        if (ibControl) {
                            ServiceHandler.callDisconnected = true;

                            String qanda = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");
                            if (qanda != null && !qanda.isEmpty() && !qanda.equals("null")) {

                            } else {
                                showACPScreen();
                            }
                        }
                    }
                    if (ApplicationSettings.containsPref(AppConstants.FK_CONTROL)) {
                        boolean fkControl = ApplicationSettings.getPref(AppConstants.FK_CONTROL, false);
                        if (fkControl) {
                            try {
                                String callEndTime = CommonUtils.getTimeFormatInISO(new Date());
                                SmarterSMBApplication.callEndTime = callEndTime;
                            } catch (Exception e) {
                                SmarterSMBApplication.callEndTime = "";
                            }
                            if (SmarterSMBApplication.callStateIsDisconnected) {
                                endCallButtonAction();
                            }
                        }
                    }
                } else if (result.equals("call_answered")) {
                    //Log.d("FKDemoTest", "UearnActivity - mMessageReceiver - onReceive() call_answered called");
                    String cloudNumber2 = ApplicationSettings.getPref(AppConstants.CLOUD_OUTGOING2, "");
                    if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
                        connectingText2 = findViewById(R.id.connectingText2);
                        connectingText1 = findViewById(R.id.connectingText1);
                        boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
                        if (ibControl) {
                            //Log.d("FKDemoTest", "UearnActivity - call_answered - SmarterSMBApplication.currentAppState"+SmarterSMBApplication.currentAppState);
                            if (SmarterSMBApplication.currentAppState != null && !SmarterSMBApplication.currentAppState.isEmpty() && (SmarterSMBApplication.currentAppState.equalsIgnoreCase("Connected"))) {

                            } else {
                                if (!SmarterSMBApplication.agentIsInConnectedState) {
                                    new ConnectedInfo().execute();
                                }
                                SmarterSMBApplication.callStateIsDisconnected = false;
                                SmarterSMBApplication.incomingCallRejectedByAgent = false;
                                SmarterSMBApplication.autoCallDisconnected = false;
                                ServiceHandler.callDisconnected = false;

                                SmarterSMBApplication.autoCallAnswered = true;
                                //Log.d("FKDemoTest", "UearnActivity - SmarterSMBApplication.autoCallAnswered true 1");
                                Intent currentIntent = new Intent("android.intent.action.MAIN");
                                currentIntent.setComponent(getIntent().getComponent());
                                currentIntent.addCategory("android.intent.category.LAUNCHER");
                                currentIntent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
                                //Log.d("FKDemoTest", "UearnActivity - mMessageReceiver - call_answered called reorder app to front");
                                startActivity(currentIntent);

                                if (ApplicationSettings.containsPref(AppConstants.CONNECTED_TEXT)) {
                                    String connectedTextStr = ApplicationSettings.getPref(AppConstants.CONNECTED_TEXT, "");
                                    if (connectedTextStr != null && !connectedTextStr.isEmpty() && !connectedTextStr.equals("null")) {
                                        String[] connectedTextStrArr = connectedTextStr.split("\\|");
                                        connection_status.setText(connectedTextStrArr[0].toString());
                                        connectingText1.setText(connectedTextStrArr[1].toString());
                                        connectingText2.setText(connectedTextStrArr[2].toString());
                                        endCallButtonLayout.setVisibility(View.VISIBLE);
                                        muteCallButton.setVisibility(View.VISIBLE);
                                        launchAppButton.setVisibility(View.VISIBLE);
                                        getInfo.setVisibility(View.GONE);
                                    }
                                }

                                String qanda = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");
                                if (qanda != null && !qanda.isEmpty() && !qanda.equals("null")) {
                                    layout5.setVisibility(View.VISIBLE);
                                    submitLayout.setVisibility(View.GONE);
                                    nextButton.setVisibility(View.VISIBLE);
                                    previousButton.setVisibility(View.VISIBLE);
                                    SmarterSMBApplication.currentAppState = "Connected";
                                    SmarterSMBApplication.agentIsInConnectingState = false;
                                    //Log.d("PredictiveTesting", "showQuestionnaireForInboundCall() Outside");
                                    showQuestionnaireForInboundCall();
                                } else {
                                    layout5.setVisibility(View.GONE);
                                    submitLayout.setVisibility(View.GONE);
                                    nextButton.setVisibility(View.GONE);
                                    previousButton.setVisibility(View.GONE);
                                    nameNumberRelativeLayout.setVisibility(View.GONE);
                                    flp_layout.setVisibility(View.GONE);
                                    acpBottomLayout.setVisibility(View.GONE);
                                }

                                if (!ServiceHandler.callDisconnected) {
                                    if (NotificationData.customKVS != null && !NotificationData.customKVS.isEmpty() && !NotificationData.customKVS.equals("null")) {
                                        if (customkvsText != null) {
                                            customkvsText.loadDataWithBaseURL(null, NotificationData.customKVS, "text/html", "utf-8", null);
                                            customkvsLayout.setVisibility(View.VISIBLE);
                                            customkvsText.setVisibility(View.VISIBLE);
                                        }
                                    }
                                }
                            }
                        }
                    }else if (SmarterSMBApplication.cloud2IncomingCall) {
                        connectingText2 = findViewById(R.id.connectingText2);
                        connectingText1 = findViewById(R.id.connectingText1);
                        if (SmarterSMBApplication.currentAppState != null && !SmarterSMBApplication.currentAppState.isEmpty() && (SmarterSMBApplication.currentAppState.equalsIgnoreCase("Connected"))) {

                        } else {
                            if (!SmarterSMBApplication.agentIsInConnectedState) {
                                new ConnectedInfo().execute();
                            }
                            SmarterSMBApplication.callStateIsDisconnected = false;
                            SmarterSMBApplication.incomingCallRejectedByAgent = false;
                            SmarterSMBApplication.autoCallDisconnected = false;
                            ServiceHandler.callDisconnected = false;

                            SmarterSMBApplication.autoCallAnswered = true;
                            //Log.d("FKDemoTest", "UearnActivity - SmarterSMBApplication.autoCallAnswered true 1");
                            Intent currentIntent = new Intent("android.intent.action.MAIN");
                            currentIntent.setComponent(getIntent().getComponent());
                            currentIntent.addCategory("android.intent.category.LAUNCHER");
                            currentIntent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
                            //Log.d("FKDemoTest", "UearnActivity - mMessageReceiver - call_answered called reorder app to front");
                            startActivity(currentIntent);

                            if (ApplicationSettings.containsPref(AppConstants.CONNECTED_TEXT)) {
                                String connectedTextStr = ApplicationSettings.getPref(AppConstants.CONNECTED_TEXT, "");
                                if (connectedTextStr != null && !connectedTextStr.isEmpty() && !connectedTextStr.equals("null")) {
                                    String[] connectedTextStrArr = connectedTextStr.split("\\|");
                                    connection_status.setText(connectedTextStrArr[0].toString());
                                    connectingText1.setText(connectedTextStrArr[1].toString());
                                    connectingText2.setText(connectedTextStrArr[2].toString());
                                    endCallButtonLayout.setVisibility(View.VISIBLE);
                                    muteCallButton.setVisibility(View.VISIBLE);
                                    launchAppButton.setVisibility(View.VISIBLE);
                                    getInfo.setVisibility(View.GONE);
                                }
                            }

                            getCustomInfoLayout.setVisibility(View.VISIBLE);
                            customersInfoLayout.setVisibility(View.GONE);
                            titleLayout.setVisibility(View.GONE);
                            customkvsLayout.setVisibility(View.GONE);
                            NotificationData.leadSource = "";
                            questionCount = 0;
                            checkBoxScenario = false;
                            tempQnAHash = new LinkedHashMap();
                            questionAnswerHash = new LinkedHashMap();
                            NotificationData.dialledCustomerNumber = "";
                            SmarterSMBApplication.showSingleAcp = false;
                            postOutboundCallDataInInboundScenario();

                            String qanda = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");
                            if (qanda != null && !qanda.isEmpty() && !qanda.equals("null")) {
                                layout5.setVisibility(View.VISIBLE);
                                submitLayout.setVisibility(View.GONE);
                                nextButton.setVisibility(View.VISIBLE);
                                previousButton.setVisibility(View.VISIBLE);
                                enableCallOptions();
                                radMessageLayout.setVisibility(View.GONE);
                                radMessageText.setVisibility(View.GONE);
                                formButtonLayout.setVisibility(View.VISIBLE);
                                SmarterSMBApplication.currentAppState = "Connected";
                                SmarterSMBApplication.agentIsInConnectingState = false;
                                //Log.d("PredictiveTesting", "showQuestionnaireForInboundCall() Outside");
                                //getCustomInfoLayout.setVisibility(View.GONE);
                                showQuestionnaireForInboundCall();
                            } else {
                                layout5.setVisibility(View.GONE);
                                submitLayout.setVisibility(View.GONE);
                                nextButton.setVisibility(View.GONE);
                                previousButton.setVisibility(View.GONE);
                                disableCallOptions();
                                nameNumberRelativeLayout.setVisibility(View.GONE);
                                flp_layout.setVisibility(View.GONE);
                                acpBottomLayout.setVisibility(View.GONE);
                            }

//                            if (!ServiceHandler.callDisconnected) {
//                                if (NotificationData.customKVS != null && !NotificationData.customKVS.isEmpty() && !NotificationData.customKVS.equals("null")) {
//                                    if (customkvsText != null) {
//                                        customkvsText.loadDataWithBaseURL(null, NotificationData.customKVS, "text/html", "utf-8", null);
//                                        customkvsLayout.setVisibility(View.VISIBLE);
//                                        customkvsText.setVisibility(View.VISIBLE);
//                                    }
//                                }
//                            }
                        }
                    }
                    else {
                        if (!SmarterSMBApplication.agentIsInConnectedState) {
                            new ConnectedInfo().execute();
                        }
                        //Log.d("FKDemoTest", "UearnActivity - mMessageReceiver - onReceive() call_answered called ELSE");
                        SmarterSMBApplication.callStateIsDisconnected = false;
                        SmarterSMBApplication.incomingCallRejectedByAgent = false;
                        SmarterSMBApplication.autoCallDisconnected = false;
                        ServiceHandler.callDisconnected = false;

                        SmarterSMBApplication.autoCallAnswered = true;
                        //Log.d("FKDemoTest", "UearnActivity - SmarterSMBApplication.autoCallAnswered true 2");
                        if (ApplicationSettings.containsPref(AppConstants.CONNECTED_TEXT)) {
                            String connectedTextStr = ApplicationSettings.getPref(AppConstants.CONNECTED_TEXT, "");
                            if (connectedTextStr != null && !connectedTextStr.isEmpty() && !connectedTextStr.equals("null")) {
                                String[] connectedTextStrArr = connectedTextStr.split("\\|");
                                connection_status.setText(connectedTextStrArr[0].toString());
                                connectingText1.setText(connectedTextStrArr[1].toString());
                                connectingText2.setText(connectedTextStrArr[2].toString());
                                endCallButtonLayout.setVisibility(View.VISIBLE);
                                muteCallButton.setVisibility(View.VISIBLE);
                                launchAppButton.setVisibility(View.VISIBLE);
                                getInfo.setVisibility(View.VISIBLE);
                            }
                        }

                        if (!ServiceHandler.callDisconnected) {
                            if (NotificationData.customKVS != null && !NotificationData.customKVS.isEmpty() && !NotificationData.customKVS.equals("null")) {
                                if (customkvsText != null) {
                                    customkvsText.loadDataWithBaseURL(null, NotificationData.customKVS, "text/html", "utf-8", null);
                                    customkvsLayout.setVisibility(View.VISIBLE);
                                    customkvsText.setVisibility(View.VISIBLE);
                                }
                            }
                        }
                    }
                } else if (result.equals("end_session")) {
                    muteCallButton.setVisibility(View.VISIBLE);
                    launchAppButton.setVisibility(View.VISIBLE);
                } else if (result.equals("launch_from_recent")) {
                    if(SmarterSMBApplication.cloud2IncomingCall){

                    } else {
                        Intent currentIntent = new Intent("android.intent.action.MAIN");
                        currentIntent.setComponent(getIntent().getComponent());
                        currentIntent.addCategory("android.intent.category.LAUNCHER");
                        currentIntent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
                        startActivity(currentIntent);
                    }
                } else if (result.equals("rad_message")) {
                    if (radMessageText != null) {
                        String configText = ApplicationSettings.getPref(AppConstants.RAD_MESSAGE_VALUE, "");
                        if (configText != null && !configText.isEmpty()) {
                            radMessageText.loadDataWithBaseURL(null, configText, "text/html", "utf-8", null);
                        }
                        radMessageLayout.setVisibility(View.VISIBLE);
                        radMessageText.setVisibility(View.VISIBLE);
                    }
                }
            }
        }
    };

    private Emitter.Listener onConnected = new Emitter.Listener() {
        @Override
        public void call(final Object... args) {
            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    if (mSocket != null && mSocket.connected()) {
                        try {
                            String userId = ApplicationSettings.getPref(AppConstants.USERINFO_ID, "");
                            if (!userId.isEmpty()) {
                                mSocket.off("connect", onConnected);
                                mSocket.emit("registerme", userId);
                            }
                        } catch (Exception e) {
                        }
                    }
                }
            });
        }
    };

    private Emitter.Listener onCustomerConnected = new Emitter.Listener() {
        @Override
        public void call(final Object... args) {
            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    try {
                        String connectednumber = (String) args[0];
                        String userId = ApplicationSettings.getPref(AppConstants.USERINFO_ID, "");
                        if (!userId.isEmpty()) {
                            if (mSocket != null && mSocket.connected()) {
                                try {
                                    mSocket.emit("connectedcustomer-ack", userId);
                                    boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
                                    if (sequencialEndpoint) {
                                        mSocket.off("connectedcustomer", onCustomerConnected);
                                    }
                                } catch (Exception e) {
                                }
                            }
                        }
                        if (ApplicationSettings.containsPref(AppConstants.CUSTOMER_QUES)) {
                            boolean customerQues = ApplicationSettings.getPref(AppConstants.CUSTOMER_QUES, false);
                            if (customerQues) {
                                String questionnaire = "";
                                if (connectednumber != null && !connectednumber.isEmpty()) {
                                    questionnaire = getQuestionnaire(connectednumber);
                                    if (questionnaire != null && !questionnaire.isEmpty() && !questionnaire.equals("null")) {
                                        ApplicationSettings.putPref(AppConstants.QUESTIONNAIRE, questionnaire);
                                    } else {
                                        questionnaire = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE_FROM_SETTINGS, "");
                                        ApplicationSettings.putPref(AppConstants.QUESTIONNAIRE, questionnaire);
                                    }
                                } else {
                                    questionnaire = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE_FROM_SETTINGS, "");
                                    ApplicationSettings.putPref(AppConstants.QUESTIONNAIRE, questionnaire);
                                }
                            }
                        }

                        if (!getInfoCalled) {
                            ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER, "");
                            ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER, connectednumber);
                            NotificationData.dialledCustomerNumber = connectednumber;
                            if (SmarterSMBApplication.outgoingCallNotInStartMode) {
                                NotificationData.outboundDialledCustomerNumber = connectednumber;
                            }
                            connectedCustomer = connectednumber;
                            customerNumber = connectednumber;
                            CommonUtils.storeUuidHash(connectednumber, NotificationData.uuid);
                            CommonUtils.storeAutoDialerHash(connectednumber);
                            if (!processAfterCallConnected) {
                                processAfterCallConnected();
                            }
                        }
                    } catch (Exception e) {
                    }
                }
            });
        }
    };

    private Emitter.Listener onIsAlive = new Emitter.Listener() {
        @Override
        public void call(final Object... args) {
            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    if (mSocket != null && mSocket.connected()) {
                        try {
                            String userId = ApplicationSettings.getPref(AppConstants.USERINFO_ID, "");
                            if (!userId.isEmpty()) {
                                mSocket.emit("isalive-ack", userId);
                            }
                        } catch (Exception e) {
                        }
                    }
                }
            });
        }
    };

    private void callToServerGetApi(String apiUrl, final String data_status, final int value) {
        new APIProvider.ServerGetOffline(apiUrl, 1l, new API_Response_Listener<String>() {
            @Override
            public void onComplete(String data, long request_code, int failure_code) {
                if (value == 0) {
                    AppConstants.DATA_STATUS = data_status;
                }
            }
        }).call();
    }

    private void initUi() {
        setHeaderTitle();
        if (showInProgress == 1) {
            handleQuestionnaireAndACP();
            if (NotificationData.isSocketResponse) {
                if (titleText != null && !titleText.isEmpty()) {
                    titleLayout.setVisibility(View.VISIBLE);
                    if (titleText.startsWith("<html>")) {
                        showTitleWebView();
                    } else {
                        showTitleTextView();
                    }
                }
            }
            if (titleText != null && !titleText.isEmpty()) {
                if (NotificationData.isSocketResponse) {
                    titleLayout.setVisibility(View.VISIBLE);
                    if (titleText.startsWith("<html>")) {
                        showTitleWebView();
                    } else {
                        showTitleTextView();
                    }
                }
            }
        } else {
            setSpinners();
            initializeCalendar();
            checkRnrStatus();
            checkViewFocus();
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (CommonUtils.allowScreenshot()) {

        } else {
            getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
        }
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
        getWindow().getDecorView().setBackgroundColor(getResources().getColor(R.color.screen_background_color));
        try {
            LocalBroadcastManager.getInstance(this).registerReceiver(mMessageReceiver, new IntentFilter("connected-customer-push-event"));
        } catch (Exception e) {
        }
        changeStatusBarColor(this);
        SmarterSMBApplication.currentActivity = this;

        if (ApplicationSettings.containsPref(AppConstants.CALL_OPTIONS)) {
            String callOptions = ApplicationSettings.getPref(AppConstants.CALL_OPTIONS, "");
            if (callOptions != null && !callOptions.isEmpty()){
                if(callOptions.contains("Transfer Call") && callOptions.contains("Conference Call")){
                  SmarterSMBApplication.transferCallEnabled = true;
                  SmarterSMBApplication.conferenceCallEnabled = true;
                } else if(callOptions.contains("Transfer Call")){
                    SmarterSMBApplication.transferCallEnabled = true;
                } else if(callOptions.contains("Conference Call")){
                    SmarterSMBApplication.conferenceCallEnabled = true;
                }
            }
        }

        if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
            boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
            if (ibControl) {

            }
        } else if (ApplicationSettings.containsPref(AppConstants.FK_CONTROL)) {
            boolean fkControl = ApplicationSettings.getPref(AppConstants.FK_CONTROL, false);
            if (fkControl) {
                if (ApplicationSettings.containsPref(AppConstants.SYSTEM_CONTROL)) {
                    boolean systemControl = ApplicationSettings.getPref(AppConstants.SYSTEM_CONTROL, false);
                    if (systemControl) {
                        try {
                            Object service = this.getSystemService("statusbar");
                            Class<?> statusbarManager = Class.forName("android.app.StatusBarManager");
                            Method collapse = statusbarManager.getMethod("collapsePanels");
                            collapse.setAccessible(true);
                            collapse.invoke(service);
                        } catch (Exception ex) {
                        }
                    }
                }
            }
        }

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
            StrictMode.VmPolicy.Builder builder = new StrictMode.VmPolicy.Builder();
            StrictMode.setVmPolicy(builder.build());
        }

        if (ApplicationSettings.containsPref(AppConstants.FK_CONTROL)) {
            boolean fkControl = ApplicationSettings.getPref(AppConstants.FK_CONTROL, false);
            if (fkControl) {
                setContentView(R.layout.uearn_aftercallpopup_fk);
            } else if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
                boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
                if (ibControl) {
                    setContentView(R.layout.uearn_aftercallpopup_ib);
                } else {
                    boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
                    if (sequencialEndpoint) {
                        setContentView(R.layout.uearn_aftercallpopup_sequencial);
                    } else {
                        setContentView(R.layout.uearn_aftercallpopup);
                    }
                }
            } else {
                boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
                if (sequencialEndpoint) {
                    setContentView(R.layout.uearn_aftercallpopup_sequencial);
                } else {
                    setContentView(R.layout.uearn_aftercallpopup);
                }
            }
        } else if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
            boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
            if (ibControl) {
                setContentView(R.layout.uearn_aftercallpopup_ib);
            } else {
                boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
                if (sequencialEndpoint) {
                    setContentView(R.layout.uearn_aftercallpopup_sequencial);
                } else {
                    setContentView(R.layout.uearn_aftercallpopup);
                }
            }
        } else {
            boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
            if (sequencialEndpoint) {
                setContentView(R.layout.uearn_aftercallpopup_sequencial);
            } else {
                setContentView(R.layout.uearn_aftercallpopup);
            }
        }

        if (ApplicationSettings.containsPref(AppConstants.USERINFO_COMPANY)) {
            company = ApplicationSettings.getPref(AppConstants.USERINFO_COMPANY, "");
        }

        remoteAutoEnabled = ApplicationSettings.getPref(AppConstants.RAD_OPTIMIZED_POST, "");
        activity = this;

        if (ApplicationSettings.containsPref(AppConstants.SYSTEM_CONTROL)) {
            boolean systemControl = ApplicationSettings.getPref(AppConstants.SYSTEM_CONTROL, false);
            if (systemControl) {
                decorView = getWindow().getDecorView();
                decorView.setOnSystemUiVisibilityChangeListener(this);
            }
        }

        radStarted = remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty();
        initializeUi();
        if (ApplicationSettings.containsPref(AppConstants.FK_CONTROL)) {
            boolean fkControl = ApplicationSettings.getPref(AppConstants.FK_CONTROL, false);
            if (fkControl) {

            }
        } else if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
            boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
            if (ibControl) {
                String qanda = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");
                if (qanda != null && !qanda.isEmpty() && !qanda.equals("null")) {
                    initUi();
                }
            }
        } else {
            initUi();
        }

        showCallOptionsBasedOnSettings();

        if (ApplicationSettings.containsPref(AppConstants.FK_CONTROL)) {
            boolean fkControl = ApplicationSettings.getPref(AppConstants.FK_CONTROL, false);
            if (fkControl) {

            } else {
                long enableECBTime = 0l;
                if (ApplicationSettings.containsPref(AppConstants.ENABLE_ECB)) {
                    String enableECBTimeStr = ApplicationSettings.getPref(AppConstants.ENABLE_ECB, "");
                    if (enableECBTimeStr != null && !enableECBTimeStr.isEmpty()) {
                        enableECBTime = Long.valueOf(enableECBTimeStr);
                        //System.out.print(enableECBTime);
                    }
                }

                new Handler().postDelayed(new Runnable() {
                    public void run() {
                        SmarterSMBApplication.enableECBAndESB = true;
                    }
                }, enableECBTime);
            }
        } else {
            long enableECBTime = 0l;
            if (ApplicationSettings.containsPref(AppConstants.ENABLE_ECB)) {
                String enableECBTimeStr = ApplicationSettings.getPref(AppConstants.ENABLE_ECB, "");
                if (enableECBTimeStr != null && !enableECBTimeStr.isEmpty()) {
                    enableECBTime = Long.valueOf(enableECBTimeStr);
                    //System.out.print(enableECBTime);
                }
            }

            new Handler().postDelayed(new Runnable() {
                public void run() {
                    SmarterSMBApplication.enableECBAndESB = true;
                }
            }, enableECBTime);
        }

        String sioDisabled = ApplicationSettings.getPref(AppConstants.SIO_DISABLED, "");
        if (sioDisabled != null && !sioDisabled.isEmpty()) {

        } else {
            try {

                if (mSocket == null || !mSocket.connected()) {
                    IO.Options opts = new IO.Options();
                    opts.forceNew = true;
                    opts.reconnection = false;
                    mSocket = IO.socket(getSioAddress(), opts);
                    mSocket.on("connect", onConnected);
                    mSocket.on("isalive", onIsAlive);
                    mSocket.on("connectedcustomer", onCustomerConnected);
                    try {
                        mSocket.connect();
                    } catch (Exception e) {
                        Toast.makeText(this, "Please check your internet connection. ", Toast.LENGTH_SHORT).show();
                        finish();
                    }
                }
            } catch (URISyntaxException e) {
                Toast.makeText(this, "DB Not downloaded", Toast.LENGTH_SHORT).show();
                finish();
            }
        }
    }

    private void showTitleTextView() {
        if (titleWebView != null) {
            titleWebView.setVisibility(View.GONE);
        }
        titleTextView.setVisibility(View.VISIBLE);
        titleTextView.setText(titleText);
    }

    private void showTitleWebView() {
        titleTextView.setVisibility(View.GONE);
        if (titleWebView != null) {
            titleWebView.setVisibility(View.VISIBLE);
            titleWebView.loadData(titleText, "text/html", "UTF-8");
        }
    }

    private void hideTitleTextViewAndWebView() {
        titleTextView.setVisibility(View.GONE);
        if (titleWebView != null) {
            titleWebView.setVisibility(View.GONE);
        }
    }

    private void showTitleBasedOnType() {
        if (titleText != null && !titleText.isEmpty()) {
            if (titleText.startsWith("<html>")) {
                showTitleWebView();
            } else {
                showTitleTextView();
            }
        } else {
            hideTitleTextViewAndWebView();
        }
    }

    private void ratingsLayout() {
        showTitleBasedOnType();
        ratingsLayout.setVisibility(View.VISIBLE);
        if (rootQ.startsWith("<html>")) {
            ratingsTextView.setVisibility(View.GONE);
            ratingsWebView.setVisibility(View.VISIBLE);
            ratingsWebView.loadData(rootQ, "text/html", "UTF-8");
        } else {
            ratingsWebView.setVisibility(View.GONE);
            ratingsTextView.setVisibility(View.VISIBLE);
            ratingsTextView.setText(rootQ);
        }
        freeTextLayout.setVisibility(View.GONE);
        dropdownLayout.setVisibility(View.GONE);
        checkboxLayout.setVisibility(View.GONE);
        buttonsLayout.setVisibility(View.GONE);
        radiobuttonsLayout.setVisibility(View.GONE);
        numberpickerLayout.setVisibility(View.GONE);
        isInterestedLayout.setVisibility(View.GONE);
        dateTimeLayout.setVisibility(View.GONE);
        followupLayout.setVisibility(View.GONE);
        freeNumberLayout.setVisibility(View.GONE);
        searchableDropDownLayout.setVisibility(View.GONE);
        multiSelectionDropDownLayout.setVisibility(View.GONE);
        uploadAttachmentLayout.setVisibility(View.GONE);
        callManagerLayout.setVisibility(View.GONE);
        setEndCallButtonLayoutVisibility();
        initSeekBar();
    }

    private void setEndCallButtonLayoutVisibility() {
        if (ApplicationSettings.containsPref(AppConstants.FK_CONTROL)) {
            boolean fkControl = ApplicationSettings.getPref(AppConstants.FK_CONTROL, false);
            if (fkControl) {
                endCallButton.setVisibility(View.GONE);
                launchAppButton.setVisibility(View.VISIBLE);
            } else {
                endCallButtonLayout.setVisibility(View.VISIBLE);
            }
        } else {
            endCallButtonLayout.setVisibility(View.VISIBLE);
        }
    }

    private void callManagerLayout(){
        callManagerLayout.setVisibility(View.VISIBLE);

        freeTextLayout.setVisibility(View.GONE);
        dropdownLayout.setVisibility(View.GONE);
        buttonsLayout.setVisibility(View.GONE);
        radiobuttonsLayout.setVisibility(View.GONE);
        numberpickerLayout.setVisibility(View.GONE);
        isInterestedLayout.setVisibility(View.GONE);
        dateTimeLayout.setVisibility(View.GONE);
        freeNumberLayout.setVisibility(View.GONE);
        searchableDropDownLayout.setVisibility(View.GONE);
        multiSelectionDropDownLayout.setVisibility(View.GONE);
        uploadAttachmentLayout.setVisibility(View.GONE);
        ratingsLayout.setVisibility(View.GONE);
        followupLayout.setVisibility(View.GONE);
        checkboxLayout.setVisibility(View.GONE);
    }

    private void freeTextLayout() {
        if (rootR.equalsIgnoreCase("BLANK")) {
            freeTextEditTextLayout.setVisibility(View.GONE);
            customerExperience.setVisibility(View.GONE);
        } else {
            freeTextEditTextLayout.setVisibility(View.VISIBLE);
            customerExperience.setVisibility(View.VISIBLE);
        }
        showTitleBasedOnType();
        freeTextLayout.setVisibility(View.VISIBLE);
        if (rootQ.startsWith("<html>")) {
            freeTextTextView.setVisibility(View.GONE);
            freeTextWebView.setVisibility(View.VISIBLE);
            String base64 = null;
            try {
                base64 = android.util.Base64.encodeToString(rootQ.getBytes("UTF-8"),
                        android.util.Base64.DEFAULT);
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
            freeTextWebView.loadData(base64, "text/html; charset=utf-8", "base64");
        } else {
            freeTextWebView.setVisibility(View.GONE);
            freeTextTextView.setVisibility(View.VISIBLE);
            freeTextTextView.setText(rootQ);
        }
        if (rootA.length() > 0) {
            customerExperience.setText(rootA);
            if (NotificationData.isSocketResponse) {
                lastUpdateFromCustomerTv.setVisibility(View.VISIBLE);
                lastUpdateFromCustomerTv.setText("Last updated at:" + rootLastUpdate);
            }
        }
        if(rootValue != null && !rootValue.isEmpty()){
            customerExperience.setText(rootValue);
        }
        ratingsLayout.setVisibility(View.GONE);
        dropdownLayout.setVisibility(View.GONE);
        checkboxLayout.setVisibility(View.GONE);
        buttonsLayout.setVisibility(View.GONE);
        radiobuttonsLayout.setVisibility(View.GONE);
        numberpickerLayout.setVisibility(View.GONE);
        isInterestedLayout.setVisibility(View.GONE);
        dateTimeLayout.setVisibility(View.GONE);
        followupLayout.setVisibility(View.GONE);
        freeNumberLayout.setVisibility(View.GONE);
        searchableDropDownLayout.setVisibility(View.GONE);
        multiSelectionDropDownLayout.setVisibility(View.GONE);
        uploadAttachmentLayout.setVisibility(View.GONE);
        callManagerLayout.setVisibility(View.GONE);
        setEndCallButtonLayoutVisibility();
        applyHintTextFT(rootQ, hintText);
    }

    private void freeNumberLayout() {
        showTitleBasedOnType();
        freeNumberLayout.setVisibility(View.VISIBLE);
        if (rootQ.startsWith("<html>")) {
            freeNumberTextView.setVisibility(View.GONE);
            freeNumberWebView.setVisibility(View.VISIBLE);
            freeNumberWebView.loadData(rootQ, "text/html", "UTF-8");
        } else {
            freeNumberWebView.setVisibility(View.GONE);
            freeNumberTextView.setVisibility(View.VISIBLE);
            freeNumberTextView.setText(rootQ);
        }
        if (rootA.length() > 0) {
            freeNumber.setText(rootA);
            if (NotificationData.isSocketResponse) {
                lastUpdateFromCustomerTv.setVisibility(View.VISIBLE);
                lastUpdateFromCustomerTv.setText("Last updated at:" + rootLastUpdate);
            }
        }
        if(rootValue != null && !rootValue.isEmpty()){
            freeNumber.setText(rootValue);
        }
        ratingsLayout.setVisibility(View.GONE);
        dropdownLayout.setVisibility(View.GONE);
        checkboxLayout.setVisibility(View.GONE);
        buttonsLayout.setVisibility(View.GONE);
        radiobuttonsLayout.setVisibility(View.GONE);
        numberpickerLayout.setVisibility(View.GONE);
        isInterestedLayout.setVisibility(View.GONE);
        dateTimeLayout.setVisibility(View.GONE);
        followupLayout.setVisibility(View.GONE);
        freeTextLayout.setVisibility(View.GONE);
        searchableDropDownLayout.setVisibility(View.GONE);
        multiSelectionDropDownLayout.setVisibility(View.GONE);
        uploadAttachmentLayout.setVisibility(View.GONE);
        callManagerLayout.setVisibility(View.GONE);
        setEndCallButtonLayoutVisibility();
        applyHintTextFN(rootQ, hintText);
    }

    private void yesNoLayout() {
        showTitleBasedOnType();
        isInterestedLayout.setVisibility(View.VISIBLE);
        if (rootQ.startsWith("<html>")) {
            isInterestedTextView.setVisibility(View.GONE);
            isInterestedWebView.setVisibility(View.VISIBLE);
            isInterestedWebView.loadData(rootQ, "text/html", "UTF-8");
        } else {
            isInterestedWebView.setVisibility(View.GONE);
            isInterestedTextView.setVisibility(View.VISIBLE);
            isInterestedTextView.setText(rootQ);
        }
        if (rootA.length() > 0) {
            if (rootA.equals("YES")) {
                formStatus = "YES";
                yesButton.setBackgroundColor(ContextCompat.getColor(getApplicationContext(), R.color.selected_item_color));
                yesButton.setTextColor(Color.WHITE);
                yesButton.setBackground(getResources().getDrawable(R.drawable.custom_rounded_corners));
                noButton.setBackground(getResources().getDrawable(R.drawable.call_flow_button));
                noButton.setTextColor(ContextCompat.getColor(this, R.color.ques_text_color));
            } else {
                formStatus = "NO";
                noButton.setBackgroundColor(ContextCompat.getColor(getApplicationContext(), R.color.selected_item_color));
                noButton.setTextColor(Color.WHITE);
                noButton.setBackground(getResources().getDrawable(R.drawable.custom_rounded_corners));
                yesButton.setBackground(getResources().getDrawable(R.drawable.call_flow_button));
                yesButton.setTextColor(ContextCompat.getColor(this, R.color.ques_text_color));
            }
            if (NotificationData.isSocketResponse) {
                lastUpdateFromCustomerTv.setVisibility(View.VISIBLE);
                lastUpdateFromCustomerTv.setText("Last updated at:" + rootLastUpdate);
            }
        }
        ratingsLayout.setVisibility(View.GONE);
        freeTextLayout.setVisibility(View.GONE);
        dropdownLayout.setVisibility(View.GONE);
        checkboxLayout.setVisibility(View.GONE);
        buttonsLayout.setVisibility(View.GONE);
        radiobuttonsLayout.setVisibility(View.GONE);
        numberpickerLayout.setVisibility(View.GONE);
        dateTimeLayout.setVisibility(View.GONE);
        followupLayout.setVisibility(View.GONE);
        freeNumberLayout.setVisibility(View.GONE);
        searchableDropDownLayout.setVisibility(View.GONE);
        multiSelectionDropDownLayout.setVisibility(View.GONE);
        uploadAttachmentLayout.setVisibility(View.GONE);
        callManagerLayout.setVisibility(View.GONE);
        setEndCallButtonLayoutVisibility();
    }

    private void dropDownLayout() {
        showTitleBasedOnType();
        dropdownLayout.setVisibility(View.VISIBLE);
        checkboxLayout.setVisibility(View.GONE);
        if (rootQ.startsWith("<html>")) {
            dropDownTextView.setVisibility(View.GONE);
            dropDownWebView.setVisibility(View.VISIBLE);
            dropDownWebView.loadData(rootQ, "text/html", "UTF-8");
        } else {
            dropDownWebView.setVisibility(View.GONE);
            dropDownTextView.setVisibility(View.VISIBLE);
            dropDownTextView.setText(rootQ);
        }
        if(rootValue != null && !rootValue.isEmpty()){
            dropDownValueFromList = rootValue;
        }
        ratingsLayout.setVisibility(View.GONE);
        freeTextLayout.setVisibility(View.GONE);
        buttonsLayout.setVisibility(View.GONE);
        radiobuttonsLayout.setVisibility(View.GONE);
        numberpickerLayout.setVisibility(View.GONE);
        isInterestedLayout.setVisibility(View.GONE);
        dateTimeLayout.setVisibility(View.GONE);
        followupLayout.setVisibility(View.GONE);
        freeNumberLayout.setVisibility(View.GONE);
        searchableDropDownLayout.setVisibility(View.GONE);
        multiSelectionDropDownLayout.setVisibility(View.GONE);
        uploadAttachmentLayout.setVisibility(View.GONE);
        callManagerLayout.setVisibility(View.GONE);
        setEndCallButtonLayoutVisibility();
        createSpinner(rootQ);
    }

    private void checkBoxLayout() {
        showTitleBasedOnType();
        checkboxLayout.setVisibility(View.VISIBLE);
        if (rootQ.startsWith("<html>")) {
            checkboxTextView.setVisibility(View.GONE);
            checkboxWebView.setVisibility(View.VISIBLE);
            checkboxWebView.loadData(rootQ, "text/html", "UTF-8");
        } else {
            checkboxWebView.setVisibility(View.GONE);
            checkboxTextView.setVisibility(View.VISIBLE);
            checkboxTextView.setText(rootQ);
        }
        freeTextLayout.setVisibility(View.GONE);
        dropdownLayout.setVisibility(View.GONE);
        buttonsLayout.setVisibility(View.GONE);
        radiobuttonsLayout.setVisibility(View.GONE);
        numberpickerLayout.setVisibility(View.GONE);
        isInterestedLayout.setVisibility(View.GONE);
        dateTimeLayout.setVisibility(View.GONE);
        freeNumberLayout.setVisibility(View.GONE);
        searchableDropDownLayout.setVisibility(View.GONE);
        multiSelectionDropDownLayout.setVisibility(View.GONE);
        uploadAttachmentLayout.setVisibility(View.GONE);
        ratingsLayout.setVisibility(View.GONE);
        followupLayout.setVisibility(View.GONE);
        callManagerLayout.setVisibility(View.GONE);

        setEndCallButtonLayoutVisibility();
        createCheckbox(rootQ, currentSelectedCheckboxHashMap);
    }

    private void buttonLayout() {
        showTitleBasedOnType();
        buttonsLayout.setVisibility(View.VISIBLE);
        if (rootQ.startsWith("<html>")) {
            buttonsTextView.setVisibility(View.GONE);
            buttonsWebView.setVisibility(View.VISIBLE);
            buttonsWebView.loadData(rootQ, "text/html", "UTF-8");
        } else {
            buttonsWebView.setVisibility(View.GONE);
            buttonsTextView.setVisibility(View.VISIBLE);
            buttonsTextView.setText(rootQ);
        }
        ratingsLayout.setVisibility(View.GONE);
        freeTextLayout.setVisibility(View.GONE);
        dropdownLayout.setVisibility(View.GONE);
        checkboxLayout.setVisibility(View.GONE);
        radiobuttonsLayout.setVisibility(View.GONE);
        numberpickerLayout.setVisibility(View.GONE);
        isInterestedLayout.setVisibility(View.GONE);
        dateTimeLayout.setVisibility(View.GONE);
        followupLayout.setVisibility(View.GONE);
        freeNumberLayout.setVisibility(View.GONE);
        searchableDropDownLayout.setVisibility(View.GONE);
        multiSelectionDropDownLayout.setVisibility(View.GONE);
        uploadAttachmentLayout.setVisibility(View.GONE);
        callManagerLayout.setVisibility(View.GONE);
        setEndCallButtonLayoutVisibility();
        createButtons(rootQ, "");
    }

    private void radiobuttonLayout() {
        showTitleBasedOnType();
        radiobuttonsLayout.setVisibility(View.VISIBLE);
        if (rootQ.startsWith("<html>")) {
            radiobuttonsTextView.setVisibility(View.GONE);
            radiobuttonsWebView.setVisibility(View.VISIBLE);
            radiobuttonsWebView.loadData(rootQ, "text/html", "UTF-8");
        } else {
            radiobuttonsWebView.setVisibility(View.GONE);
            radiobuttonsTextView.setVisibility(View.VISIBLE);
            radiobuttonsTextView.setText(rootQ);
        }
        ratingsLayout.setVisibility(View.GONE);
        freeTextLayout.setVisibility(View.GONE);
        dropdownLayout.setVisibility(View.GONE);
        checkboxLayout.setVisibility(View.GONE);
        buttonsLayout.setVisibility(View.GONE);
        numberpickerLayout.setVisibility(View.GONE);
        isInterestedLayout.setVisibility(View.GONE);
        dateTimeLayout.setVisibility(View.GONE);
        followupLayout.setVisibility(View.GONE);
        freeNumberLayout.setVisibility(View.GONE);
        searchableDropDownLayout.setVisibility(View.GONE);
        multiSelectionDropDownLayout.setVisibility(View.GONE);
        uploadAttachmentLayout.setVisibility(View.GONE);
        callManagerLayout.setVisibility(View.GONE);
        setEndCallButtonLayoutVisibility();
        createRadioButtons(rootQ);
    }

    private void numberpickerLayout() {
        showTitleBasedOnType();
        numberpickerLayout.setVisibility(View.VISIBLE);
        if (rootQ.startsWith("<html>")) {
            numberpickerTextView.setVisibility(View.GONE);
            numberpickerWebView.setVisibility(View.VISIBLE);
            numberpickerWebView.loadData(rootQ, "text/html", "UTF-8");
        } else {
            numberpickerWebView.setVisibility(View.GONE);
            numberpickerTextView.setVisibility(View.VISIBLE);
            numberpickerTextView.setText(rootQ);
        }
        ratingsLayout.setVisibility(View.GONE);
        freeTextLayout.setVisibility(View.GONE);
        dropdownLayout.setVisibility(View.GONE);
        checkboxLayout.setVisibility(View.GONE);
        buttonsLayout.setVisibility(View.GONE);
        radiobuttonsLayout.setVisibility(View.GONE);
        isInterestedLayout.setVisibility(View.GONE);
        dateTimeLayout.setVisibility(View.GONE);
        followupLayout.setVisibility(View.GONE);
        freeNumberLayout.setVisibility(View.GONE);
        searchableDropDownLayout.setVisibility(View.GONE);
        multiSelectionDropDownLayout.setVisibility(View.GONE);
        uploadAttachmentLayout.setVisibility(View.GONE);
        callManagerLayout.setVisibility(View.GONE);
        setEndCallButtonLayoutVisibility();
        createNumberPicker(rootQ);
    }

    private void dateTimeLayout() {
        if (rootR.equalsIgnoreCase("DATE")) {
            questTime.setVisibility(View.GONE);
            timeView.setVisibility(View.GONE);
            //questionnaireDateTimeLayout.setWeightSum(1);
        } else {
            questTime.setVisibility(View.VISIBLE);
            timeView.setVisibility(View.VISIBLE);
            //questionnaireDateTimeLayout.setWeightSum(2);
        }
        showTitleBasedOnType();
        dateTimeLayout.setVisibility(View.VISIBLE);
        if (rootQ.startsWith("<html>")) {
            dateTimeTextView.setVisibility(View.GONE);
            dateTimeWebView.setVisibility(View.VISIBLE);
            dateTimeWebView.loadData(rootQ, "text/html", "UTF-8");
        } else {
            dateTimeWebView.setVisibility(View.GONE);
            dateTimeTextView.setVisibility(View.VISIBLE);
            dateTimeTextView.setText(rootQ);
        }
        followupLayout.setVisibility(View.GONE);
        ratingsLayout.setVisibility(View.GONE);
        freeTextLayout.setVisibility(View.GONE);
        dropdownLayout.setVisibility(View.GONE);
        checkboxLayout.setVisibility(View.GONE);
        buttonsLayout.setVisibility(View.GONE);
        radiobuttonsLayout.setVisibility(View.GONE);
        numberpickerLayout.setVisibility(View.GONE);
        isInterestedLayout.setVisibility(View.GONE);
        freeNumberLayout.setVisibility(View.GONE);
        searchableDropDownLayout.setVisibility(View.GONE);
        multiSelectionDropDownLayout.setVisibility(View.GONE);
        uploadAttachmentLayout.setVisibility(View.GONE);
        callManagerLayout.setVisibility(View.GONE);
        setEndCallButtonLayoutVisibility();
    }

    private void followUpLayout() {
        checkForFollowUpDurationFromSettings();
        showTitleBasedOnType();
        followupLayout.setVisibility(View.VISIBLE);
        if (rootQ.startsWith("<html>")) {
            followupTextView.setVisibility(View.GONE);
            followupWebView.setVisibility(View.VISIBLE);
            followupWebView.loadData(rootQ, "text/html", "UTF-8");
        } else {
            followupWebView.setVisibility(View.GONE);
            followupTextView.setVisibility(View.VISIBLE);
            followupTextView.setText(rootQ);
        }
        dateTimeLayout.setVisibility(View.GONE);
        ratingsLayout.setVisibility(View.GONE);
        freeTextLayout.setVisibility(View.GONE);
        dropdownLayout.setVisibility(View.GONE);
        checkboxLayout.setVisibility(View.GONE);
        buttonsLayout.setVisibility(View.GONE);
        radiobuttonsLayout.setVisibility(View.GONE);
        numberpickerLayout.setVisibility(View.GONE);
        isInterestedLayout.setVisibility(View.GONE);
        freeNumberLayout.setVisibility(View.GONE);
        searchableDropDownLayout.setVisibility(View.GONE);
        multiSelectionDropDownLayout.setVisibility(View.GONE);
        uploadAttachmentLayout.setVisibility(View.GONE);
        callManagerLayout.setVisibility(View.GONE);
        setEndCallButtonLayoutVisibility();
    }

    private void checkForFollowUpDurationFromSettings() {
        if (ApplicationSettings.containsPref(AppConstants.FLP_DURATION)) {
            flpDuration = ApplicationSettings.getPref(AppConstants.FLP_DURATION, "");
            if (flpDuration != null && !flpDuration.isEmpty()) {
                flp_duration = Integer.parseInt(flpDuration);
                if(flp_duration > 1){
                    quesButtonSixtyTextView.setText(flpDuration + " Hrs");
                }
            }
        }
    }

    private void searchableDropdownLayout() {
        showTitleBasedOnType();
        searchableDropDownLayout.setVisibility(View.VISIBLE);
        if (rootQ.startsWith("<html>")) {
            searchableDropDownTextView.setVisibility(View.GONE);
            searchableDropDownWebView.setVisibility(View.VISIBLE);
            searchableDropDownWebView.loadData(rootQ, "text/html", "UTF-8");
        } else {
            searchableDropDownWebView.setVisibility(View.GONE);
            searchableDropDownTextView.setVisibility(View.VISIBLE);
            searchableDropDownTextView.setText(rootQ);
        }
        multiSelectionDropDownLayout.setVisibility(View.GONE);
        ratingsLayout.setVisibility(View.GONE);
        freeTextLayout.setVisibility(View.GONE);
        buttonsLayout.setVisibility(View.GONE);
        radiobuttonsLayout.setVisibility(View.GONE);
        numberpickerLayout.setVisibility(View.GONE);
        isInterestedLayout.setVisibility(View.GONE);
        dateTimeLayout.setVisibility(View.GONE);
        followupLayout.setVisibility(View.GONE);
        freeNumberLayout.setVisibility(View.GONE);
        dropdownLayout.setVisibility(View.GONE);
        checkboxLayout.setVisibility(View.GONE);
        uploadAttachmentLayout.setVisibility(View.GONE);
        callManagerLayout.setVisibility(View.GONE);
        setEndCallButtonLayoutVisibility();
        createSearchableSpinner(rootQ);
    }

    private void multiSelectionDropdownLayout() {
        showTitleBasedOnType();
        multiSelectionDropDownLayout.setVisibility(View.VISIBLE);
        if (rootQ.startsWith("<html>")) {
            multiSelectionDropDownTextView.setVisibility(View.GONE);
            multiSelectionDropDownWebView.setVisibility(View.VISIBLE);
            multiSelectionDropDownWebView.loadData(rootQ, "text/html", "UTF-8");
        } else {
            multiSelectionDropDownWebView.setVisibility(View.GONE);
            multiSelectionDropDownTextView.setVisibility(View.VISIBLE);
            multiSelectionDropDownTextView.setText(rootQ);
        }
        searchableDropDownLayout.setVisibility(View.GONE);
        ratingsLayout.setVisibility(View.GONE);
        freeTextLayout.setVisibility(View.GONE);
        buttonsLayout.setVisibility(View.GONE);
        radiobuttonsLayout.setVisibility(View.GONE);
        numberpickerLayout.setVisibility(View.GONE);
        isInterestedLayout.setVisibility(View.GONE);
        dateTimeLayout.setVisibility(View.GONE);
        followupLayout.setVisibility(View.GONE);
        freeNumberLayout.setVisibility(View.GONE);
        dropdownLayout.setVisibility(View.GONE);
        checkboxLayout.setVisibility(View.GONE);
        uploadAttachmentLayout.setVisibility(View.GONE);
        callManagerLayout.setVisibility(View.GONE);
        setEndCallButtonLayoutVisibility();
        createMultiSelectionSpinner(rootQ);
    }

    private void attachmentLayout() {
        showTitleBasedOnType();
        uploadAttachmentLayout.setVisibility(View.VISIBLE);
        if (rootQ.startsWith("<html>")) {
            uploadAttachmentTextView.setVisibility(View.GONE);
            uploadAttachmentWebView.setVisibility(View.VISIBLE);
            uploadAttachmentWebView.loadData(rootQ, "text/html", "UTF-8");
        } else {
            uploadAttachmentWebView.setVisibility(View.GONE);
            uploadAttachmentTextView.setVisibility(View.VISIBLE);
            uploadAttachmentTextView.setText(rootQ);
        }
        multiSelectionDropDownLayout.setVisibility(View.GONE);
        searchableDropDownLayout.setVisibility(View.GONE);
        ratingsLayout.setVisibility(View.GONE);
        freeTextLayout.setVisibility(View.GONE);
        buttonsLayout.setVisibility(View.GONE);
        radiobuttonsLayout.setVisibility(View.GONE);
        numberpickerLayout.setVisibility(View.GONE);
        isInterestedLayout.setVisibility(View.GONE);
        dateTimeLayout.setVisibility(View.GONE);
        followupLayout.setVisibility(View.GONE);
        freeNumberLayout.setVisibility(View.GONE);
        dropdownLayout.setVisibility(View.GONE);
        checkboxLayout.setVisibility(View.GONE);
        callManagerLayout.setVisibility(View.GONE);
        setEndCallButtonLayoutVisibility();
    }

    private void thankYouLayout() {
        SmarterSMBApplication.isCurrentQuesMandatory = false;
        isInterestedLayout.setVisibility(View.VISIBLE);
        isInterestedLayout.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
        String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
        if (questionsAct != null && !questionsAct.isEmpty()) {
            hideTitleTextViewAndWebView();
            LinearLayout.LayoutParams layoutparams = (LinearLayout.LayoutParams)isInterestedTextView.getLayoutParams();
            layoutparams.setMargins(20,20,20,20);
            isInterestedTextView.setLayoutParams(layoutparams);
            isInterestedTextView.setText("Thank you");
            if (customersListLayout != null) {
                customersListLayout.setVisibility(View.GONE);
            }
        } else {
            LinearLayout.LayoutParams layoutparams = (LinearLayout.LayoutParams)isInterestedTextView.getLayoutParams();
            layoutparams.setMargins(20,20,20,20);
            isInterestedTextView.setLayoutParams(layoutparams);
            isInterestedTextView.setText("Thank you for your survey");
            if (customersListLayout != null) {
                customersListLayout.setVisibility(View.GONE);
            }
        }
        isInterestedTextView.setTextSize(32);
        isInterestedTextView.setTypeface(null, Typeface.BOLD);
        dropdownLayout.setVisibility(View.GONE);
        checkboxLayout.setVisibility(View.GONE);
        ratingsLayout.setVisibility(View.GONE);
        formButtonLayout.setVisibility(View.GONE);
        isInterestedButtonsLayout.setVisibility(View.GONE);
        buttonsLayout.setVisibility(View.GONE);
        radiobuttonsLayout.setVisibility(View.GONE);
        numberpickerLayout.setVisibility(View.GONE);
        freeTextLayout.setVisibility(View.GONE);
        dateTimeLayout.setVisibility(View.GONE);
        followupLayout.setVisibility(View.GONE);
        freeNumberLayout.setVisibility(View.GONE);
        searchableDropDownLayout.setVisibility(View.GONE);
        multiSelectionDropDownLayout.setVisibility(View.GONE);
        uploadAttachmentLayout.setVisibility(View.GONE);
        callManagerLayout.setVisibility(View.GONE);
        customkvsLayout.setVisibility(View.GONE);
        setEndCallButtonLayoutVisibility();
    }

    private void initializeUi() {
        bank1Layout = findViewById(R.id.bank1_layout);
        oyoLayout = findViewById(R.id.oyo_layout);
        oyo_toolBar_layout = findViewById(R.id.oyoToolbarLayout);

        getCustomInfoLayout = findViewById(R.id.getCustomInfoLayout);

        radMessageLayout = findViewById(R.id.radMessageLayout);
        radMessageText = findViewById(R.id.radMessageText);
        radMessageText.setVerticalScrollBarEnabled(false);
        radMessageText.setHorizontalScrollBarEnabled(false);
        radMessageText.getSettings().setJavaScriptEnabled(true);
        radMessageText.getSettings().setBlockNetworkLoads(false);
        if (Build.VERSION.SDK_INT >= 19) {
            radMessageText.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
        }

        radMessageLayout.setVisibility(View.GONE);
        radMessageText.setVisibility(View.GONE);

        customkvsLayout = findViewById(R.id.customkvsLayout);
        customkvsText = findViewById(R.id.customkvsText);
        customkvsText.setVerticalScrollBarEnabled(false);
        customkvsText.setHorizontalScrollBarEnabled(false);
        customkvsText.getSettings().setJavaScriptEnabled(true);
        customkvsText.getSettings().setBlockNetworkLoads(false);
        if (Build.VERSION.SDK_INT >= 19) {
            customkvsText.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
        }

        customkvsLayout.setVisibility(View.GONE);
        customkvsText.setVisibility(View.GONE);

        connection_status = findViewById(R.id.connection_status);

        if (ApplicationSettings.containsPref(AppConstants.FK_CONTROL)) {
            boolean fkControl = ApplicationSettings.getPref(AppConstants.FK_CONTROL, false);
            if (fkControl) {
                connectingText1 = findViewById(R.id.connectingText1);
                connectingText2 = findViewById(R.id.connectingText2);
            } else if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
                boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
                if (ibControl) {
                    connectingText1 = findViewById(R.id.connectingText1);
                    connectingText2 = findViewById(R.id.connectingText2);
                }
            }
        } else if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
            boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
            if (ibControl) {
                connectingText1 = findViewById(R.id.connectingText1);
                connectingText2 = findViewById(R.id.connectingText2);
            }
        }

        lastUpdateFromCustomerTv = findViewById(R.id.lastUpdateFromCustomerTv);

        submitLayout = findViewById(R.id.submitLayout);
        updateMainLinearLayout = findViewById(R.id.updateMainLinearLayout);
        callbackMainLinearLayout = findViewById(R.id.callbackMainLinearLayout);
        rnrMainLinearLayout = findViewById(R.id.rnrMainLinearLayout);
        redialMainLinearLayout = findViewById(R.id.redialMainLinearLayout);

        followupError = findViewById(R.id.followup_error);

        if (oyo_toolBar_layout != null)
            oyo_toolBar_layout.setVisibility(View.GONE);
        if (oyoLayout != null)
            oyoLayout.setVisibility(View.GONE);
        if (bank1Layout != null)
            bank1Layout.setVisibility(View.VISIBLE);

        councelingLocation_spinner = findViewById(R.id.councelingLocation_spinner);

        notInterestedRemarks_edit_text = findViewById(R.id.notInterestedRemarks_edit_text);
        allianceSalesStage = findViewById(R.id.alliaceLayout);

        notInterestedRemarks_edit_text.setVisibility(View.GONE);
        allianceSalesStage.setVisibility(View.GONE);

        tv_name_or_number = findViewById(R.id.tv_name_or_number);
        applicationNumber_edit_text = findViewById(R.id.applicationNumber_edit_text);
        orText = findViewById(R.id.orText);
        questionnaire_orText = findViewById(R.id.questionnaire_orText);

        applicationNumber_Card = findViewById(R.id.applicationNumber_Card);
        applicationNumber_Card.setVisibility(View.GONE);
        councelingDateTimeCard = findViewById(R.id.councelingDateTimeCard);
        councelingDateTimeCard.setVisibility(View.GONE);
        notInterested_Card = findViewById(R.id.notInterested_Card);
        notInterested_Card.setVisibility(View.GONE);
        allianceInterestedLayout = findViewById(R.id.allianceInterestedLayout);

        councellingLocationLayout = findViewById(R.id.councellingLocationLayout);
        allianceInterestedLayout.setVisibility(View.GONE);
        councellingLocationLayout.setVisibility(View.GONE);
        appliedBtn = findViewById(R.id.appliedLayout);
        interestedBtn = findViewById(R.id.interestedLayout);
        notInterestedBtn = findViewById(R.id.notInterestedLayout);
        appliedBtn.setOnClickListener(this);
        interestedBtn.setOnClickListener(this);
        notInterestedBtn.setOnClickListener(this);
        councelingfollowup_date = findViewById(R.id.councelingfollowup_date);
        councelingfollowup_date.setOnClickListener(this);
        councelingfollowup_time = findViewById(R.id.councelingfollowup_time);
        councelingfollowup_time.setOnClickListener(this);

        uploadAttachmentTv = findViewById(R.id.uploadAttachment_tv);
        tv_attached_name = findViewById(R.id.tv_attached_name);
        ll_call_flow_upload_file = findViewById(R.id.ll_call_flow_upload_file);
        ll_call_flow_delete = findViewById(R.id.ll_call_flow_delete);
        ll_call_flow_delete.setOnClickListener(this);
        uploadAttachmentButton = findViewById(R.id.upload_attach_button);
        attachmentReadyButton = findViewById(R.id.attachment_ready_button);
        llAfterCall = findViewById(R.id.llAfterCall);
        pan_available_layout = findViewById(R.id.pan_available_layout);
        llCallAgain = findViewById(R.id.llCallAgain);
        questionnaire_llCallAgain = findViewById(R.id.questionnaire_llCallAgain);
        followup_layout = findViewById(R.id.followup_layout);
        flp_layout = findViewById(R.id.flp_layout);
        updateLayout = findViewById(R.id.update_view);
        callbacklayoutview = findViewById(R.id.callback_view);
        rnrLayout = findViewById(R.id.rnr_view);
        redialLayout = findViewById(R.id.redial_layout_view);
        layout5 = findViewById(R.id.layout5);
        formButtonLayout = findViewById(R.id.formButtonLayout);
        acpBottomLayout = findViewById(R.id.acp_bottom_layout);
        mmtAcpBottomLayout = findViewById(R.id.mmt_acp_bottom_layout);
        isInterestedButtonsLayout = findViewById(R.id.isInterestedButtonsLayout);
        endCallButtonLayout = findViewById(R.id.endCallButtonLayout);
        nameNumberRelativeLayout = findViewById(R.id.nameNumberRelativeLayout);
        checkboxTextView = (TextView) findViewById(R.id.checkboxTextView);
        checkboxWebView = (WebView) findViewById(R.id.checkboxWebView);
        uView = findViewById(R.id.u_view);
        cView = findViewById(R.id.c_view);
        rView = findViewById(R.id.r_view);
        redialView = findViewById(R.id.redial_view);

        submitButton = findViewById(R.id.submit_button);
        submitButton.setOnClickListener(this);
        submitButton.setText("SUBMIT");
        submitButton.setTextColor(getApplicationContext().getResources().getColor(R.color.white));
        submitButton.setBackgroundResource(R.drawable.green_rounded_corner);

        mmtSubmitButton = findViewById(R.id.mmt_submit_button);
        editName = findViewById(R.id.edit_name);
        tv_name_or_number.setEnabled(false);
        remarks = findViewById(R.id.remarks_edit_text);
        mmtInvalidButton = findViewById(R.id.mmt_invalid_button);
        mmtInvalidButton.setOnClickListener(this);
        mmtSubmitButton.setOnClickListener(this);
        attachmentReadyButton.setOnClickListener(this);
        uploadAttachmentButton.setOnClickListener(this);
        editName.setOnClickListener(this);
        updateLayout.setOnClickListener(this);
        callbacklayoutview.setOnClickListener(this);
        rnrLayout.setOnClickListener(this);
        redialLayout.setOnClickListener(this);
        yesButton = findViewById(R.id.yes_button);
        noButton = findViewById(R.id.no_button);
        yesButton.setOnClickListener(this);
        noButton.setOnClickListener(this);
        create_followup_card = findViewById(R.id.create_followup_card);
        remarksCard = findViewById(R.id.remarks_Card);
        rnrCard = findViewById(R.id.flp_overdue_card);
        redialCard = findViewById(R.id.redial_cardview);
        callBackCard = findViewById(R.id.callback_card);
        btnTen = findViewById(R.id.btn_ten);
        btnTen.setOnClickListener(this);
        btnThirty = findViewById(R.id.btn_thirty);
        btnThirty.setOnClickListener(this);
        btnSixty = findViewById(R.id.btn_sixty);
        btnSixty.setOnClickListener(this);
        questionnaire_btnTen = findViewById(R.id.questionnaire_btnTen);
        questionnaire_btnTen.setOnClickListener(this);
        questionnaire_btnThirty = findViewById(R.id.questionnaire_btn_thirty);
        questionnaire_btnThirty.setOnClickListener(this);
        questionnaire_btnSixty = findViewById(R.id.questionnaire_btn_sixty);
        questionnaire_btnSixty.setOnClickListener(this);
        questDate = findViewById(R.id.questionnaire_date);
        questDate.setOnClickListener(this);
        questTime = findViewById(R.id.questionnaire_time);
        questTime.setOnClickListener(this);
        followupDate = findViewById(R.id.followup_date);
        followupDate.setOnClickListener(this);
        followupTime = findViewById(R.id.followup_time);
        followupTime.setOnClickListener(this);
        mCustomDate = findViewById(R.id.tv_custom_date);
        assert mCustomDate != null;
        mCustomDate.setOnClickListener(this);
        mCustomTime = findViewById(R.id.tv_custom_time);
        mCustomTime.setOnClickListener(this);
        dateView = findViewById(R.id.dateView);
        timeView = findViewById(R.id.timeView);
        quesButtonTenTextView = findViewById(R.id.questionnaire_btnTenText);
        quesButtonThirtyTextView = findViewById(R.id.questionnaire_btnThirtyText);
        quesButtonSixtyTextView = findViewById(R.id.questionnaire_btnSixtyText);
        pan_available_layout.setVisibility(View.GONE);
        callEndDuration = ApplicationSettings.getPref(AppConstants.CALL_END_DURATION, "");

        remarks.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean b) {
                if (b) {
                    remarks.getBackground().setColorFilter(getResources().getColor(R.color.selected_item_color), PorterDuff.Mode.SRC_ATOP);
                } else {
                    remarks.getBackground().setColorFilter(getResources().getColor(R.color.smb_grey_54), PorterDuff.Mode.SRC_ATOP);
                }
                if (!b) {
                    hideKeyboard(view);
                }
            }
        });

        final ScrollView uearnScrollView = findViewById(R.id.uearn_scrollView);

        remarks.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                uearnScrollView.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        View lastChild = uearnScrollView.getChildAt(uearnScrollView.getChildCount() - 1);
                        int bottom = lastChild.getBottom() + uearnScrollView.getPaddingBottom();
                        int sy = uearnScrollView.getScrollY();
                        int sh = uearnScrollView.getHeight();
                        int delta = bottom - (sy + sh);
                        uearnScrollView.smoothScrollBy(0, delta);
                    }
                }, 200);
                return false;
            }
        });

        ratingsLayout = findViewById(R.id.ratingsLayout);
        freeTextLayout = findViewById(R.id.freeTextLayout);
        dropdownLayout = findViewById(R.id.dropDownLayout);
        checkboxLayout = (LinearLayout) findViewById(R.id.checkboxLayout);
        buttonsLayout = findViewById(R.id.buttonsLayout);
        radiobuttonsLayout = findViewById(R.id.radiobuttonsLayout);
        numberpickerLayout = findViewById(R.id.numberpickerLayout);
        isInterestedLayout = findViewById(R.id.isInterestedLayout);
        dateTimeLayout = findViewById(R.id.dateTimeLayout);
        followupLayout = findViewById(R.id.followupLayout);
        freeNumberLayout = findViewById(R.id.freeNumberLayout);
        searchableDropDownLayout = findViewById(R.id.searchableDropDownLayout);
        multiSelectionDropDownLayout = findViewById(R.id.multiSelectionDropDownLayout);
        uploadAttachmentLayout = findViewById(R.id.uploadAttachmentLayout);
        questionnaireDateTimeLayout = findViewById(R.id.questionnaireDateTimeLayout);
        followupDateTimeLayout = findViewById(R.id.followupDateTimeLayout);
        freeTextEditTextLayout = findViewById(R.id.freeTextEditTextLayout);
        callManagerLayout = findViewById(R.id.callManagerLayout);

        nextButton = findViewById(R.id.nextButton);
        nextButton.setOnClickListener(this);
        nextButton.setText("NEXT");
        nextButton.setTextColor(getApplicationContext().getResources().getColor(R.color.white));
        nextButton.setBackgroundResource(R.drawable.green_rounded_corner);

        previousButton = findViewById(R.id.previousButton);
        previousButton.setOnClickListener(this);
        previousButton.setText("PREVIOUS");
        previousButton.setTextColor(getApplicationContext().getResources().getColor(R.color.white));
        previousButton.setBackgroundResource(R.drawable.green_rounded_corner);

        endCallButton = findViewById(R.id.endCallButton);
        endCallButton.setOnClickListener(this);
        muteCallButton = findViewById(R.id.muteCallButton);
        muteCallButton.setOnClickListener(this);
        launchAppButton = findViewById(R.id.launchAppButton);
        launchAppButton.setOnClickListener(this);
        transferCallButton = findViewById(R.id.transferCallButton);
        transferCallButton.setOnClickListener(this);
        conferenceCallButton = findViewById(R.id.conferenceCallButton);
        conferenceCallButton.setOnClickListener(this);
        ratingsView = findViewById(R.id.ratingsBar);
        customerRatings = findViewById(R.id.title_normal);

        et_sm_number = findViewById(R.id.et_sm_number);
        sm_call_button = findViewById(R.id.sm_call_button);
        sm_call_button.setOnClickListener(this);

        ratingsTextView = findViewById(R.id.ratingsTextView);

        ratingsWebView = findViewById(R.id.ratingsWebView);
        ratingsWebView.getSettings().setJavaScriptEnabled(true);
        ratingsWebView.getSettings().setBlockNetworkLoads(false);
        if (Build.VERSION.SDK_INT >= 19) {
            ratingsWebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
        }

        freeTextTextView = findViewById(R.id.freeTextTextView);

        freeTextWebView = findViewById(R.id.freeTextWebView);
        freeTextWebView.getSettings().setJavaScriptEnabled(true);
        freeTextWebView.getSettings().setBlockNetworkLoads(false);
        if (Build.VERSION.SDK_INT >= 19) {
            freeTextWebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
        }

        dropDownTextView = findViewById(R.id.dropDownTextView);

        dropDownWebView = findViewById(R.id.dropDownWebView);
        dropDownWebView.getSettings().setJavaScriptEnabled(true);
        dropDownWebView.getSettings().setBlockNetworkLoads(false);
        if (Build.VERSION.SDK_INT >= 19) {
            dropDownWebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
        }

        buttonsTextView = findViewById(R.id.buttonsTextView);

        buttonsWebView = findViewById(R.id.buttonsWebView);
        buttonsWebView.getSettings().setJavaScriptEnabled(true);
        buttonsWebView.getSettings().setBlockNetworkLoads(false);
        if (Build.VERSION.SDK_INT >= 19) {
            buttonsWebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
        }

        radiobuttonsTextView = findViewById(R.id.radiobuttonsTextView);

        radiobuttonsWebView = findViewById(R.id.radiobuttonsWebView);
        radiobuttonsWebView.getSettings().setJavaScriptEnabled(true);
        radiobuttonsWebView.getSettings().setBlockNetworkLoads(false);
        if (Build.VERSION.SDK_INT >= 19) {
            radiobuttonsWebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
        }

        numberpickerTextView = findViewById(R.id.numberpickerTextView);

        numberpickerWebView = findViewById(R.id.numberpickerWebView);
        numberpickerWebView.getSettings().setJavaScriptEnabled(true);
        numberpickerWebView.getSettings().setBlockNetworkLoads(false);
        if (Build.VERSION.SDK_INT >= 19) {
            numberpickerWebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
        }

        isInterestedTextView = findViewById(R.id.isInterestedTextView);

        isInterestedWebView = findViewById(R.id.isInterestedWebView);
        isInterestedWebView.getSettings().setJavaScriptEnabled(true);
        isInterestedWebView.getSettings().setBlockNetworkLoads(false);
        if (Build.VERSION.SDK_INT >= 19) {
            isInterestedWebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
        }


        titleTextView = findViewById(R.id.titleTextView);

        titleWebView = findViewById(R.id.titleWebView);
        titleWebView.getSettings().setJavaScriptEnabled(true);
        titleWebView.getSettings().setBlockNetworkLoads(false);
        if (Build.VERSION.SDK_INT >= 19) {
            titleWebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
        }

        dateTimeTextView = findViewById(R.id.dateTimeTextView);

        dateTimeWebView = findViewById(R.id.dateTimeWebView);
        dateTimeWebView.getSettings().setJavaScriptEnabled(true);
        dateTimeWebView.getSettings().setBlockNetworkLoads(false);
        if (Build.VERSION.SDK_INT >= 19) {
            dateTimeWebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
        }

        followupTextView = findViewById(R.id.followupTextView);

        followupWebView = findViewById(R.id.followupWebView);
        followupWebView.getSettings().setJavaScriptEnabled(true);
        followupWebView.getSettings().setBlockNetworkLoads(false);
        if (Build.VERSION.SDK_INT >= 19) {
            followupWebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
        }

        freeNumberTextView = findViewById(R.id.freeNumberTextView);

        freeNumberWebView = findViewById(R.id.freeNumberWebView);
        freeNumberWebView.getSettings().setJavaScriptEnabled(true);
        freeNumberWebView.getSettings().setBlockNetworkLoads(false);
        if (Build.VERSION.SDK_INT >= 19) {
            freeNumberWebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
        }

        searchableDropDownTextView = findViewById(R.id.searchableDropDownTextView);

        searchableDropDownWebView = findViewById(R.id.searchableDropDownWebView);
        searchableDropDownWebView.getSettings().setJavaScriptEnabled(true);
        searchableDropDownWebView.getSettings().setBlockNetworkLoads(false);
        if (Build.VERSION.SDK_INT >= 19) {
            searchableDropDownWebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
        }

        multiSelectionDropDownTextView = findViewById(R.id.multiSelectionDropDownTextView);

        multiSelectionDropDownWebView = findViewById(R.id.multiSelectionDropDownWebView);
        multiSelectionDropDownWebView.getSettings().setJavaScriptEnabled(true);
        multiSelectionDropDownWebView.getSettings().setBlockNetworkLoads(false);
        if (Build.VERSION.SDK_INT >= 19) {
            multiSelectionDropDownWebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
        }

        uploadAttachmentTextView = findViewById(R.id.uploadAttachmentTextView);

        uploadAttachmentWebView = findViewById(R.id.uploadAttachmentWebView);
        uploadAttachmentWebView.getSettings().setJavaScriptEnabled(true);
        uploadAttachmentWebView.getSettings().setBlockNetworkLoads(false);
        if (Build.VERSION.SDK_INT >= 19) {
            uploadAttachmentWebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
        }

        etCustomerExperience = findViewById(R.id.etCustomerExperience);
        customerExperience = findViewById(R.id.customerExperience);
        customersListLayout = (RelativeLayout) findViewById(R.id.customersListLayout);
        statusGetInfoRelativeLayout = (RelativeLayout) findViewById(R.id.statusGetInfoRelativeLayout);
        getInfo = (TextView) findViewById(R.id.getInfo);

        if (ApplicationSettings.containsPref(AppConstants.FK_CONTROL)) {
            boolean fkControl = ApplicationSettings.getPref(AppConstants.FK_CONTROL, false);
            if (fkControl) {

            } else if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
                boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
                if (ibControl) {
                    if (SmarterSMBApplication.outgoingCallNotInStartMode) {
                        getInfo.setOnClickListener(this);
                        getInfo.setVisibility(View.VISIBLE);
                    } else {
                        getInfo.setVisibility(View.GONE);
                    }
                } else {
                    getInfo.setOnClickListener(this);
                }
            } else {
                getInfo.setOnClickListener(this);
            }
        } else if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
            boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
            if (ibControl) {
                if (SmarterSMBApplication.outgoingCallNotInStartMode) {
                    getInfo.setOnClickListener(this);
                    getInfo.setVisibility(View.VISIBLE);
                }
            } else {
                getInfo.setOnClickListener(this);
            }
        } else {
            getInfo.setOnClickListener(this);
        }

        connectionStatus = (TextView) findViewById(R.id.connection_status);

        customerExperience.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void afterTextChanged(Editable editable) {
                if (etCustomerExperience.isErrorEnabled()) {
                    etCustomerExperience.setError(null);
                }
            }
        });

        et_number = findViewById(R.id.et_number);
        et_number.setSelection(et_number.getText().length());

        etFreeNumber = findViewById(R.id.etFreeNumber);
        freeNumber = findViewById(R.id.freeNumber);
        freeNumber.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void afterTextChanged(Editable editable) {
                if (etFreeNumber.isErrorEnabled()) {
                    etFreeNumber.setError(null);
                }
            }
        });

        customerExperience.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean b) {
                if (b) {
                    customerExperience.getBackground().setColorFilter(getResources().getColor(R.color.selected_item_color), PorterDuff.Mode.SRC_ATOP);
                } else {
                    customerExperience.getBackground().setColorFilter(getResources().getColor(R.color.smb_grey_54), PorterDuff.Mode.SRC_ATOP);
                }
                if (!b) {
                    hideKeyboard(view);
                }
            }
        });

        freeNumber.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean b) {
                if (b) {
                    freeNumber.getBackground().setColorFilter(getResources().getColor(R.color.selected_item_color), PorterDuff.Mode.SRC_ATOP);
                } else {
                    freeNumber.getBackground().setColorFilter(getResources().getColor(R.color.smb_grey_54), PorterDuff.Mode.SRC_ATOP);
                }
                if (!b) {
                    hideKeyboard(view);
                }
            }
        });

        customerExperience.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                uearnScrollView.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        View lastChild = uearnScrollView.getChildAt(uearnScrollView.getChildCount() - 1);
                        int bottom = lastChild.getBottom() + uearnScrollView.getPaddingBottom();
                        int sy = uearnScrollView.getScrollY();
                        int sh = uearnScrollView.getHeight();
                        int delta = bottom - (sy + sh);
                        uearnScrollView.smoothScrollBy(0, delta);
                    }
                }, 200);
                return false;
            }
        });

        freeNumber.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                uearnScrollView.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        View lastChild = uearnScrollView.getChildAt(uearnScrollView.getChildCount() - 1);
                        int bottom = lastChild.getBottom() + uearnScrollView.getPaddingBottom();
                        int sy = uearnScrollView.getScrollY();
                        int sh = uearnScrollView.getHeight();
                        int delta = bottom - (sy + sh);
                        uearnScrollView.smoothScrollBy(0, delta);
                    }
                }, 200);
                return false;
            }
        });

        mRecyclerView = findViewById(R.id.my_recycler_view);

        String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
        if (questionsAct != null && !questionsAct.isEmpty()) {
            submitButton.setText("SUBMIT");
        } else {
            submitButton.setText("SUBMIT");
        }

        if (questionsAct != null) {
            rnrCard.setVisibility(View.VISIBLE);
            callBackCard.setVisibility(View.VISIBLE);
            flp_layout.setWeightSum(4);
        } else {
            rnrCard.setVisibility(View.VISIBLE);
            flp_layout.setWeightSum(4);
        }

        connectedCustomerState = "ACP";
        SmarterSMBApplication.currentAppState = "ACP";
        boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
        if (sequencialEndpoint) {
            customersListLayout = findViewById(R.id.customersListLayout);
        }

        if (questionsAct != null && !questionsAct.isEmpty() && (questionsAct.equals("GFIT"))) {

        }

        if (sequencialEndpoint) {

        } else {
            customersInfoLayout = findViewById(R.id.customersInfoLayout);
            card_view = findViewById(R.id.card_view);
            DisplayMetrics displayMetrics = new DisplayMetrics();
            getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
            int height = 300;
            RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) card_view.getLayoutParams();
            layoutParams.height = height;
            card_view.setLayoutParams(layoutParams);
            titleLayout = findViewById(R.id.titleLayout);
            titleLayout.setVisibility(View.GONE);
            customername = findViewById(R.id.customername);
            customernumber = findViewById(R.id.customernumber);
            companyname = findViewById(R.id.companyname);
            leadsource = findViewById(R.id.leadsource);
            salesstage = findViewById(R.id.salesstage);
            salesstage1 = findViewById(R.id.salesstage1);
            address = findViewById(R.id.address);
            notes = findViewById(R.id.notes);
            showMore = findViewById(R.id.showMore);
            isShowMore = false;
            showMore.setOnClickListener(this);
            setHeaderTitle();
        }

        String fieldsToShow = ApplicationSettings.getPref(AppConstants.FIELDS_TO_SHOW, "");
        if (fieldsToShow != null && !fieldsToShow.isEmpty()) {
            try {
                JSONObject jsonobject = new JSONObject(fieldsToShow);
                if (jsonobject.has("UearnActivity")) {
                    String value = jsonobject.getString("UearnActivity");
                    List<String> items = Arrays.asList(value.split("\\s*,\\s*"));
                    if (items != null && items.size() > 0) {
                        for (int i = 0; i < items.size(); i++) {
                            String viewName = items.get(i);
                            viewName = viewName.replaceAll("[^A-Za-z0-9]", "");
                            int resID = getResources().getIdentifier(viewName, "id", getPackageName());

                            if (resID == R.id.customername) {
                                customername.setVisibility(View.GONE);
                            } else if (resID == R.id.customernumber) {
                                customernumber.setVisibility(View.GONE);
                            } else if (resID == R.id.companyname) {
                                if (companyname != null) {
                                    companyname.setVisibility(View.GONE);
                                }
                            } else if (resID == R.id.leadsource) {
                                leadsource.setVisibility(View.GONE);
                            } else if (resID == R.id.salesstage) {
                                salesstage.setVisibility(View.GONE);
                            } else if (resID == R.id.salesstage1) {//                                  salesstage1.setVisibility(View.GONE);
                            } else if (resID == R.id.address) {
                                address.setVisibility(View.GONE);
                            } else if (resID == R.id.notes) {
                                notes.setVisibility(View.GONE);
                            }
                        }
                    }
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }

        ratingsCustomerDetailsName = findViewById(R.id.ratingsCustomerDetailsName);
        ratingsCustomerDetailsStatus = findViewById(R.id.ratingsCustomerDetailsStatus);
        ratingsCustomerDetailsSubstatus1 = findViewById(R.id.ratingsCustomerDetailsSubstatus1);
        ratingsCustomerDetailsSubstatus2 = findViewById(R.id.ratingsCustomerDetailsSubstatus2);
        ratingsCustomerDetailsNotes = findViewById(R.id.ratingsCustomerDetailsNotes);
        freeNumberCustomerDetailsName = findViewById(R.id.freeNumberCustomerDetailsName);
        freeNumberCustomerDetailsStatus = findViewById(R.id.freeNumberCustomerDetailsStatus);
        freeNumberCustomerDetailsSubstatus1 = findViewById(R.id.freeNumberCustomerDetailsSubstatus1);
        freeNumberCustomerDetailsSubstatus2 = findViewById(R.id.freeNumberCustomerDetailsSubstatus2);
        freeNumberCustomerDetailsNotes = findViewById(R.id.freeNumberCustomerDetailsNotes);

        freeTextCustomerDetailsName = findViewById(R.id.freeTextCustomerDetailsName);
        freeTextCustomerDetailsStatus = findViewById(R.id.freeTextCustomerDetailsStatus);
        freeTextCustomerDetailsSubstatus1 = findViewById(R.id.freeTextCustomerDetailsSubstatus1);
        freeTextCustomerDetailsSubstatus2 = findViewById(R.id.freeTextCustomerDetailsSubstatus2);
        freeTextCustomerDetailsNotes = findViewById(R.id.freeTextCustomerDetailsNotes);

        searchableDropdownCustomerDetailsName = findViewById(R.id.searchableDropdownCustomerDetailsName);
        searchableDropdownCustomerDetailsStatus = findViewById(R.id.searchableDropdownCustomerDetailsStatus);
        searchableDropdownCustomerDetailsSubstatus1 = findViewById(R.id.searchableDropdownCustomerDetailsSubstatus1);
        searchableDropdownCustomerDetailsSubstatus2 = findViewById(R.id.searchableDropdownCustomerDetailsSubstatus2);
        searchableDropdownCustomerDetailsNotes = findViewById(R.id.searchableDropdownCustomerDetailsNotes);

        multiSelectionDropdownCustomerDetailsName = findViewById(R.id.multiSelectionDropdownCustomerDetailsName);
        multiSelectionDropdownCustomerDetailsStatus = findViewById(R.id.multiSelectionDropdownCustomerDetailsStatus);
        multiSelectionDropdownCustomerDetailsSubstatus1 = findViewById(R.id.multiSelectionDropdownCustomerDetailsSubstatus1);
        multiSelectionDropdownCustomerDetailsSubstatus2 = findViewById(R.id.multiSelectionDropdownCustomerDetailsSubstatus2);
        multiSelectionDropdownCustomerDetailsNotes = findViewById(R.id.multiSelectionDropdownCustomerDetailsNotes);

        dropdownCustomerDetailsName = findViewById(R.id.dropdownCustomerDetailsName);
        dropdownCustomerDetailsStatus = findViewById(R.id.dropdownCustomerDetailsStatus);
        dropdownCustomerDetailsSubstatus1 = findViewById(R.id.dropdownCustomerDetailsSubstatus1);
        dropdownCustomerDetailsSubstatus2 = findViewById(R.id.dropdownCustomerDetailsSubstatus2);
        dropdownCustomerDetailsNotes = findViewById(R.id.dropdownCustomerDetailsNotes);

        buttonsCustomerDetailsName = findViewById(R.id.buttonsCustomerDetailsName);
        buttonsCustomerDetailsStatus = findViewById(R.id.buttonsCustomerDetailsStatus);
        buttonsCustomerDetailsSubstatus1 = findViewById(R.id.buttonsCustomerDetailsSubstatus1);
        buttonsCustomerDetailsSubstatus2 = findViewById(R.id.buttonsCustomerDetailsSubstatus2);
        buttonsCustomerDetailsNotes = findViewById(R.id.buttonsCustomerDetailsNotes);
        isInterestedCustomerDetailsName = findViewById(R.id.isInterestedCustomerDetailsName);
        isInterestedCustomerDetailsStatus = findViewById(R.id.isInterestedCustomerDetailsStatus);
        isInterestedCustomerDetailsSubstatus1 = findViewById(R.id.isInterestedCustomerDetailsSubstatus1);
        isInterestedCustomerDetailsSubstatus2 = findViewById(R.id.isInterestedCustomerDetailsSubstatus2);
        isInterestedCustomerDetailsNotes = findViewById(R.id.isInterestedCustomerDetailsNotes);
        dateTimeCustomerDetailsName = findViewById(R.id.dateTimeCustomerDetailsName);
        dateTimeCustomerDetailsStatus = findViewById(R.id.dateTimeCustomerDetailsStatus);
        dateTimeCustomerDetailsSubstatus1 = findViewById(R.id.dateTimeCustomerDetailsSubstatus1);
        dateTimeCustomerDetailsSubstatus2 = findViewById(R.id.dateTimeCustomerDetailsSubstatus2);
        dateTimeCustomerDetailsNotes = findViewById(R.id.dateTimeCustomerDetailsNotes);
        uploadAttachmentCustomerDetailsName = findViewById(R.id.uploadAttachmentCustomerDetailsName);
        uploadAttachmentCustomerDetailsStatus = findViewById(R.id.uploadAttachmentCustomerDetailsStatus);
        uploadAttachmentCustomerDetailsSubstatus1 = findViewById(R.id.uploadAttachmentCustomerDetailsSubstatus1);
        uploadAttachmentCustomerDetailsSubstatus2 = findViewById(R.id.uploadAttachmentCustomerDetailsSubstatus2);
        uploadAttachmentCustomerDetailsNotes = findViewById(R.id.uploadAttachmentCustomerDetailsNotes);
        followupCustomerDetailsName = findViewById(R.id.followupCustomerDetailsName);
        followupCustomerDetailsStatus = findViewById(R.id.followupCustomerDetailsStatus);
        followupCustomerDetailsSubstatus1 = findViewById(R.id.followupCustomerDetailsSubstatus1);
        followupCustomerDetailsSubstatus2 = findViewById(R.id.followupCustomerDetailsSubstatus2);
        followupCustomerDetailsNotes = findViewById(R.id.followupCustomerDetailsNotes);

        if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
            boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
            if (ibControl) {
                if (SmarterSMBApplication.matchingInNumberNotInStartMode || SmarterSMBApplication.stayAtHomeScenario) {
                    ServiceHandler.callDisconnected = true;
                    showACPScreen();
                } else if (SmarterSMBApplication.autoCallAnswered) {
                    if (SmarterSMBApplication.currentStateIsStartMode) {

                    } else {
                        if (ApplicationSettings.containsPref(AppConstants.CONNECTED_TEXT)) {
                            String connectedTextStr = ApplicationSettings.getPref(AppConstants.CONNECTED_TEXT, "");
                            if (connectedTextStr != null && !connectedTextStr.isEmpty() && !connectedTextStr.equals("null")) {
                                String[] connectedTextStrArr = connectedTextStr.split("\\|");
                                connection_status.setText(connectedTextStrArr[0].toString());
                                connectingText1.setText(connectedTextStrArr[1].toString());
                                connectingText2.setText(connectedTextStrArr[2].toString());
                                endCallButtonLayout.setVisibility(View.VISIBLE);
                                muteCallButton.setVisibility(View.VISIBLE);
                                launchAppButton.setVisibility(View.VISIBLE);
                                getInfo.setVisibility(View.GONE);
                            }
                        }

                        String qanda = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");
                        if (qanda != null && !qanda.isEmpty() && !qanda.equals("null")) {
                            layout5.setVisibility(View.VISIBLE);
                            submitLayout.setVisibility(View.GONE);
                            nextButton.setVisibility(View.VISIBLE);
                            previousButton.setVisibility(View.VISIBLE);
                            enableCallOptions();
                            SmarterSMBApplication.currentAppState = "Connected";
                            SmarterSMBApplication.agentIsInConnectingState = false;
                            //Log.d("PredictiveTesting", "showQuestionnaireForInboundCall() Outside");
                            showQuestionnaireForInboundCall();
                        } else {
                            layout5.setVisibility(View.GONE);
                            submitLayout.setVisibility(View.GONE);
                            nextButton.setVisibility(View.GONE);
                            previousButton.setVisibility(View.GONE);
                            disableCallOptions();
                            nameNumberRelativeLayout.setVisibility(View.GONE);
                            flp_layout.setVisibility(View.GONE);
                            acpBottomLayout.setVisibility(View.GONE);
                        }

                        if (!ServiceHandler.callDisconnected) {
                            if (NotificationData.customKVS != null && !NotificationData.customKVS.isEmpty() && !NotificationData.customKVS.equals("null")) {
                                if (customkvsText != null) {
                                    customkvsText.loadDataWithBaseURL(null, NotificationData.customKVS, "text/html", "utf-8", null);
                                    customkvsLayout.setVisibility(View.VISIBLE);
                                    customkvsText.setVisibility(View.VISIBLE);
                                }
                            }
                        }
                    }
                } else {
                    if (ApplicationSettings.containsPref(AppConstants.CONNECTING_TEXT)) {
                        String connectingTextStr = ApplicationSettings.getPref(AppConstants.CONNECTING_TEXT, "");
                        if (connectingTextStr != null && !connectingTextStr.isEmpty() && !connectingTextStr.equals("null")) {
                            String[] connectingTextStrArr = connectingTextStr.split("\\|");
                            connection_status.setText(connectingTextStrArr[0].toString());
                            connectingText1.setText(connectingTextStrArr[1].toString());
                            connectingText2.setText(connectingTextStrArr[2].toString());
                            endCallButtonLayout.setVisibility(View.VISIBLE);
                            muteCallButton.setVisibility(View.GONE);
                            launchAppButton.setVisibility(View.VISIBLE);

                            if (SmarterSMBApplication.outgoingCallNotInStartMode) {
                                getInfo.setVisibility(View.VISIBLE);
                            } else {
                                getInfo.setVisibility(View.GONE);
                            }

                            SmarterSMBApplication.callStateIsDisconnected = false;
                            ServiceHandler.callDisconnected = false;
                        }
                    }
                    layout5.setVisibility(View.GONE);
                    submitLayout.setVisibility(View.GONE);
                    nextButton.setVisibility(View.GONE);
                    previousButton.setVisibility(View.GONE);
                    disableCallOptions();
                    nameNumberRelativeLayout.setVisibility(View.GONE);
                    flp_layout.setVisibility(View.GONE);
                    acpBottomLayout.setVisibility(View.GONE);
                    SmarterSMBApplication.currentAppState = "Connecting";
                }
            }
        }

        if (ApplicationSettings.containsPref(AppConstants.FK_CONTROL)) {
            boolean fkControl = ApplicationSettings.getPref(AppConstants.FK_CONTROL, false);
            if (fkControl) {
                //Log.d("FKDemoTest", "UearnActivity - mMessageReceiver - onReceive() initializeui called");
                if (SmarterSMBApplication.autoCallAnswered) {
                    //Log.d("FKDemoTest", "UearnActivity - mMessageReceiver - onReceive() initializeui called 1");
                    if (ApplicationSettings.containsPref(AppConstants.CONNECTED_TEXT)) {
                        String connectedTextStr = ApplicationSettings.getPref(AppConstants.CONNECTED_TEXT, "");
                        if (connectedTextStr != null && !connectedTextStr.isEmpty() && !connectedTextStr.equals("null")) {
                            String[] connectedTextStrArr = connectedTextStr.split("\\|");
                            connection_status.setText(connectedTextStrArr[0].toString());
                            connectingText1.setText(connectedTextStrArr[1].toString());
                            connectingText2.setText(connectedTextStrArr[2].toString());
                            endCallButtonLayout.setVisibility(View.VISIBLE);
                            muteCallButton.setVisibility(View.VISIBLE);
                            launchAppButton.setVisibility(View.VISIBLE);
                            getInfo.setVisibility(View.VISIBLE);

                            layout5.setVisibility(View.GONE);
                            submitLayout.setVisibility(View.GONE);
                            nextButton.setVisibility(View.GONE);
                            previousButton.setVisibility(View.GONE);
                            disableCallOptions();
                            nameNumberRelativeLayout.setVisibility(View.GONE);
                            flp_layout.setVisibility(View.GONE);
                            acpBottomLayout.setVisibility(View.GONE);
                        }

                        if (!ServiceHandler.callDisconnected) {
                            if (NotificationData.customKVS != null && !NotificationData.customKVS.isEmpty() && !NotificationData.customKVS.equals("null")) {
                                if (customkvsText != null) {
                                    customkvsText.loadDataWithBaseURL(null, NotificationData.customKVS, "text/html", "utf-8", null);
                                    customkvsLayout.setVisibility(View.VISIBLE);
                                    customkvsText.setVisibility(View.VISIBLE);
                                }
                            }
                        }
                    }
                    SmarterSMBApplication.currentModeIsConnected = true;
                } else {
                    //Log.d("FKDemoTest", "UearnActivity - mMessageReceiver - onReceive() initializeui called 2");
                    if (ApplicationSettings.containsPref(AppConstants.CONNECTING_TEXT)) {
                        String connectingTextStr = ApplicationSettings.getPref(AppConstants.CONNECTING_TEXT, "");
                        if (connectingTextStr != null && !connectingTextStr.isEmpty() && !connectingTextStr.equals("null")) {
                            String[] connectingTextStrArr = connectingTextStr.split("\\|");
                            connection_status.setText(connectingTextStrArr[0].toString());
                            connectingText1.setText(connectingTextStrArr[1].toString());
                            connectingText2.setText(connectingTextStrArr[2].toString());
                            endCallButtonLayout.setVisibility(View.VISIBLE);
                            muteCallButton.setVisibility(View.GONE);
                            launchAppButton.setVisibility(View.VISIBLE);
                            getInfo.setVisibility(View.GONE);

                            layout5.setVisibility(View.GONE);
                            submitLayout.setVisibility(View.GONE);
                            nextButton.setVisibility(View.GONE);
                            previousButton.setVisibility(View.GONE);
                            disableCallOptions();
                            nameNumberRelativeLayout.setVisibility(View.GONE);
                            flp_layout.setVisibility(View.GONE);
                            acpBottomLayout.setVisibility(View.GONE);

                            SmarterSMBApplication.callStateIsDisconnected = false;
                        }
                    }
                }
            }
        }
    }

    public void hideKeyboard(View view) {
        InputMethodManager inputMethodManager = (InputMethodManager) getSystemService(Activity.INPUT_METHOD_SERVICE);
        inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), 0);
    }

    private void setSpinners() {
        followupError = findViewById(R.id.followup_error);
        questionnaire_followupError = findViewById(R.id.questionnaire_followup_error);
        counselingAdapter = ArrayAdapter.createFromResource(this, R.array.counseling_location_spinner_array, android.R.layout.simple_spinner_item);
        counselingAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        councelingLocation_spinner.setAdapter(counselingAdapter);
        councelingLocation_spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                String selectedItem = councelingLocation_spinner.getSelectedItem().toString();
                if (selectedItem != null && !selectedItem.isEmpty() && !selectedItem.equals("Choose an option")) {
                    allianceSubStatus = selectedItem;
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {
                numberOfNights = "1";
            }
        });
    }

    private void setHeaderTitle() {

        boolean gpsSettings = ApplicationSettings.getPref(AppConstants.GPS_SETTINGS, false);
        if (gpsSettings) {
            getLatLong();
        }
        if (NotificationData.notificationData) {
            if (NotificationData.isWorkOrder) {
                if (NotificationData.statusString != null) {
                    statusString = NotificationData.statusString;
                }
            }

            if (NotificationData.notes_string != null) {
                notesString = NotificationData.notes_string;
                if (notesString != null && !notesString.isEmpty() && !notesString.equals("null"))
                    remarks.setText(notesString);
                if (NotificationData.notes_string.equalsIgnoreCase("null")) {
                    ApplicationSettings.putPref(AFTER_CALL_NOTES, "");
                } else {
                    ApplicationSettings.putPref(AFTER_CALL_NOTES, NotificationData.notes_string);
                }
            }

            if (NotificationData.appointment_db_id != 0) {
                reminderdbId = NotificationData.appointment_db_id;
                boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
                if (sequencialEndpoint) {
                    getDetailsFromDbSequencial(String.valueOf(reminderdbId));
                } else {
                    getDetailsFromDb(String.valueOf(reminderdbId));
                }
            }

            if (NotificationData.statusString != null && !NotificationData.statusString.isEmpty()) {
                statusString = NotificationData.statusString;
            }

            if (NotificationData.substatus1 != null && !NotificationData.substatus1.isEmpty()) {
                subStatus1 = NotificationData.substatus1;
            }

            if (NotificationData.uuid != null) {
                uuid = NotificationData.uuid;
            }
        }

        if (statusString != null && !(statusString.isEmpty())) {
            status = statusString;
            NotificationData.statusString = statusString;
        } else {
            if (radStarted) {
                statusString = "NEW DATA";
                status = statusString;
                NotificationData.statusString = statusString;
            }
        }

        if (radStarted) {
            if (customerNumber == null || customerNumber.isEmpty()) {
                if ((NotificationData.dialledCustomerNumber != null) && (!NotificationData.dialledCustomerNumber.isEmpty())) {
                    customerNumber = NotificationData.dialledCustomerNumber;
                }
            }
        }

        boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
        if (sequencialEndpoint) {
            getDetailsFromDbSequencial();
        } else {
            getDetailsFromDb();
        }

        setLayoutHeader();
        dialledNumber = customerNumber;
        ApplicationSettings.putPref(AFTER_CALL_PHONE, customerNumber);

        if (customerNumber != null && !(customerNumber.isEmpty())) {
            nextAppointment_dbId = getNextAppointmentData(customerNumber);

            if (radStarted) {
                if (reminderdbId == 0) {
                    reminderdbId = nextAppointment_dbId; // RAM FIX
                    sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
                    if (sequencialEndpoint) {
                        getDetailsFromDbSequencial(String.valueOf(reminderdbId));
                    } else {
                        getDetailsFromDb(String.valueOf(reminderdbId));
                    }
                }
            }
        }

        String leadSource = "";
        String remarks = "";
        String contactNumber = "";

        leadSource = ApplicationSettings.getPref(AFTER_CALL_LEAD, "");
        remarks = ApplicationSettings.getPref(AFTER_CALL_REMARKS, "");

        String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");


        if (NotificationData.isSocketResponse) {
            if(SmarterSMBApplication.cloud2IncomingCall){
                customersInfoLayout.setVisibility(View.GONE);
            } else {
                customersInfoLayout.setVisibility(View.VISIBLE);
            }

            showTitleBasedOnType();
            showMore.setVisibility(View.VISIBLE);
            layout5.setVisibility(View.VISIBLE);
            submitLayout.setVisibility(View.GONE);
            nextButton.setVisibility(View.VISIBLE);
            previousButton.setVisibility(View.VISIBLE);
            enableCallOptions();
            connection_status.setText("Connected");
            SmarterSMBApplication.currentAppState = "Connected";
            SmarterSMBApplication.agentIsInConnectingState = false;
            SmarterSMBApplication.incomingCallAcceptedByAgent = true;
            getCustomInfoLayout.setVisibility(View.GONE);

            if (questionsAct != null && !questionsAct.isEmpty()) {
                if (sequencialEndpoint) {
                    if (customersInfoLayout != null)
                        customersInfoLayout.setVisibility(View.GONE);
                } else {
                    if (NotificationData.dialledCustomerNumber != null && !NotificationData.dialledCustomerNumber.isEmpty() && !NotificationData.dialledCustomerNumber.equals("null")) {
                        questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
                        if (questionsAct != null && !questionsAct.isEmpty()) {
                            String emailId = ApplicationSettings.getPref(AFTER_CALL_EMAIL, "");
                            if (emailId != null && !emailId.isEmpty()) {
                                customernumber.setText(emailId);
                            } else {
                                String emailIdForConnectedCustomer = getEmailId(customerNumber);
                                if (emailIdForConnectedCustomer != null && !emailIdForConnectedCustomer.isEmpty()) {
                                    customernumber.setText(emailIdForConnectedCustomer);
                                } else {
                                    customernumber.setText(NotificationData.dialledCustomerNumber);
                                }
                            }
                        } else {
                            customernumber.setText(NotificationData.dialledCustomerNumber);
                        }
                    } else {
                        customernumber.setText("");
                    }

                    if (NotificationData.dialledCustomerName != null && !NotificationData.dialledCustomerName.isEmpty() && !NotificationData.dialledCustomerName.equals("null")) {
                        customername.setText(NotificationData.dialledCustomerName);
                    } else {
                        customername.setText("No Name");
                    }

                    if (company != null && !company.isEmpty() && !company.equals("null")) {
                        companyname.setText(company);
                    } else {
                        companyname.setText("");
                    }

                    if (NotificationData.leadSource != null && !NotificationData.leadSource.isEmpty() && !NotificationData.leadSource.equals("null")) {
                        leadsource.setText(NotificationData.leadSource);
                    } else {
                        leadsource.setText("");
                    }

                    if (NotificationData.statusString != null && !NotificationData.statusString.isEmpty() && !NotificationData.statusString.equals("null")) {
                        salesstage.setText(NotificationData.statusString);
                    } else {
                        salesstage.setText("");
                    }

                    if (NotificationData.substatus1 != null && !NotificationData.substatus1.isEmpty() && !NotificationData.substatus1.equals("null")) {
                        salesstage1.setText(NotificationData.substatus1);
                    } else {
                        salesstage1.setText("");
                    }

                    if (addressString != null && !addressString.isEmpty() && !addressString.equals("null")) {
                        address.setText(addressString);
                    } else {
                        address.setText("");
                    }

                    if (NotificationData.notes_string != null && !NotificationData.notes_string.isEmpty() && !NotificationData.notes_string.equals("null")) {
                        notes.setText(NotificationData.notes_string);
                    } else {
                        notes.setText("");
                    }

                    if (!ServiceHandler.callDisconnected) {
                        if (NotificationData.customKVS != null && !NotificationData.customKVS.isEmpty() && !NotificationData.customKVS.equals("null")) {
                            if (customkvsText != null) {
                                customkvsText.loadDataWithBaseURL(null, NotificationData.customKVS, "text/html", "utf-8", null);
                                customkvsLayout.setVisibility(View.VISIBLE);
                                customkvsText.setVisibility(View.VISIBLE);
                            }
                        }
                    }

                    if (customersInfoLayout != null) {
                        if (NotificationData.isSocketResponse) {
                            if(SmarterSMBApplication.cloud2IncomingCall){
                                customersInfoLayout.setVisibility(View.GONE);
                            } else {
                                customersInfoLayout.setVisibility(View.VISIBLE);
                            }
                            if (titleText != null && !titleText.isEmpty()) {
                                titleLayout.setVisibility(View.VISIBLE);
                                if (titleText.startsWith("<html>")) {
                                    showTitleWebView();
                                } else {
                                    showTitleTextView();
                                }
                            }
                        }
                    }
                }
            }
            if (CommonUtils.isNetworkAvailable(this)) {
                if (!SmarterSMBApplication.agentIsInConnectedState) {
                    SmarterSMBApplication.lastConnectedCustomer = NotificationData.dialledCustomerNumber;
                    new ConnectedInfo().execute();
                }
            }
        } else {
            if (ServiceHandler.incomingCallAnswered) {
                if (!SmarterSMBApplication.timerStarted) {
                    SmarterSMBApplication.timerStarted = true;
                    startTimer();
                }
            }
            if (!callEndedFromDuringCall) {
                if (NotificationData.isSocketResponse) {
                    getCustomInfoLayout.setVisibility(View.VISIBLE);
                    submitLayout.setVisibility(View.GONE);
                    nextButton.setVisibility(View.GONE);
                    previousButton.setVisibility(View.GONE);
                    disableCallOptions();
                } else {
                    customersInfoLayout.setVisibility(View.GONE);
                    if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
                        boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
                        if (ibControl) {

                        }
                    } else {
                        nextButton.setVisibility(View.GONE);
                        previousButton.setVisibility(View.GONE);
                        disableCallOptions();
                    }
                    getCustomInfoLayout.setVisibility(View.VISIBLE);
                    if (ServiceHandler.callDisconnected) {
                        if (callEndedFromDuringCall) {
                            //submitLayout.setVisibility(View.VISIBLE);
                            acpBottomLayout.setVisibility(View.VISIBLE);
                            statusGetInfoRelativeLayout.setVisibility(View.GONE);
                        } else {
                            if (SmarterSMBApplication.matchingInNumberNotInStartMode || SmarterSMBApplication.stayAtHomeScenario) {
                                submitLayout.setVisibility(View.VISIBLE);
                            } else {
                                submitLayout.setVisibility(View.GONE);
                            }
                            acpBottomLayout.setVisibility(View.GONE);
                            statusGetInfoRelativeLayout.setVisibility(View.VISIBLE);
                        }
                        if (redialScenario) {
                            redialScenario = false;
                            submitLayout.setVisibility(View.GONE);
                            getCustomInfoLayout.setVisibility(View.GONE);
                            this.finish();
                        }
                    } else {
                        submitLayout.setVisibility(View.GONE);
                    }
                    if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
                        boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
                        if (ibControl) {

                        }
                    } else {
                        SmarterSMBApplication.currentAppState = "Connecting";
                        if (CommonUtils.isNetworkAvailable(this)) {
                            if (!SmarterSMBApplication.agentIsInConnectingState) {
                                new ConnectingInfo().execute();
                            }
                        }
                    }
                }
            } else {
                if (NotificationData.isSocketResponse) {
                    customersInfoLayout.setVisibility(View.GONE);
                    getCustomInfoLayout.setVisibility(View.GONE);
                } else {
                    customersInfoLayout.setVisibility(View.GONE);
                    nextButton.setVisibility(View.GONE);
                    previousButton.setVisibility(View.GONE);
                    disableCallOptions();
                    getCustomInfoLayout.setVisibility(View.VISIBLE);
                    submitLayout.setVisibility(View.GONE);
                    if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
                        boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
                        if (ibControl) {

                        }
                    } else {
                        SmarterSMBApplication.currentAppState = "Connecting";
                    }
                }
            }
        }
    }

    private void checkViewFocus() {
        try {
            this.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (subStatus1 != null && (subStatus1.equalsIgnoreCase("APPROVED") || subStatus1.equalsIgnoreCase("APPROVED WITHOUT DOCS") || subStatus1.equalsIgnoreCase("REFERRED") || subStatus1.equalsIgnoreCase("BUREAU ERROR") || subStatus1.equalsIgnoreCase("REPEAT ENTRY") || subStatus1.equalsIgnoreCase("CIBIL NOT ELIGIBLE") || subStatus1.equalsIgnoreCase("LOW CIBIL") || subStatus1.equalsIgnoreCase("DEFAULTER") || subStatus1.equalsIgnoreCase("NOT ELIGIBLE") || subStatus1.equalsIgnoreCase("RECENT REJECT") || subStatus1.equalsIgnoreCase("ALREADY IN PROCESS") || subStatus1.equalsIgnoreCase("WRONG PAN NUMBER"))) {
            disable();
            flp_layout.setVisibility(View.VISIBLE);
            hideButtons();
        }
    }

    private void hideButtons() {
        remarksCard.setVisibility(View.GONE);
    }

    private void performInterestedAction() {
        if (subStatus1 != null && subStatus1.equalsIgnoreCase("HOT LEAD")) {
            changeLayoutColor(0);
        }
    }

    private void checkRnrStatus() {
        if (customerNumber != null && !customerNumber.isEmpty()) {
            if (eventType != null) {
                if (!(eventType.equals("call_in_rec_off") || eventType.equals("call_in_rec_on") && !(checkForAmeyoNumber(customerNumber)))) {
                    duraionOfACall = CommonUtils.getLastCallDuration(this, customerNumber);
                    if (duraionOfACall != null && !(duraionOfACall.isEmpty())) {
                        String rnrDuration = "";
                        int rnr_duration = 0, call_duraion = 0;
                        if (ApplicationSettings.containsPref(AppConstants.RNR_DURATION)) {
                            rnrDuration = ApplicationSettings.getPref(AppConstants.RNR_DURATION, "");
                        }
                        if (rnrDuration != null && !(rnrDuration.isEmpty())) {
                            rnr_duration = Integer.parseInt(rnrDuration);
                        }
                        if (!duraionOfACall.isEmpty()) {
                            call_duraion = Integer.parseInt(duraionOfACall);
                        }
                        if (duraionOfACall.equalsIgnoreCase("0")) {
                            setRnr();
                        } else if (call_duraion <= rnr_duration) {
                            duraionOfACall = "0";
                            setRnr();
                        } else {
                            rnr_count = 0;
                        }
                    } else {
                        rnr_count = 0;
                    }
                }
            }
        }
        checkSalesList();
    }

    private void setRnr() {
        checkRNR = true;
        getRNRCount();
        rnrLayout();
    }

    private void callSalesStage(String user_id) {
        if (CommonUtils.isNetworkAvailable(this)) {
            new APIProvider.Get_Sales_Status(user_id, 22, new API_Response_Listener<SalesStageInfo>() {
                @Override
                public void onComplete(SalesStageInfo data, long request_code, int failure_code) {
                    if (data != null) {
                        data.dosave();
                        SmarterSMBApplication.salesStageInfo = data;
                        ArrayList<String> arrayList2 = data.getAppointmentSalesStage();
                        if (arrayList2 != null && (arrayList2.size() > 0)) {
                            stage1 = arrayList2.get(0);
                        }
                    }
                }
            }).call();
        }
    }

    private String checkSalesList() {
        String user_id = SmarterSMBApplication.SmartUser.getId();
        SalesStageInfo salesStageInfo = SmarterSMBApplication.salesStageInfo;
        if (salesStageInfo != null) {
            ArrayList<String> arrayList1 = salesStageInfo.getAppointmentSalesStage();
            if (arrayList1 == null) {
                callSalesStage(user_id);
            } else if (arrayList1.size() <= 0) {
                callSalesStage(user_id);
            } else {
                stage1 = arrayList1.get(0);
                return stage1;
            }
        }
        return stage1;
    }

    private void rnrLayout() {
        if (rnr_count == 0) {
            rnr_count = 1;
        }

        if (status != null && !(status.equalsIgnoreCase("OTHERS"))) {
            if (NotificationData.statusString != null && !(NotificationData.statusString.isEmpty())) {
                if (radStarted) {
                    status = "ALL RNR";
                } else {
                    status = NotificationData.statusString;
                }
            } else {
                if (radStarted) {
                    status = "ALL RNR";
                } else {
                    status = "NEW DATA";
                }
            }
        } else {
            if (radStarted) {
                status = "ALL RNR";
            } else {
                status = "NEW DATA";
            }
        }
    }

    public static void startUearnSio() {

        String prefUrl = ApplicationSettings.getPref(AppConstants.SIOPUSH_URL, "");
        if (pushSioUrl != null && !pushSioUrl.isEmpty()) {
            if (prefUrl.equalsIgnoreCase(pushSioUrl)) {
                if (mSocket != null && !mSocket.connected()) {
                    connectToPushServer();
                } else {
                    if (mSocket == null) {
                        connectToPushServer();
                    }
                }
            } else {
                pushSioUrl = prefUrl;

                if (mSocket != null && mSocket.connected()) {
                    try {
                        mSocket.disconnect();
                        mSocket = null;
                    } catch (Exception e) {
                    }
                }
                connectToPushServer();
            }
        } else {
            pushSioUrl = prefUrl;
            connectToPushServer();
        }
    }

    @Override
    protected void onResume() {

        super.onResume();
        SmarterSMBApplication.setCurrentActivity(this);

        if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
            boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
            if (ibControl) {
                if (SmarterSMBApplication.launchAppFromRecentTasks) {
                    SmarterSMBApplication.launchAppFromRecentTasks = false;
                }
            }
        }

        if (ApplicationSettings.containsPref(AppConstants.FK_CONTROL)) {
            boolean fkControl = ApplicationSettings.getPref(AppConstants.FK_CONTROL, false);
            if (fkControl) {
                endCallButton.setVisibility(View.GONE);
                launchAppButton.setVisibility(View.VISIBLE);
            }
        }

        startUearnSio();
        muteCallBasedOnPhoneDialler();
        radStarted = remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty();
        SmarterSMBApplication.setCurrentActivity(this);
        String noOfCustomersToCall = ApplicationSettings.getPref(AppConstants.NO_OF_CUSTOMERS_TO_CALL, "");
        int noOfCustomersToDial = 0;

        if (noOfCustomersToCall != null && !noOfCustomersToCall.isEmpty()) {
            boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
            if (sequencialEndpoint) {
                noOfCustomersToDial = Integer.valueOf(noOfCustomersToCall);
            }
        }

        if (ApplicationSettings.containsPref(AppConstants.FK_CONTROL)) {
            boolean fkControl = ApplicationSettings.getPref(AppConstants.FK_CONTROL, false);
            if (fkControl) {
                if (ServiceHandler.callDisconnected) {
                    SmarterSMBApplication.incomingCallAcceptedByAgent = false;
                    handleQuestionnaireAndACP();
                } else if (SmarterSMBApplication.incomingCallAcceptedByAgent) {
                    SmarterSMBApplication.callStateIsDisconnected = false;
                    SmarterSMBApplication.incomingCallRejectedByAgent = false;
                    SmarterSMBApplication.autoCallDisconnected = false;
                    ServiceHandler.callDisconnected = false;

                    SmarterSMBApplication.autoCallAnswered = true;
                    if (ApplicationSettings.containsPref(AppConstants.CONNECTED_TEXT)) {
                        String connectedTextStr = ApplicationSettings.getPref(AppConstants.CONNECTED_TEXT, "");
                        if (connectedTextStr != null && !connectedTextStr.isEmpty() && !connectedTextStr.equals("null")) {
                            String[] connectedTextStrArr = connectedTextStr.split("\\|");
                            connection_status.setText(connectedTextStrArr[0].toString());
                            connectingText1.setText(connectedTextStrArr[1].toString());
                            connectingText2.setText(connectedTextStrArr[2].toString());
                            endCallButtonLayout.setVisibility(View.VISIBLE);
                            muteCallButton.setVisibility(View.VISIBLE);
                            launchAppButton.setVisibility(View.VISIBLE);
                            getInfo.setVisibility(View.VISIBLE);
                        }
                    }

                    if (!ServiceHandler.callDisconnected) {
                        if (NotificationData.customKVS != null && !NotificationData.customKVS.isEmpty() && !NotificationData.customKVS.equals("null")) {
                            if (customkvsText != null) {
                                customkvsText.loadDataWithBaseURL(null, NotificationData.customKVS, "text/html", "utf-8", null);
                                customkvsLayout.setVisibility(View.VISIBLE);
                                customkvsText.setVisibility(View.VISIBLE);
                            }
                        }
                    }
                }
            }
        } else if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
            boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
            if (ibControl) {
                String qanda = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");
                if (qanda != null && !qanda.isEmpty() && !qanda.equals("null")) {
                    boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
                    if (sequencialEndpoint && noOfCustomersToDial >= 1) {
                        new Handler().postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                sequencialDiallingScenario();
                            }
                        }, 10);
                    } else {
                        new Handler().postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                normalCallDiallingScenario();
                            }
                        }, 10);
                    }
                }
            }
        } else {
            boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
            if (sequencialEndpoint && noOfCustomersToDial >= 1) {
                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        sequencialDiallingScenario();
                    }
                }, 10);
            } else {
                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        normalCallDiallingScenario();
                    }
                }, 10);
            }
        }
    }

    private void normalCallDiallingScenario() {
        APP_MOVED_TO_BACKGROUND = false;
        NotificationData.privateCall = false;
        setLayoutHeader();
        String qanda = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");
        if (qanda != null && !qanda.isEmpty() && !qanda.equals("null")) {
            dbid = ApplicationSettings.getLongPref(AppConstants.DB_ID, 0);
        }
        if (eventType != null) {
            if (eventType.equals("call_out_rec_off") || eventType.equals("call_out_rec_on") && !(checkForAmeyoNumber(customerNumber))) {
                if (!knowlarityupload) {
                    checkCloudCall();
                }
            }
        }
        handleQuestionnaireAndACP();
    }

    private void sequencialDiallingScenario() {
        APP_MOVED_TO_BACKGROUND = false;
        NotificationData.privateCall = false;
        setLayoutHeader();
        String noOfCustomersToCall = ApplicationSettings.getPref(AppConstants.NO_OF_CUSTOMERS_TO_CALL, "");
        int noOfCustomersToDial = 0;
        boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
        if (noOfCustomersToCall != null && !noOfCustomersToCall.isEmpty()) {
            if (sequencialEndpoint) {
                noOfCustomersToDial = Integer.valueOf(noOfCustomersToCall);
            }
        }
        if (sequencialEndpoint) {
            if (customerNumber == null || customerNumber.isEmpty()) {
                customerNumber = NotificationData.dialledCustomerNumber;
            }
        }

        String qanda = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");
        if (qanda != null && !qanda.isEmpty() && !qanda.equals("null") || noOfCustomersToDial >= 1) {
            dbid = ApplicationSettings.getLongPref(AppConstants.DB_ID, 0);
        }
        if (eventType != null) {
            if (eventType.equals("call_out_rec_off") || eventType.equals("call_out_rec_on") && !(checkForAmeyoNumber(customerNumber))) {
                if (!knowlarityupload) {
                    checkCloudCall();
                }
            }
        }
        if (qanda == null || qanda.isEmpty() || qanda.equals("null")) {
            String launchApp = ApplicationSettings.getPref(AppConstants.LAUNCH_APP, "");
            if (launchApp == null || launchApp.isEmpty()) {
                launchAppButton.setEnabled(false);
                launchAppButton.setClickable(false);
            } else {
                launchAppButton.setEnabled(true);
                launchAppButton.setClickable(true);
            }
        }

        sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
        noOfCustomersToCall = ApplicationSettings.getPref(AppConstants.NO_OF_CUSTOMERS_TO_CALL, "");
        if (sequencialEndpoint && noOfCustomersToCall != null && !noOfCustomersToCall.isEmpty() && !ServiceHandler.callDisconnected && noOfCustomersToDial >= 1) {
            customersListLayout.setVisibility(View.VISIBLE);
            customerDetailsList = new ArrayList<>();
            String customersListViewData = ApplicationSettings.getPref(AppConstants.CUSTOMER_LIST_DATA, "");
            CustomerLite[] listOfCustomers = null;
            if (customersListViewData != null && !customersListViewData.isEmpty() && !customersListViewData.equals("[]")) {
                listOfCustomers = new Gson().fromJson(customersListViewData, CustomerLite[].class);
                if (listOfCustomers != null && listOfCustomers.length > 0) {
                    Collections.addAll(customerDetailsList, listOfCustomers);
                }
            } else {
                if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty()) {
                    boolean radC2CEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
                    if (radC2CEndpoint) {
                        CustomerLite customerLiteInfo = new CustomerLite(0, "", "", "", "", "", "", "", "", "", "");
                        List<CustomerLite> tempcustomerList = new ArrayList<>();
                        tempcustomerList.add(0, customerLiteInfo);
                        ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER, "");
                        ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER_NAME, "");
                        String customerListData = new Gson().toJson(tempcustomerList);
                        ApplicationSettings.putPref(AppConstants.CUSTOMER_LIST_DATA, customerListData.toString());
                        if (customerListData != null && !customerListData.isEmpty()) {
                            listOfCustomers = new Gson().fromJson(customerListData, CustomerLite[].class);
                            if (listOfCustomers != null && listOfCustomers.length > 0) {
                                Collections.addAll(customerDetailsList, listOfCustomers);
                            }
                        }
                    }
                }
            }
            String connectedNumber = ApplicationSettings.getPref(AppConstants.CONNECTED_CUSTOMER, "");
            CustomerLite customerLite = null;
            List<CustomerLite> tempCustomerDetailsList = null;
            if (connectedNumber != null && !connectedNumber.isEmpty() && customerDetailsList != null && customerDetailsList.size() > 0) {
                if (connectedNumber.contains("")) {
                    connectedNumber = connectedNumber.replaceAll("\\s+", "");
                }
                if (connectedNumber != null && !connectedNumber.isEmpty() && !connectedNumber.startsWith("+")) {
                    connectedNumber = "+" + connectedNumber;
                }

                int index = 0;
                for (int i = 0; i < customerDetailsList.size(); i++) {
                    index++;
                    customerLite = customerDetailsList.get(i);
                    if (customerLite.type.isEmpty()) {
                        customerLite.type = "RNR";
                    }
                    if (customerLite.customerNumber != null && customerLite.customerNumber.equals(connectedNumber)) {
                        tempCustomerDetailsList = new ArrayList<>();
                        customerLite.type = "Connected";
                        SmarterSMBApplication.agentIsInConnectingState = false;
                        ApplicationSettings.putPref(AppConstants.STATUS_CONNECTED, true);
                        if (customerLite.status != null && !customerLite.status.isEmpty()) {
                            statusString = customerLite.status;
                        } else {
                            if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty()) {
                                if (UearnHome.dialingFromList) {
                                    statusString = getLatestStatus(customerLite.customerNumber);
                                    if (statusString != null && !statusString.isEmpty()) {
                                        customerLite.status = statusString;
                                    }
                                }
                            } else {
                                customerLite.status = "NEW DATA";
                                statusString = customerLite.status;
                            }
                        }

                        if (customerLite.customerName == null || customerLite.customerName.isEmpty()) {
                            String name = getCallerName(customerLite.customerNumber);
                            if (name != null && !name.isEmpty()) {
                                customerLite.customerName = name;
                            } else {
                                if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty()) {
                                    if (UearnHome.dialingFromList) {
                                        name = getCallerName(customerLite.customerNumber);
                                        if (name != null && !name.isEmpty()) {
                                            customerLite.customerName = name;
                                        }
                                    }
                                } else {
                                    customerLite.customerName = "No Name";
                                }
                            }
                        }
                        if (NotificationData.leadSource != null && !NotificationData.leadSource.isEmpty() && !NotificationData.leadSource.equals("null")) {
                            customerLite.leadSource = NotificationData.leadSource;
                        } else {
                            String leadSource = getLeadSource(customerLite.customerNumber);
                            if (leadSource != null && !leadSource.isEmpty()) {
                                customerLite.leadSource = leadSource;
                            }
                        }
                        if (NotificationData.referredBy != null && !NotificationData.referredBy.isEmpty()) {
                            customerLite.referredBy = NotificationData.referredBy;
                        } else {
                            String referredBy = getReferredByText(customerLite.customerNumber);
                            if (referredBy != null && !referredBy.isEmpty()) {
                                customerLite.referredBy = referredBy;
                            }
                        }
                        if (NotificationData.substatus1 != null && !NotificationData.substatus1.isEmpty() && !NotificationData.substatus1.equals("null")) {
                            customerLite.substatus1 = NotificationData.substatus1;
                        } else {
                            String subStatus1 = getSubstatus1(customerLite.substatus1);
                            if (subStatus1 != null && !subStatus1.isEmpty()) {
                                customerLite.substatus1 = subStatus1;
                            }
                        }
                        if (NotificationData.substatus2 != null && !NotificationData.substatus2.isEmpty() && !NotificationData.substatus2.equals("null")) {
                            customerLite.substatus2 = NotificationData.substatus2;
                        } else {
                            String subStatus2 = getSubstatus2(customerLite.substatus2);
                            if (subStatus2 != null && !subStatus2.isEmpty()) {
                                customerLite.substatus2 = subStatus2;
                            }
                        }
                        String notes = getNotes(customerLite.customerNumber);
                        if (notes != null && !notes.isEmpty()) {
                            customerLite.notes = notes;
                        }
                        String customkvs = getCustomKVS(customerLite.customerNumber);
                        if (customkvs != null && !customkvs.isEmpty()) {
                            customerLite.customkvs = customkvs;
                        }
                        tempCustomerDetailsList.add(0, customerLite);
                        setConnectedCustomerDetails(customerLite);
                        ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER_NAME, customerLite.customerName);

                    }
                }

                String parallelGroupSize = ApplicationSettings.getPref(AppConstants.PARALLEL_GROUP_SIZE, "");
                String customerListData = new Gson().toJson(customerDetailsList);
                ApplicationSettings.putPref(AppConstants.CUSTOMER_LIST_DATA, "");
                ApplicationSettings.putPref(AppConstants.CUSTOMER_LIST_DATA, customerListData.toString());
                //System.out.print(customerListData.toString());

                rnrCallsList = new ArrayList<>();

                if (listOfCustomers != null && listOfCustomers.length > 0) {
                    for (int i = 0; i < listOfCustomers.length; i++) {
                        customerLite = customerDetailsList.get(i);
                        String typeOfCall = customerLite.type;
                        if (typeOfCall != null && !typeOfCall.isEmpty() && typeOfCall.equals("RNR")) {
                            rnrCallsList.add(customerLite);
                        }
                    }
                }

                putRNRCallDetailsToDb(rnrCallsList);
                qanda = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");
                if (qanda != null && !qanda.isEmpty() && !qanda.equals("null")) {
                    layout5.setVisibility(View.GONE); // Once call connected show during call screen sujit 07-04-2019
                    nextButton.setVisibility(View.GONE);
                    previousButton.setVisibility(View.GONE);
                    disableCallOptions();
                    llAfterCall.setVisibility(View.VISIBLE);
                    customersListLayout.setVisibility(View.GONE);
                    handleQuestionnaireAndACP();
                } else {
                    layout5.setVisibility(View.GONE);
                    if (customersInfoLayout != null)
                        customersInfoLayout.setVisibility(View.GONE);
                    formButtonLayout.setVisibility(View.GONE);

                    flp_layout.setVisibility(View.GONE);
                    acpBottomLayout.setVisibility(View.GONE);
                    nameNumberRelativeLayout.setVisibility(View.GONE);
                    pan_available_layout.setVisibility(View.GONE);
                    remarks.setVisibility(View.GONE);
                    create_followup_card.setVisibility(View.GONE);

                    if (!leadSheetAttached) {
                        acpBottomLayout.setVisibility(View.GONE);
                        mRecyclerView = (RecyclerView) findViewById(R.id.my_recycler_view);
                        mRecyclerView.setHasFixedSize(true);
                        LinearLayoutManager mLayoutManager = new LinearLayoutManager(this);
                        mRecyclerView.setLayoutManager(mLayoutManager);
                        AutoDialListAdapter mAdapter = new AutoDialListAdapter(tempCustomerDetailsList);
                        mRecyclerView.setAdapter(mAdapter);
                        if (tempCustomerDetailsList != null && tempCustomerDetailsList.size() > 0) {
                            setEndCallButtonLayoutVisibility();
                            remarksCard.setVisibility(View.GONE);
                        }
                    } else {
                        flp_layout.setVisibility(View.VISIBLE);
                        acpBottomLayout.setVisibility(View.VISIBLE);
                        nameNumberRelativeLayout.setVisibility(View.VISIBLE);
                        pan_available_layout.setVisibility(View.VISIBLE);
                        remarks.setVisibility(View.VISIBLE);
                    }
                }
            } else {
                layout5.setVisibility(View.GONE);
                if (customersInfoLayout != null)
                    customersInfoLayout.setVisibility(View.GONE);
                formButtonLayout.setVisibility(View.GONE);

                flp_layout.setVisibility(View.GONE);
                acpBottomLayout.setVisibility(View.GONE);
                nameNumberRelativeLayout.setVisibility(View.GONE);
                pan_available_layout.setVisibility(View.GONE);
                remarks.setVisibility(View.GONE);
                create_followup_card.setVisibility(View.GONE);

                if (!leadSheetAttached) {
                    acpBottomLayout.setVisibility(View.GONE);
                    mRecyclerView = (RecyclerView) findViewById(R.id.my_recycler_view);
                    mRecyclerView.setHasFixedSize(true);
                    LinearLayoutManager mLayoutManager = new LinearLayoutManager(this);
                    mRecyclerView.setLayoutManager(mLayoutManager);
                    AutoDialListAdapter mAdapter = new AutoDialListAdapter(customerDetailsList);
                    mRecyclerView.setAdapter(mAdapter);
                    if (customerDetailsList != null && customerDetailsList.size() > 0) {
                        setEndCallButtonLayoutVisibility();
                        remarksCard.setVisibility(View.GONE);
                    } else {
                        endCallButtonLayout.setVisibility(View.GONE);
                    }
                } else {
                    flp_layout.setVisibility(View.VISIBLE);
                    acpBottomLayout.setVisibility(View.VISIBLE);
                    nameNumberRelativeLayout.setVisibility(View.VISIBLE);
                    pan_available_layout.setVisibility(View.VISIBLE);
                    remarks.setVisibility(View.VISIBLE);
                }
            }
        } else {
            if (sequencialEndpoint && rnrCallsList != null && rnrCallsList.size() > 0) {
            } else {
                customerDetailsList = new ArrayList<>();
                String customersListViewData = ApplicationSettings.getPref(AppConstants.CUSTOMER_LIST_DATA, "");
                CustomerLite[] listOfCustomers = new Gson().fromJson(customersListViewData, CustomerLite[].class);
                if (listOfCustomers != null && listOfCustomers.length > 0) {
                    Collections.addAll(customerDetailsList, listOfCustomers);
                }

                CustomerLite customerLite = null;
                boolean alreadyConnected = false;

                if (customerDetailsList != null && customerDetailsList.size() > 0) {
                    for (int i = 0; i < customerDetailsList.size(); i++) {
                        customerLite = customerDetailsList.get(i);
                        String type = customerLite.type;
                        if (type != null && !type.isEmpty() && type.equalsIgnoreCase("Connected")) {
                            alreadyConnected = true;
                            boolean hybridEndpoint = ApplicationSettings.getPref(AppConstants.C2C_HYBRID_ENDPOINT, false);
                            if (!hybridEndpoint) {
                                break;
                            }
                        }
                    }
                }

                if (!alreadyConnected) {
                    if (customerDetailsList != null && customerDetailsList.size() > 0) {
                        for (int i = 0; i < customerDetailsList.size(); i++) {
                            customerLite = customerDetailsList.get(i);
                            if (customerLite.type.isEmpty()) {
                                customerLite.type = "RNR";
                            }
                        }
                    }
                    String customerListData = new Gson().toJson(customerDetailsList);
                    ApplicationSettings.putPref(AppConstants.CUSTOMER_LIST_DATA, "");
                    ApplicationSettings.putPref(AppConstants.CUSTOMER_LIST_DATA, customerListData);
                    //System.out.print(customerListData);

                    rnrCallsList = new ArrayList<>();

                    if (listOfCustomers != null && listOfCustomers.length > 0) {
                        for (int i = 0; i < listOfCustomers.length; i++) {
                            customerLite = customerDetailsList.get(i);
                            String typeOfCall = customerLite.type;
                            if (typeOfCall != null && !typeOfCall.isEmpty() && typeOfCall.equals("RNR")) {
                                rnrCallsList.add(customerLite);
                            }
                        }
                        putRNRCallDetailsToDb(rnrCallsList);
                    }
                }
            }
            llAfterCall.setVisibility(View.VISIBLE);

            noOfCustomersToCall = ApplicationSettings.getPref(AppConstants.NO_OF_CUSTOMERS_TO_CALL, "");
            if (noOfCustomersToCall != null && !noOfCustomersToCall.isEmpty()) {
                customersListLayout.setVisibility(View.VISIBLE);
            } else {
                customersListLayout.setVisibility(View.GONE);
            }

            layout5.setVisibility(View.VISIBLE);
            submitLayout.setVisibility(View.GONE);
            formButtonLayout.setVisibility(View.VISIBLE);
            handleQuestionnaireAndACP();
        }
    }

    private void sendStopRequestBeforeReset(String message) {
        if (CommonUtils.isNetworkAvailable(this)) {
            new APIProvider.GetRemoteDialerStop(message, 0, null, "Stopping. Please wait..", new API_Response_Listener<String>() {
                @Override
                public void onComplete(String data, long request_code, int failure_code) {

                    String text = "";
                    try {
                        JSONObject jsonObject = new JSONObject(data);
                        if (jsonObject.has("text")) {
                            text = jsonObject.getString("text");
                        }
                    } catch (Exception e) {

                    }

                    if (text != null && !text.isEmpty()) {
                        radStarted = false;
                        killCall(getApplicationContext());
                        clearPreferences();
                        ApplicationSettings.putPref(AppConstants.RAD_MESSAGE_VALUE, text);
                    }
                }
            }).call();
        } else {
            Toast.makeText(this, "You have no Internet connection.", Toast.LENGTH_SHORT).show();
        }
    }

    private void sendRemoteDialStopRequest(String message) {
        if (CommonUtils.isNetworkAvailable(this)) {
            new APIProvider.GetRemoteDialerStop(message, 0, this, "Stopping. Please wait..", new API_Response_Listener<String>() {
                @Override
                public void onComplete(String data, long request_code, int failure_code) {

                }
            }).call();
        } else {
            Toast.makeText(this, "You have no Internet connection.", Toast.LENGTH_SHORT).show();
        }
    }

    private void sendRemoteDialStopRequestRedialScenario(String message) {
        if (CommonUtils.isNetworkAvailable(this)) {
            new APIProvider.GetRemoteDialerStop(message, 0, this, "Stopping. Please wait..", new API_Response_Listener<String>() {
                @Override
                public void onComplete(String data, long request_code, int failure_code) {
                    String text = "";
                    try {
                        JSONObject jsonObject = new JSONObject(data);
                        clickToCall(customerNumber);
                        SmarterSMBApplication.showSingleAcp = false;
                        SmarterSMBApplication.redialStartRequest = true;
                        SmarterSMBApplication.isRemoteDialledStart = false;
                        SmarterSMBApplication.isRemoteDialledStopRequest = true;

                        if (ApplicationSettings.containsPref(AppConstants.SYSTEM_CONTROL)) {
                            boolean systemControl = ApplicationSettings.getPref(AppConstants.SYSTEM_CONTROL, false);
                            if (systemControl) {
                                SmarterSMBApplication.disableStatusBarAndNavigation = false;
                            }
                        }

                        if (jsonObject.has("text")) {
                            text = jsonObject.getString("text");
                        }
                    } catch (Exception e) {

                    }

                    if (text != null && !text.isEmpty()) {
                        radStarted = false;
                        killCall(getApplicationContext());
                        clearPreferences();
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        long callSubmitTime = System.currentTimeMillis();
                        ApplicationSettings.putPref(AppConstants.CALL_SUBMIT_TIME, callSubmitTime);
                        updateSalesStageRedial();
                        redialNumber = true;
                        ServiceHandler.callDisconnected = false;
                        redial();
                        ApplicationSettings.putPref(AppConstants.RAD_MESSAGE_VALUE, text);
                    }
                }
            }).call();
        } else {
            Toast.makeText(this, "You have no Internet connection. Click on SUBMIT to go back to Home Screen.", Toast.LENGTH_SHORT).show();
        }
    }

    private void sendCallDisconnectInfoToServer(String customerNumber, String source) {
        JSONObject jsonObject = new JSONObject();
        try {
            if (ApplicationSettings.getPref(AppConstants.USERINFO_ID, "0") != null && !ApplicationSettings.getPref(AppConstants.USERINFO_ID, "0").equals("0")) {
                jsonObject.put("user_id", ApplicationSettings.getPref(AppConstants.USERINFO_ID, "0"));
            }
            jsonObject.put("number", customerNumber);
            jsonObject.put("transactionid", NotificationData.transactionId);
            jsonObject.put("source", source);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        try {
            JSONObject callDisconnectResponseJsonObj = DataUploadUtils.postCallDisconnect(Urls.postCallDisconnectUrl(), jsonObject);
            if (callDisconnectResponseJsonObj != null) {
                if (callDisconnectResponseJsonObj.has("disconnectlega")) {
                    String msg = callDisconnectResponseJsonObj.getString("disconnectlega");
                    if (msg != null && !msg.isEmpty() && msg.equalsIgnoreCase("true")) {
                        Handler killCall = new Handler(Looper.getMainLooper());
                        killCall.post(new Runnable() {
                            public void run() {
                                killCall(getApplicationContext());
                            }
                        });

                    }
                }
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    private void sendTransferCallRequestToServer(String customerNumber) {
        JSONObject jsonObject = new JSONObject();
        try {
            if (ApplicationSettings.getPref(AppConstants.USERINFO_ID, "0") != null && !ApplicationSettings.getPref(AppConstants.USERINFO_ID, "0").equals("0")) {
                jsonObject.put("user_id", ApplicationSettings.getPref(AppConstants.USERINFO_ID, "0"));
            }
            jsonObject.put("customer_number", customerNumber);
            jsonObject.put("transactionid", NotificationData.transactionId);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        try {
            JSONObject transferCallResponseJsonObj = DataUploadUtils.postCallDisconnect(Urls.postTransferCallUrl(), jsonObject);
            if (transferCallResponseJsonObj != null) {

                if (transferCallResponseJsonObj.has("alertmessage")) {
                    final String alertMsg = transferCallResponseJsonObj.getString("alertmessage");
                    if (alertMsg != null && !alertMsg.isEmpty()) {
                        Handler killCall = new Handler(Looper.getMainLooper());
                        killCall.post(new Runnable() {
                            public void run() {
                                Toast.makeText(getApplicationContext(), alertMsg, Toast.LENGTH_LONG).show();
                            }
                        });

                    }
                }

                if (transferCallResponseJsonObj.has("disconnectlega")) {
                    String msg = transferCallResponseJsonObj.getString("disconnectlega");
                    if (msg != null && !msg.isEmpty() && msg.equalsIgnoreCase("true")) {
                        Handler killCall = new Handler(Looper.getMainLooper());
                        killCall.post(new Runnable() {
                            public void run() {
                                endCallButtonAction();
                            }
                        });

                    }
                }
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    private void sendMergeCallRequestToServer(String customerNumber) {
        JSONObject jsonObject = new JSONObject();
        try {
            if (ApplicationSettings.getPref(AppConstants.USERINFO_ID, "0") != null && !ApplicationSettings.getPref(AppConstants.USERINFO_ID, "0").equals("0")) {
                jsonObject.put("user_id", ApplicationSettings.getPref(AppConstants.USERINFO_ID, "0"));
            }
            jsonObject.put("customer_number", customerNumber);
            jsonObject.put("transactionid", NotificationData.transactionId);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        try {
            JSONObject transferCallResponseJsonObj = DataUploadUtils.postCallDisconnect(Urls.postMergeCallUrl(), jsonObject);
            if (transferCallResponseJsonObj != null) {

                if (transferCallResponseJsonObj.has("alertmessage")) {
                    final String alertMsg = transferCallResponseJsonObj.getString("alertmessage");
                    if (alertMsg != null && !alertMsg.isEmpty()) {
                        Handler killCall = new Handler(Looper.getMainLooper());
                        killCall.post(new Runnable() {
                            public void run() {
                                Toast.makeText(getApplicationContext(), alertMsg, Toast.LENGTH_LONG).show();
                            }
                        });

                    }
                }

                if (transferCallResponseJsonObj.has("disconnectlega")) {
                    String msg = transferCallResponseJsonObj.getString("disconnectlega");
                    if (msg != null && !msg.isEmpty() && msg.equalsIgnoreCase("true")) {
                        Handler killCall = new Handler(Looper.getMainLooper());
                        killCall.post(new Runnable() {
                            public void run() {
                                endCallButtonAction();
                            }
                        });

                    }
                }
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    private void clearPreferences() {
        ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER, "");
        ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER_NAME, "");
        UearnActivity.serverDialingRedialScenario = false;
        ApplicationSettings.putPref(AppConstants.STATUS_CONNECTED, false);
        ApplicationSettings.putPref(AppConstants.CUSTOMER_DISCONNECT, "");
        ApplicationSettings.putPref(AppConstants.CUSTOMER_LIST_DATA, "");
        ApplicationSettings.putPref(AFTER_CALL_NAME, "");
    }

    private void clearAllContext() {

        ApplicationSettings.putPref(AFTER_CALL_NOTES, "");
        ApplicationSettings.putPref(AFTER_CALL_ASSIGN, "");
        ApplicationSettings.putPref(AppConstants.AFTER_CALL_AUDIO_URL, "");
        ApplicationSettings.putPref(AFTER_CALL_DESIGNATION, "");
        ApplicationSettings.putPref(AFTER_CALL_PHONE, "");
        ApplicationSettings.putPref(AFTER_CALL_COMPANY, "");
        ApplicationSettings.putPref(AFTER_CALL_EMAIL, "");
        ApplicationSettings.putPref(AFTER_CALL_NAME, "");
        ApplicationSettings.putPref(CUSTOMER_TO_CONTACT, "");
        ApplicationSettings.putPref(AFTER_CALL_ADDRESS, "");
        ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER, "");
        ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER_NAME, "");
        ApplicationSettings.putPref(AppConstants.CALL_END_TIME, 0l);
        ApplicationSettings.putPref(AppConstants.CALL_SUBMIT_TIME, 0l);
        ApplicationSettings.putPref(AppConstants.CUSTOMER_LIST_DATA, "");
        ApplicationSettings.putPref(AppConstants.CUSTOMER_DISCONNECT, "");
        ApplicationSettings.putPref(AppConstants.STATUS_CONNECTED, false);

        NotificationData.knolarity_name = "";
        NotificationData.knolarity_number = "";
        NotificationData.dialledCustomerNumber = "";
        NotificationData.dialledCustomerName = "";
        NotificationData.substatus1 = "";
        NotificationData.substatus2 = "";
        NotificationData.statusString = "";
        NotificationData.notes_string = "";
        NotificationData.customerFeedback = "";
        NotificationData.source = "";
        NotificationData.leadSource = "";
        NotificationData.referredBy = "";
        NotificationData.remarks = "";
        NotificationData.customKVS = "";
        NotificationData.emailId = "";
        SmarterSMBApplication.callEndTime = "";

        UearnActivity.serverDialingRedialScenario = false;
        DashboardAgent.dialingFromList = false;
        processAfterCallConnected = false;
        if (radStarted) {
            rnrScenario = false;
        }

        SmarterSMBApplication.agentDisconnectScenario = false;
        SmarterSMBApplication.customerDisconnectScenario = false;
        SmarterSMBApplication.legADisconnectScenario = false;
        SmarterSMBApplication.navigateToACP = false;
        SmarterSMBApplication.connectedCustomerNumber = "";
        SmarterSMBApplication.connectedCustomerName = "";
        connectedCustomerState = "";
        NotificationData.outboundDialledCustomerNumber = "";
        NotificationData.outboundDialledCustomerName = "";
        NotificationData.outboundDialledTransactionId = "";
        NotificationData.transactionId = "";

        if (SmarterSMBApplication.connectedCustomerInProcess) {
            SmarterSMBApplication.connectedCustomerInProcess = false;
        }

        if (SmarterSMBApplication.disconnectedCustomerInProcess) {
            SmarterSMBApplication.disconnectedCustomerInProcess = false;
        }
    }

    private Cursor getFlpMissedCursor() {
        MySql dbHelper = new MySql(this, "mydb", null, AppConstants.dBversion);
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        Date date = new Date();
        Cursor flpMissed;
        String selection = "START_TIME" + "<=" + date.getTime() + " AND " + "START_TIME" + ">=" + UearnHome.start + " AND " + "START_TIME" + "<=" + UearnHome.end + " AND " + "COMPLETED" + "=" + 0 + " AND " + "STATUS != " + " 'deleted' " + " AND " + "FLP_COUNT >= " + 0 + " AND" + " RESPONSE_STATUS " + "=" + " 'accepted' ";
        flpMissed = db.query("remindertbNew", null, selection, null, null, null, "START_TIME ASC");
        return flpMissed;
    }

    private void showProgressDialog() {
        progressDialog = new ProgressDialog(UearnActivity.this);
        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
        progressDialog.setMessage("Please wait...");
        progressDialog.setCancelable(false);
        progressDialog.setCanceledOnTouchOutside(false);
        if (activity != null && !activity.isFinishing()) {
            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    progressDialog.show();
                }
            });
        }
    }

    private void dismissProgressDialog() {
        if (progressDialog != null && progressDialog.isShowing()) {
            progressDialog.dismiss();
            progressDialog = null;
        }
    }

    private void immediateQuestionnaireSubmit() {
        if (ApplicationSettings.containsPref(AppConstants.IMM_QUES_SUBMIT)) {
            boolean immQuesSubmit = ApplicationSettings.getPref(AppConstants.IMM_QUES_SUBMIT, false);
            if (immQuesSubmit) {

                try {
                    String callEndTime = CommonUtils.getTimeFormatInISO(new Date());
                    SmarterSMBApplication.callEndTime = callEndTime;
                } catch (Exception e) {
                    SmarterSMBApplication.callEndTime = "";
                }

                if (NotificationData.dialledCustomerNumber != null && !NotificationData.dialledCustomerNumber.isEmpty()) {
                    customerNumber = NotificationData.dialledCustomerNumber;
                }
                if (status != null && !status.isEmpty()) {
                    if (status.equals("APT RESCHEDULE")) {
                        status = "APT FIXED";
                    } else if (callbackCheck) {
                        if (currentSubject != null && !currentSubject.isEmpty()) {
                            if (currentSubject.equalsIgnoreCase("preflp") || currentSubject.equalsIgnoreCase("postflp")) {
                                status = "APT FIXED";
                            }
                        }
                    }
                    getCalendarEntryInfo.setStatus(status);
                    getCalendarEntryInfo.status = status;
                } else if (latestStatus != null && !latestStatus.isEmpty()) {
                    getCalendarEntryInfo.setStatus(latestStatus);
                    getCalendarEntryInfo.status = latestStatus;
                } else {
                    status = checkSalesList();
                    getCalendarEntryInfo.setStatus(status);
                    getCalendarEntryInfo.status = status;
                }
                if (getCalendarEntryInfo.status != null && !getCalendarEntryInfo.status.isEmpty()) {
                    if (getCalendarEntryInfo.status.contains("(")) {
                        getCalendarEntryInfo.status = getCalendarEntryInfo.status.substring(0, getCalendarEntryInfo.status.indexOf("("));
                    }
                    if (connectedRNR) {
                        getCalendarEntryInfo.status = getCalendarEntryInfo.status + "(CONNECTED)";
                    } else if (rnrConnected) {
                        getCalendarEntryInfo.status = getCalendarEntryInfo.status + "(RNR)";
                    } else if (checkRNR) {
                        boolean truePredictive = ApplicationSettings.getPref(AppConstants.TRUE_PREDICTIVE, false);
                        if (truePredictive) {
                            getCalendarEntryInfo.status = getCalendarEntryInfo.status + "(ALL RNR)";
                        }
                    }
                }

                if (ApplicationSettings.getPref(AFTER_CALL_NOTES, "") != null) {
                    getCalendarEntryInfo.notes = ApplicationSettings.getPref(AFTER_CALL_NOTES, "");
                } else {
                    getCalendarEntryInfo.notes = "";
                }

                if (customerNumber != null && !(customerNumber.isEmpty())) {
                    getCalendarEntryInfo.caller_number = customerNumber;
                }

                getCalendarEntryInfo.user_id = SmarterSMBApplication.SmartUser.getId();
                getCalendarEntryInfo.latitude = Double.toString(latitude);
                getCalendarEntryInfo.longitude = Double.toString(longitude);

                if (subStatus1 != null) {
                    getCalendarEntryInfo.subStatus1 = subStatus1;
                    sub1 = subStatus1;
                } else {
                    getCalendarEntryInfo.subStatus1 = "";
                }

                if (subStatus2 != null && !(subStatus2.isEmpty())) {
                    sub2 = subStatus2;
                    getCalendarEntryInfo.subStatus2 = subStatus2;
                } else {
                    getCalendarEntryInfo.subStatus2 = "";
                }

                String createdAt = CommonUtils.getTimeFormatInISO(new Date());
                getCalendarEntryInfo.created_at = createdAt;

                if (radStarted) {
                    Calendar calender = new GregorianCalendar(final_start_year, final_start_month, final_start_dayOfMonth, final_start_hour, final_start_min);
                    nextFollowUpTime = calender.getTimeInMillis();

                    if (nextFollowUpTime > 0) {
                        Date startDate = new Date();
                        startDate.setTime(nextFollowUpTime);
                        String event_start_time = CommonUtils.getTimeFormatInISO(startDate);
                        getCalendarEntryInfo.setEvent_start_date(event_start_time);
                    } else if (status != null && !status.isEmpty() && status.equals("INTERESTED")) {
                        Calendar cDtTm = Calendar.getInstance();

                        final_start_year = cDtTm.get(Calendar.YEAR);
                        final_start_month = cDtTm.get(Calendar.MONTH);
                        final_start_dayOfMonth = cDtTm.get(Calendar.DAY_OF_MONTH);
                        final_end_year = cDtTm.get(Calendar.YEAR);
                        final_end_month = cDtTm.get(Calendar.MONTH);
                        final_end_dayOfMonth = cDtTm.get(Calendar.DAY_OF_MONTH);

                        calender = new GregorianCalendar(final_start_year, final_start_month, final_start_dayOfMonth, final_start_hour, final_start_min);
                        nextFollowUpTime = calender.getTimeInMillis();

                        if (nextFollowUpTime > 0) {
                            Date startDate = new Date();
                            startDate.setTime(nextFollowUpTime);
                            String event_start_time = CommonUtils.getTimeFormatInISO(startDate);
                            getCalendarEntryInfo.setEvent_start_date(event_start_time);
                        }
                    } else {
                        getCalendarEntryInfo.setEvent_start_date("");
                    }
                }

                getCalendarEntryInfo.extranotes = NotificationData.customerFeedback;
                if (NotificationData.remarks != null && !NotificationData.remarks.isEmpty()) {
                    getCalendarEntryInfo.notes = NotificationData.remarks;
                } else {
                    String notesText = getNotes(customerNumber);
                    if (notesText != null && !notesText.isEmpty()) {
                        getCalendarEntryInfo.notes = notesText;
                    }
                }

                if(NotificationData.updatedCustomKVS != null && !NotificationData.updatedCustomKVS.isEmpty()) {
                    getCalendarEntryInfo.customkvs = NotificationData.updatedCustomKVS;
                }

                getCalendarEntryInfo.wrapup = String.valueOf(0);

                String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
                if (questionsAct != null && !questionsAct.isEmpty()) {

                    mmtStatus = ApplicationSettings.getPref(AppConstants.MMT_STATUS, "");
                    mmtSubStatus1 = ApplicationSettings.getPref(AppConstants.MMT_SUBSTATUS, "");
                    mmtNotes = ApplicationSettings.getPref(AppConstants.MMT_DURING_CALL_NOTES, "");

                    if (mmtRedialScenario) {
                        mmtStatus = mmtStatus + "(" + "REDIAL" + ")";
                        mmtRedialScenario = false;
                    }

                    if (status != null && !status.isEmpty()) {
                        mmtStatus = status;
                    }

                    if (mmtStatus.equals("")) {
                        mmtStatus = "NEW DATA";
                    } else {
                        status = mmtStatus;
                    }
                    sub1 = mmtSubStatus1;


                    getCalendarEntryInfo.status = mmtStatus;
                    getCalendarEntryInfo.subStatus1 = mmtSubStatus1 + "(" + SmarterSMBApplication.currentAppState + ")";

                    if (ApplicationSettings.containsPref(AppConstants.FK_CONTROL)) {
                        boolean fkControl = ApplicationSettings.getPref(AppConstants.FK_CONTROL, false);
                        if (fkControl) {
                            getCalendarEntryInfo.subStatus1 = mmtSubStatus1 + "(ACP)";
                        }
                    }

                    if (callbackCheck) {
                        getCalendarEntryInfo.subStatus2 = "CALLBACK";
                    }
                    getCalendarEntryInfo.notes = mmtNotes;

                    if (!redialScenario) {
                        ApplicationSettings.putPref(AppConstants.MMT_STATUS, "");
                        ApplicationSettings.putPref(AppConstants.MMT_SUBSTATUS, "");
                        ApplicationSettings.putPref(AppConstants.MMT_DURING_CALL_NOTES, "");
                        getCalendarEntryInfo.appointment_id = mydbAppointmentId;
                    } else {
                        currentSalesStatus = mmtStatus;
                        ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                        ApplicationSettings.putPref("SUBJECT", currentSubject);
                        ApplicationSettings.putLongPref("AppointmentId", NotificationData.appointment_db_id);
                        getCalendarEntryInfo.appointment_id = ApplicationSettings.getPref(AFTER_CALL_APPOINTMENT_ID, "");
                    }
                }
                String leadSource = NotificationData.leadSource;
                if (leadSource == null || leadSource.isEmpty()) {
                    leadSource = getLeadSource(customerNumber);
                }
                getCalendarEntryInfo.lead_source = leadSource;

                String customerToContact = ApplicationSettings.getPref(CUSTOMER_TO_CONTACT, "");
                if (customerToContact == null || customerToContact.isEmpty()) {
                    customerToContact = getCustomerToContact(customerNumber);
                }
                getCalendarEntryInfo.customer_id = customerToContact;

                getCalendarEntryInfo.transactionId = NotificationData.transactionId;
                extranote = getCalendarEntryInfo.extranotes;
                leadsrc = getCalendarEntryInfo.lead_source;
                wrapup = getCalendarEntryInfo.wrapup;
                eventstartdate = getCalendarEntryInfo.event_start_date;
                transactionid = getCalendarEntryInfo.transactionId;

                if (SmarterSMBApplication.outgoingCallNotInStartMode) {
                    getCalendarEntryInfo.caller_number = NotificationData.outboundDialledCustomerNumber;
                    getCalendarEntryInfo.caller_name = NotificationData.outboundDialledCustomerName;
                    getCalendarEntryInfo.transactionId = NotificationData.outboundDialledTransactionId;
                    getCalendarEntryInfo.status = "NEW DATA";
                }

                if (getCalendarEntryInfo.caller_number != null && !getCalendarEntryInfo.caller_number.isEmpty()) {
                    final JSONObject jsonObj = JSONParser.getJsonForSalesUpdate(getCalendarEntryInfo);
                    Thread thread = new Thread(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                JSONObject responsejsonObject = DataUploadUtils.postSalesStatusUpdateData(Urls.getSalesStatusUpdate(), jsonObj);
                                String data = "";
                                if (responsejsonObject != null) {
                                    data = responsejsonObject.toString();
                                }
                                if (data != null && !data.isEmpty()) {

                                } else {
                                    if (sub1 != null && !sub1.isEmpty()) {
                                        sub1 = sub1 + " REUPLOAD(1)";
                                    } else {
                                        sub1 = "REUPLOAD(1)";
                                    }

                                    if (ApplicationSettings.containsPref(AppConstants.UPLOAD_STATUS2)) {
                                        boolean uploadStatus2 = ApplicationSettings.getPref(AppConstants.UPLOAD_STATUS2, false);
                                        if (!uploadStatus2) {
                                            CommonUtils.saveOflineStatusToSmartContactDB(getApplicationContext(), customerNumber, "", status, ApplicationSettings.getPref(AFTER_CALL_NOTES, ""), sub1, sub2, extranote, leadsrc, wrapup, eventstartdate, transactionid);
                                        } else {
                                            CommonUtils.saveOflineStatusToSmartContactDB2(getApplicationContext(), customerNumber, "", status, ApplicationSettings.getPref(AFTER_CALL_NOTES, ""), sub1, sub2, extranote, leadsrc, wrapup, eventstartdate, transactionid);
                                        }
                                    } else {
                                        CommonUtils.saveOflineStatusToSmartContactDB2(getApplicationContext(), customerNumber, "", status, ApplicationSettings.getPref(AFTER_CALL_NOTES, ""), sub1, sub2, extranote, leadsrc, wrapup, eventstartdate, transactionid);
                                    }
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    });
                    thread.start();
                }
            }
        }
    }

    private void postOutboundCallDataInInboundScenario() {
        if (NotificationData.dialledCustomerNumber != null && !NotificationData.dialledCustomerNumber.isEmpty()) {
            customerNumber = NotificationData.dialledCustomerNumber;
        }
        if (status != null && !status.isEmpty()) {
            if (status.equals("APT RESCHEDULE")) {
                status = "APT FIXED";
            } else if (callbackCheck) {
                if (currentSubject != null && !currentSubject.isEmpty()) {
                    if (currentSubject.equalsIgnoreCase("preflp") || currentSubject.equalsIgnoreCase("postflp")) {
                        status = "APT FIXED";
                    }
                }
            }
            getCalendarEntryInfo.setStatus(status);
            getCalendarEntryInfo.status = status;
        } else if (latestStatus != null && !latestStatus.isEmpty()) {
            getCalendarEntryInfo.setStatus(latestStatus);
            getCalendarEntryInfo.status = latestStatus;
        } else {
            status = checkSalesList();
            getCalendarEntryInfo.setStatus(status);
            getCalendarEntryInfo.status = status;
        }
        if (getCalendarEntryInfo.status != null && !getCalendarEntryInfo.status.isEmpty()) {
            if (getCalendarEntryInfo.status.contains("(")) {
                getCalendarEntryInfo.status = getCalendarEntryInfo.status.substring(0, getCalendarEntryInfo.status.indexOf("("));
            }
            if (connectedRNR) {
                getCalendarEntryInfo.status = getCalendarEntryInfo.status + "(CONNECTED)";
            } else if (rnrConnected) {
                getCalendarEntryInfo.status = getCalendarEntryInfo.status + "(RNR)";
            } else if (checkRNR) {
                boolean truePredictive = ApplicationSettings.getPref(AppConstants.TRUE_PREDICTIVE, false);
                if (truePredictive) {
                    getCalendarEntryInfo.status = getCalendarEntryInfo.status + "(ALL RNR)";
                }
            }
        }

        if (ApplicationSettings.getPref(AFTER_CALL_NOTES, "") != null) {
            getCalendarEntryInfo.notes = ApplicationSettings.getPref(AFTER_CALL_NOTES, "");
        } else {
            getCalendarEntryInfo.notes = "";
        }

        if (customerNumber != null && !(customerNumber.isEmpty())) {
            getCalendarEntryInfo.caller_number = customerNumber;
        }

        getCalendarEntryInfo.user_id = SmarterSMBApplication.SmartUser.getId();
        getCalendarEntryInfo.latitude = Double.toString(latitude);
        getCalendarEntryInfo.longitude = Double.toString(longitude);

        if (subStatus1 != null) {
            getCalendarEntryInfo.subStatus1 = subStatus1;
            sub1 = subStatus1;
        } else {
            getCalendarEntryInfo.subStatus1 = "";
        }

        if (subStatus2 != null && !(subStatus2.isEmpty())) {
            sub2 = subStatus2;
            getCalendarEntryInfo.subStatus2 = subStatus2;
        } else {
            getCalendarEntryInfo.subStatus2 = "";
        }

        String createdAt = CommonUtils.getTimeFormatInISO(new Date());
        getCalendarEntryInfo.created_at = createdAt;

        if (radStarted) {
            Calendar calender = new GregorianCalendar(final_start_year, final_start_month, final_start_dayOfMonth, final_start_hour, final_start_min);
            nextFollowUpTime = calender.getTimeInMillis();

            if (nextFollowUpTime > 0) {
                Date startDate = new Date();
                startDate.setTime(nextFollowUpTime);
                String event_start_time = CommonUtils.getTimeFormatInISO(startDate);
                getCalendarEntryInfo.setEvent_start_date(event_start_time);
            } else if (status != null && !status.isEmpty() && status.equals("INTERESTED")) {
                Calendar cDtTm = Calendar.getInstance();

                final_start_year = cDtTm.get(Calendar.YEAR);
                final_start_month = cDtTm.get(Calendar.MONTH);
                final_start_dayOfMonth = cDtTm.get(Calendar.DAY_OF_MONTH);
                final_end_year = cDtTm.get(Calendar.YEAR);
                final_end_month = cDtTm.get(Calendar.MONTH);
                final_end_dayOfMonth = cDtTm.get(Calendar.DAY_OF_MONTH);

                calender = new GregorianCalendar(final_start_year, final_start_month, final_start_dayOfMonth, final_start_hour, final_start_min);
                nextFollowUpTime = calender.getTimeInMillis();

                if (nextFollowUpTime > 0) {
                    Date startDate = new Date();
                    startDate.setTime(nextFollowUpTime);
                    String event_start_time = CommonUtils.getTimeFormatInISO(startDate);
                    getCalendarEntryInfo.setEvent_start_date(event_start_time);
                }
            } else {
                getCalendarEntryInfo.setEvent_start_date("");
            }
        }

        getCalendarEntryInfo.extranotes = NotificationData.customerFeedback;
        if (NotificationData.remarks != null && !NotificationData.remarks.isEmpty()) {
            getCalendarEntryInfo.notes = NotificationData.remarks;
        } else {
            String notesText = getNotes(customerNumber);
            if (notesText != null && !notesText.isEmpty()) {
                getCalendarEntryInfo.notes = notesText;
            }
        }

        if(NotificationData.updatedCustomKVS != null && !NotificationData.updatedCustomKVS.isEmpty()) {
            getCalendarEntryInfo.customkvs = NotificationData.updatedCustomKVS;
        }

        long endTime = ApplicationSettings.getPref(AppConstants.CALL_END_TIME, 0l);
        long submitTime = ApplicationSettings.getPref(AppConstants.CALL_SUBMIT_TIME, 0l);
        long wrapUpTime = getTimeDifference(endTime, submitTime);
        getCalendarEntryInfo.wrapup = String.valueOf(wrapUpTime);

        String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
        if (questionsAct != null && !questionsAct.isEmpty()) {

            mmtStatus = ApplicationSettings.getPref(AppConstants.MMT_STATUS, "");
            mmtSubStatus1 = ApplicationSettings.getPref(AppConstants.MMT_SUBSTATUS, "");
            mmtNotes = ApplicationSettings.getPref(AppConstants.MMT_DURING_CALL_NOTES, "");

            if (mmtRedialScenario) {
                mmtStatus = mmtStatus + "(" + "REDIAL" + ")";
                mmtRedialScenario = false;
            }

            if (status != null && !status.isEmpty()) {
                mmtStatus = status;
            }

            if (mmtStatus.equals("")) {
                mmtStatus = "NEW DATA";
            } else {
                status = mmtStatus;
            }
            sub1 = mmtSubStatus1;


            getCalendarEntryInfo.status = mmtStatus;
            getCalendarEntryInfo.subStatus1 = mmtSubStatus1 + "(ACP)";

            if (callbackCheck) {
                getCalendarEntryInfo.subStatus2 = "CALLBACK";
            }
            getCalendarEntryInfo.notes = mmtNotes;

            if (!redialScenario) {
                ApplicationSettings.putPref(AppConstants.MMT_STATUS, "");
                ApplicationSettings.putPref(AppConstants.MMT_SUBSTATUS, "");
                ApplicationSettings.putPref(AppConstants.MMT_DURING_CALL_NOTES, "");
                getCalendarEntryInfo.appointment_id = mydbAppointmentId;
            } else {
                currentSalesStatus = mmtStatus;
                ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                ApplicationSettings.putPref("SUBJECT", currentSubject);
                ApplicationSettings.putLongPref("AppointmentId", NotificationData.appointment_db_id);
                getCalendarEntryInfo.appointment_id = ApplicationSettings.getPref(AFTER_CALL_APPOINTMENT_ID, "");
            }
        }
        String leadSource = NotificationData.leadSource;
        if (leadSource == null || leadSource.isEmpty()) {
            leadSource = getLeadSource(customerNumber);
        }
        getCalendarEntryInfo.lead_source = leadSource;

        String customerToContact = ApplicationSettings.getPref(CUSTOMER_TO_CONTACT, "");
        if (customerToContact == null || customerToContact.isEmpty()) {
            customerToContact = getCustomerToContact(customerNumber);
        }
        getCalendarEntryInfo.customer_id = customerToContact;

        getCalendarEntryInfo.transactionId = NotificationData.transactionId;
        extranote = getCalendarEntryInfo.extranotes;
        leadsrc = getCalendarEntryInfo.lead_source;
        wrapup = getCalendarEntryInfo.wrapup;
        eventstartdate = getCalendarEntryInfo.event_start_date;
        transactionid = getCalendarEntryInfo.transactionId;

        if (SmarterSMBApplication.outgoingCallNotInStartMode) {
            getCalendarEntryInfo.caller_number = NotificationData.outboundDialledCustomerNumber;
            getCalendarEntryInfo.caller_name = NotificationData.outboundDialledCustomerName;
            getCalendarEntryInfo.transactionId = NotificationData.outboundDialledTransactionId;
            getCalendarEntryInfo.status = "NEW DATA";
        }

        if (getCalendarEntryInfo.caller_number != null && !getCalendarEntryInfo.caller_number.isEmpty()) {
            final JSONObject jsonObj = JSONParser.getJsonForSalesUpdate(getCalendarEntryInfo);
            Thread thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        JSONObject responsejsonObject = DataUploadUtils.postSalesStatusUpdateData(Urls.getSalesStatusUpdate(), jsonObj);
                        String data = "";
                        if (responsejsonObject != null) {
                            data = responsejsonObject.toString();
                        }
                        if (data != null && !data.isEmpty()) {

                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            });
            thread.start();
        } else {
            if (radStarted) {
                getCalendarEntryInfo.caller_number = "00000000";
                getCalendarEntryInfo.status = "ALL RNR";

                if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
                    boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
                    if (ibControl) {
                        if (NotificationData.inboundCustomerNumber != null && !NotificationData.inboundCustomerNumber.isEmpty()) {
                            getCalendarEntryInfo.caller_number = NotificationData.inboundCustomerNumber;
                        }
                        if (NotificationData.inboundCustomerName != null && !NotificationData.inboundCustomerName.isEmpty()) {
                            getCalendarEntryInfo.caller_name = NotificationData.inboundCustomerName;
                        }
                        if (NotificationData.inboundTransactionId != null && !NotificationData.inboundTransactionId.isEmpty()) {
                            getCalendarEntryInfo.transactionId = NotificationData.inboundTransactionId;
                        }
                    }
                    getCalendarEntryInfo.status = "NEW DATA";
                }

                final JSONObject jsonObj = JSONParser.getJsonForSalesUpdate(getCalendarEntryInfo);
                Thread thread = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            JSONObject responsejsonObject = DataUploadUtils.postSalesStatusUpdateData(Urls.getSalesStatusUpdate(), jsonObj);
                            String data = "";
                            if (responsejsonObject != null) {
                                data = responsejsonObject.toString();
                            }
                            if (data != null && !data.isEmpty()) {

                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                });
                thread.start();
            } else {
                goToHomeScreen();
            }
        }
    }

    private void setMandatoryParametersForOutgoingCallNotInStartMode() {
        getCalendarEntryInfo.caller_number = NotificationData.outboundDialledCustomerNumber;
        getCalendarEntryInfo.caller_name = NotificationData.outboundDialledCustomerName;
        getCalendarEntryInfo.transactionId = NotificationData.outboundDialledTransactionId;
        getCalendarEntryInfo.status = "NEW DATA";
    }

    private void postInboundCallDataInOutboundScenario() {
        if (NotificationData.dialledCustomerNumber != null && !NotificationData.dialledCustomerNumber.isEmpty()) {
            customerNumber = NotificationData.dialledCustomerNumber;
        }
        if (status != null && !status.isEmpty()) {
            if (status.equals("APT RESCHEDULE")) {
                status = "APT FIXED";
            } else if (callbackCheck) {
                if (currentSubject != null && !currentSubject.isEmpty()) {
                    if (currentSubject.equalsIgnoreCase("preflp") || currentSubject.equalsIgnoreCase("postflp")) {
                        status = "APT FIXED";
                    }
                }
            }
            getCalendarEntryInfo.setStatus(status);
            getCalendarEntryInfo.status = status;
        } else if (latestStatus != null && !latestStatus.isEmpty()) {
            getCalendarEntryInfo.setStatus(latestStatus);
            getCalendarEntryInfo.status = latestStatus;
        } else {
            status = checkSalesList();
            getCalendarEntryInfo.setStatus(status);
            getCalendarEntryInfo.status = status;
        }
        if (getCalendarEntryInfo.status != null && !getCalendarEntryInfo.status.isEmpty()) {
            if (getCalendarEntryInfo.status.contains("(")) {
                getCalendarEntryInfo.status = getCalendarEntryInfo.status.substring(0, getCalendarEntryInfo.status.indexOf("("));
            }
            if (connectedRNR) {
                getCalendarEntryInfo.status = getCalendarEntryInfo.status + "(CONNECTED)";
            } else if (rnrConnected) {
                getCalendarEntryInfo.status = getCalendarEntryInfo.status + "(RNR)";
            } else if (checkRNR) {
                boolean truePredictive = ApplicationSettings.getPref(AppConstants.TRUE_PREDICTIVE, false);
                if (truePredictive) {
                    getCalendarEntryInfo.status = getCalendarEntryInfo.status + "(ALL RNR)";
                }
            }
        }

        if (ApplicationSettings.getPref(AFTER_CALL_NOTES, "") != null) {
            getCalendarEntryInfo.notes = ApplicationSettings.getPref(AFTER_CALL_NOTES, "");
        } else {
            getCalendarEntryInfo.notes = "";
        }

        if (customerNumber != null && !(customerNumber.isEmpty())) {
            getCalendarEntryInfo.caller_number = customerNumber;
        }

        getCalendarEntryInfo.user_id = SmarterSMBApplication.SmartUser.getId();
        getCalendarEntryInfo.latitude = Double.toString(latitude);
        getCalendarEntryInfo.longitude = Double.toString(longitude);

        if (subStatus1 != null) {
            getCalendarEntryInfo.subStatus1 = subStatus1;
            sub1 = subStatus1;
        } else {
            getCalendarEntryInfo.subStatus1 = "";
        }

        if (subStatus2 != null && !(subStatus2.isEmpty())) {
            sub2 = subStatus2;
            getCalendarEntryInfo.subStatus2 = subStatus2;
        } else {
            getCalendarEntryInfo.subStatus2 = "";
        }

        String createdAt = CommonUtils.getTimeFormatInISO(new Date());
        getCalendarEntryInfo.created_at = createdAt;

        if (radStarted) {
            Calendar calender = new GregorianCalendar(final_start_year, final_start_month, final_start_dayOfMonth, final_start_hour, final_start_min);
            nextFollowUpTime = calender.getTimeInMillis();

            if (nextFollowUpTime > 0) {
                Date startDate = new Date();
                startDate.setTime(nextFollowUpTime);
                String event_start_time = CommonUtils.getTimeFormatInISO(startDate);
                getCalendarEntryInfo.setEvent_start_date(event_start_time);
            } else if (status != null && !status.isEmpty() && status.equals("INTERESTED")) {
                Calendar cDtTm = Calendar.getInstance();

                final_start_year = cDtTm.get(Calendar.YEAR);
                final_start_month = cDtTm.get(Calendar.MONTH);
                final_start_dayOfMonth = cDtTm.get(Calendar.DAY_OF_MONTH);
                final_end_year = cDtTm.get(Calendar.YEAR);
                final_end_month = cDtTm.get(Calendar.MONTH);
                final_end_dayOfMonth = cDtTm.get(Calendar.DAY_OF_MONTH);

                calender = new GregorianCalendar(final_start_year, final_start_month, final_start_dayOfMonth, final_start_hour, final_start_min);
                nextFollowUpTime = calender.getTimeInMillis();

                if (nextFollowUpTime > 0) {
                    Date startDate = new Date();
                    startDate.setTime(nextFollowUpTime);
                    String event_start_time = CommonUtils.getTimeFormatInISO(startDate);
                    getCalendarEntryInfo.setEvent_start_date(event_start_time);
                }
            } else {
                getCalendarEntryInfo.setEvent_start_date("");
            }
        }

        getCalendarEntryInfo.extranotes = NotificationData.customerFeedback;
        if (NotificationData.remarks != null && !NotificationData.remarks.isEmpty()) {
            getCalendarEntryInfo.notes = NotificationData.remarks;
        } else {
            String notesText = getNotes(customerNumber);
            if (notesText != null && !notesText.isEmpty()) {
                getCalendarEntryInfo.notes = notesText;
            }
        }

        if(NotificationData.updatedCustomKVS != null && !NotificationData.updatedCustomKVS.isEmpty()) {
            getCalendarEntryInfo.customkvs = NotificationData.updatedCustomKVS;
        }

        long endTime = ApplicationSettings.getPref(AppConstants.CALL_END_TIME, 0l);
        long submitTime = ApplicationSettings.getPref(AppConstants.CALL_SUBMIT_TIME, 0l);
        long wrapUpTime = getTimeDifference(endTime, submitTime);
        getCalendarEntryInfo.wrapup = String.valueOf(wrapUpTime);

        String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
        if (questionsAct != null && !questionsAct.isEmpty()) {

            mmtStatus = ApplicationSettings.getPref(AppConstants.MMT_STATUS, "");
            mmtSubStatus1 = ApplicationSettings.getPref(AppConstants.MMT_SUBSTATUS, "");
            mmtNotes = ApplicationSettings.getPref(AppConstants.MMT_DURING_CALL_NOTES, "");

            if (mmtRedialScenario) {
                mmtStatus = mmtStatus + "(" + "REDIAL" + ")";
                mmtRedialScenario = false;
            }

            if (status != null && !status.isEmpty()) {
                mmtStatus = status;
            }

            if (mmtStatus.equals("")) {
                mmtStatus = "NEW DATA";
            } else {
                status = mmtStatus;
            }
            sub1 = mmtSubStatus1;


            getCalendarEntryInfo.status = mmtStatus;
            getCalendarEntryInfo.subStatus1 = mmtSubStatus1 + "(ACP)";

            if (callbackCheck) {
                getCalendarEntryInfo.subStatus2 = "CALLBACK";
            }
            getCalendarEntryInfo.notes = mmtNotes;

            if (!redialScenario) {
                ApplicationSettings.putPref(AppConstants.MMT_STATUS, "");
                ApplicationSettings.putPref(AppConstants.MMT_SUBSTATUS, "");
                ApplicationSettings.putPref(AppConstants.MMT_DURING_CALL_NOTES, "");
                getCalendarEntryInfo.appointment_id = mydbAppointmentId;
            } else {
                currentSalesStatus = mmtStatus;
                ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                ApplicationSettings.putPref("SUBJECT", currentSubject);
                ApplicationSettings.putLongPref("AppointmentId", NotificationData.appointment_db_id);
                getCalendarEntryInfo.appointment_id = ApplicationSettings.getPref(AFTER_CALL_APPOINTMENT_ID, "");
            }
        }
        String leadSource = NotificationData.leadSource;
        if (leadSource == null || leadSource.isEmpty()) {
            leadSource = getLeadSource(customerNumber);
        }
        getCalendarEntryInfo.lead_source = leadSource;

        String customerToContact = ApplicationSettings.getPref(CUSTOMER_TO_CONTACT, "");
        if (customerToContact == null || customerToContact.isEmpty()) {
            customerToContact = getCustomerToContact(customerNumber);
        }
        getCalendarEntryInfo.customer_id = customerToContact;

        getCalendarEntryInfo.transactionId = NotificationData.transactionId;
        extranote = getCalendarEntryInfo.extranotes;
        leadsrc = getCalendarEntryInfo.lead_source;
        wrapup = getCalendarEntryInfo.wrapup;
        eventstartdate = getCalendarEntryInfo.event_start_date;
        transactionid = getCalendarEntryInfo.transactionId;

        if (SmarterSMBApplication.outgoingCallNotInStartMode) {
            setMandatoryParametersForOutgoingCallNotInStartMode();
        }

        if (getCalendarEntryInfo.caller_number != null && !getCalendarEntryInfo.caller_number.isEmpty()) {
            final JSONObject jsonObj = JSONParser.getJsonForSalesUpdate(getCalendarEntryInfo);
            Thread thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        JSONObject responsejsonObject = DataUploadUtils.postSalesStatusUpdateData(Urls.getSalesStatusUpdate(), jsonObj);
                        String data = "";
                        if (responsejsonObject != null) {
                            data = responsejsonObject.toString();
                        }
                        if (data != null && !data.isEmpty()) {

                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            });
            thread.start();
        } else {
            if (radStarted) {
                getCalendarEntryInfo.caller_number = "00000000";
                getCalendarEntryInfo.status = "ALL RNR";

                if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
                    boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
                    if (ibControl) {
                        if (NotificationData.inboundCustomerNumber != null && !NotificationData.inboundCustomerNumber.isEmpty()) {
                            getCalendarEntryInfo.caller_number = NotificationData.inboundCustomerNumber;
                        }
                        if (NotificationData.inboundCustomerName != null && !NotificationData.inboundCustomerName.isEmpty()) {
                            getCalendarEntryInfo.caller_name = NotificationData.inboundCustomerName;
                        }
                        if (NotificationData.inboundTransactionId != null && !NotificationData.inboundTransactionId.isEmpty()) {
                            getCalendarEntryInfo.transactionId = NotificationData.inboundTransactionId;
                        }
                    }
                    getCalendarEntryInfo.status = "NEW DATA";
                }

                final JSONObject jsonObj = JSONParser.getJsonForSalesUpdate(getCalendarEntryInfo);
                Thread thread = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            JSONObject responsejsonObject = DataUploadUtils.postSalesStatusUpdateData(Urls.getSalesStatusUpdate(), jsonObj);
                            String data = "";
                            if (responsejsonObject != null) {
                                data = responsejsonObject.toString();
                            }
                            if (data != null && !data.isEmpty()) {

                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                });
                thread.start();
            } else {
                goToHomeScreen();
            }
        }
    }

    private void updateSalesStageSync() {
        if (NotificationData.dialledCustomerNumber != null && !NotificationData.dialledCustomerNumber.isEmpty()) {
            customerNumber = NotificationData.dialledCustomerNumber;
        }
        if (status != null && !status.isEmpty()) {
            if (status.equals("APT RESCHEDULE")) {
                status = "APT FIXED";
            } else if (callbackCheck) {
                if (currentSubject != null && !currentSubject.isEmpty()) {
                    if (currentSubject.equalsIgnoreCase("preflp") || currentSubject.equalsIgnoreCase("postflp")) {
                        status = "APT FIXED";
                    }
                }
            }
            getCalendarEntryInfo.setStatus(status);
            getCalendarEntryInfo.status = status;
        } else if (latestStatus != null && !latestStatus.isEmpty()) {
            getCalendarEntryInfo.setStatus(latestStatus);
            getCalendarEntryInfo.status = latestStatus;
        } else {
            status = checkSalesList();
            getCalendarEntryInfo.setStatus(status);
            getCalendarEntryInfo.status = status;
        }
        if (getCalendarEntryInfo.status != null && !getCalendarEntryInfo.status.isEmpty()) {
            if (getCalendarEntryInfo.status.contains("(")) {
                getCalendarEntryInfo.status = getCalendarEntryInfo.status.substring(0, getCalendarEntryInfo.status.indexOf("("));
            }
            if (connectedRNR) {
                getCalendarEntryInfo.status = getCalendarEntryInfo.status + "(CONNECTED)";
            } else if (rnrConnected) {
                getCalendarEntryInfo.status = getCalendarEntryInfo.status + "(RNR)";
            } else if (checkRNR) {
                boolean truePredictive = ApplicationSettings.getPref(AppConstants.TRUE_PREDICTIVE, false);
                if (truePredictive) {
                    getCalendarEntryInfo.status = getCalendarEntryInfo.status + "(ALL RNR)";
                }
            }
        }

        if (ApplicationSettings.getPref(AFTER_CALL_NOTES, "") != null) {
            getCalendarEntryInfo.notes = ApplicationSettings.getPref(AFTER_CALL_NOTES, "");
        } else {
            getCalendarEntryInfo.notes = "";
        }

        if (customerNumber != null && !(customerNumber.isEmpty())) {
            getCalendarEntryInfo.caller_number = customerNumber;
        }

        getCalendarEntryInfo.user_id = SmarterSMBApplication.SmartUser.getId();
        getCalendarEntryInfo.latitude = Double.toString(latitude);
        getCalendarEntryInfo.longitude = Double.toString(longitude);

        if (subStatus1 != null) {
            getCalendarEntryInfo.subStatus1 = subStatus1;
            sub1 = subStatus1;
        } else {
            getCalendarEntryInfo.subStatus1 = "";
        }

        if (subStatus2 != null && !(subStatus2.isEmpty())) {
            sub2 = subStatus2;
            getCalendarEntryInfo.subStatus2 = subStatus2;
        } else {
            getCalendarEntryInfo.subStatus2 = "";
        }

        String createdAt = CommonUtils.getTimeFormatInISO(new Date());
        getCalendarEntryInfo.created_at = createdAt;

        if (radStarted) {
            Calendar calender = new GregorianCalendar(final_start_year, final_start_month, final_start_dayOfMonth, final_start_hour, final_start_min);
            nextFollowUpTime = calender.getTimeInMillis();

            if (nextFollowUpTime > 0) {
                Date startDate = new Date();
                startDate.setTime(nextFollowUpTime);
                String event_start_time = CommonUtils.getTimeFormatInISO(startDate);
                getCalendarEntryInfo.setEvent_start_date(event_start_time);
            } else if (status != null && !status.isEmpty() && status.equals("INTERESTED")) {
                Calendar cDtTm = Calendar.getInstance();

                final_start_year = cDtTm.get(Calendar.YEAR);
                final_start_month = cDtTm.get(Calendar.MONTH);
                final_start_dayOfMonth = cDtTm.get(Calendar.DAY_OF_MONTH);
                final_end_year = cDtTm.get(Calendar.YEAR);
                final_end_month = cDtTm.get(Calendar.MONTH);
                final_end_dayOfMonth = cDtTm.get(Calendar.DAY_OF_MONTH);

                calender = new GregorianCalendar(final_start_year, final_start_month, final_start_dayOfMonth, final_start_hour, final_start_min);
                nextFollowUpTime = calender.getTimeInMillis();

                if (nextFollowUpTime > 0) {
                    Date startDate = new Date();
                    startDate.setTime(nextFollowUpTime);
                    String event_start_time = CommonUtils.getTimeFormatInISO(startDate);
                    getCalendarEntryInfo.setEvent_start_date(event_start_time);
                }
            } else {
                getCalendarEntryInfo.setEvent_start_date("");
            }
        }

        getCalendarEntryInfo.extranotes = NotificationData.customerFeedback;
        if (NotificationData.remarks != null && !NotificationData.remarks.isEmpty()) {
            getCalendarEntryInfo.notes = NotificationData.remarks;
        } else {
            String notesText = getNotes(customerNumber);
            if (notesText != null && !notesText.isEmpty()) {
                getCalendarEntryInfo.notes = notesText;
            }
        }

        if(NotificationData.updatedCustomKVS != null && !NotificationData.updatedCustomKVS.isEmpty()) {
            getCalendarEntryInfo.customkvs = NotificationData.updatedCustomKVS;
        }

        long endTime = ApplicationSettings.getPref(AppConstants.CALL_END_TIME, 0l);
        long submitTime = ApplicationSettings.getPref(AppConstants.CALL_SUBMIT_TIME, 0l);
        long wrapUpTime = getTimeDifference(endTime, submitTime);
        getCalendarEntryInfo.wrapup = String.valueOf(wrapUpTime);

        String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
        if (questionsAct != null && !questionsAct.isEmpty()) {

            mmtStatus = ApplicationSettings.getPref(AppConstants.MMT_STATUS, "");
            mmtSubStatus1 = ApplicationSettings.getPref(AppConstants.MMT_SUBSTATUS, "");
            mmtNotes = ApplicationSettings.getPref(AppConstants.MMT_DURING_CALL_NOTES, "");

            if (mmtRedialScenario) {
                mmtStatus = mmtStatus + "(" + "REDIAL" + ")";
                mmtRedialScenario = false;
            }

            if (status != null && !status.isEmpty()) {
                mmtStatus = status;
            }

            if (mmtStatus.equals("")) {
                mmtStatus = "NEW DATA";
            } else {
                status = mmtStatus;
            }
            sub1 = mmtSubStatus1;


            getCalendarEntryInfo.status = mmtStatus;
            getCalendarEntryInfo.subStatus1 = mmtSubStatus1 + "(ACP)";

            if (callbackCheck) {
                getCalendarEntryInfo.subStatus2 = "CALLBACK";
            }
            getCalendarEntryInfo.notes = mmtNotes;

            if (!redialScenario) {
                ApplicationSettings.putPref(AppConstants.MMT_STATUS, "");
                ApplicationSettings.putPref(AppConstants.MMT_SUBSTATUS, "");
                ApplicationSettings.putPref(AppConstants.MMT_DURING_CALL_NOTES, "");
                getCalendarEntryInfo.appointment_id = mydbAppointmentId;
            } else {
                currentSalesStatus = mmtStatus;
                ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                ApplicationSettings.putPref("SUBJECT", currentSubject);
                ApplicationSettings.putLongPref("AppointmentId", NotificationData.appointment_db_id);
                getCalendarEntryInfo.appointment_id = ApplicationSettings.getPref(AFTER_CALL_APPOINTMENT_ID, "");
            }
        }
        String leadSource = NotificationData.leadSource;
        if (leadSource == null || leadSource.isEmpty()) {
            leadSource = getLeadSource(customerNumber);
        }
        getCalendarEntryInfo.lead_source = leadSource;

        String customerToContact = ApplicationSettings.getPref(CUSTOMER_TO_CONTACT, "");
        if (customerToContact == null || customerToContact.isEmpty()) {
            customerToContact = getCustomerToContact(customerNumber);
        }
        getCalendarEntryInfo.customer_id = customerToContact;

        getCalendarEntryInfo.transactionId = NotificationData.transactionId;
        extranote = getCalendarEntryInfo.extranotes;
        leadsrc = getCalendarEntryInfo.lead_source;
        wrapup = getCalendarEntryInfo.wrapup;
        eventstartdate = getCalendarEntryInfo.event_start_date;
        transactionid = getCalendarEntryInfo.transactionId;

        if (SmarterSMBApplication.outgoingCallNotInStartMode) {
            if (ApplicationSettings.containsPref(AppConstants.UNSCHEDULED_CALL)) {
                boolean schedulecall = ApplicationSettings.getPref(AppConstants.UNSCHEDULED_CALL, false);
                if (schedulecall) {

                } else {
                    setMandatoryParametersForOutgoingCallNotInStartMode();
                }
            } else {
                setMandatoryParametersForOutgoingCallNotInStartMode();
            }
        }

        if (getCalendarEntryInfo.caller_number != null && !getCalendarEntryInfo.caller_number.isEmpty()) {
            final JSONObject jsonObj = JSONParser.getJsonForSalesUpdate(getCalendarEntryInfo);
            showProgressDialog();
            Thread thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        JSONObject responsejsonObject = DataUploadUtils.postSalesStatusUpdateData(Urls.getSalesStatusUpdate(), jsonObj);
                        String data = "";
                        if (responsejsonObject != null) {
                            data = responsejsonObject.toString();
                        }
                        if (data != null && !data.isEmpty()) {
                            dismissProgressDialog();
                            CommonUtils.saveBankContactInfoToSmartContactDB(getApplicationContext(), customerNumber, "", status, ApplicationSettings.getPref(AFTER_CALL_NOTES, ""), sub1, sub2, extranote, leadsrc, wrapup, eventstartdate, transactionid);
                            if (status != null && !status.isEmpty() && status.contains("(")) {
                                status = status.substring(0, status.indexOf("("));
                            }
                            invokeNextCustomer(data);
                            clearAllContext();
                            if (SmarterSMBApplication.matchingInNumberNotInStartMode || SmarterSMBApplication.stayAtHomeScenario) {
                                SmarterSMBApplication.matchingInNumberNotInStartMode = false;
                                SmarterSMBApplication.resetHomeNotInStartMode = true;
                                SmarterSMBApplication.outgoingCallNotInStartMode = false;
                                if (SmarterSMBApplication.isDiallingFollowUpC2C) {
                                    if (CommonUtils.isNetworkAvailable(getApplicationContext())) {
                                        navigateToUearnFollowUpActivity();
                                    } else {
                                        navigateToUearnHome();
                                    }
                                } else {
                                    navigateToUearnHome();
                                }
                            } else if (NotificationData.legAConnect) {
                                Cursor flpMissedCusrosr = getFlpMissedCursor();
                                if (redialNumber) {
                                    redialNumber = false;
                                    goToHomeScreen();
                                } else if (flpMissedCusrosr != null && flpMissedCusrosr.getCount() > 0) {
                                    SmarterSMBApplication.sendCallDisconnectStartFollowUpRequest = true;
                                    SmarterSMBApplication.callEndedACPTimeout = true;
                                    killCall(getApplicationContext());
                                } else if (submitACPTimeout) {
                                    submitACPTimeout = false;
                                    SmarterSMBApplication.sendCallDisconnectStopRequest = true;
                                    SmarterSMBApplication.callEndedACPTimeout = true;
                                    killCall(getApplicationContext());
                                } else {
                                    Intent intent = getIntent();
                                    goToHomeScreen();
                                    intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
                                    overridePendingTransition(0, 0);
                                    startActivity(intent);
                                    overridePendingTransition(0, 0);
                                }
                                if (SmarterSMBApplication.triggerDataLoadingAfterSubmit) {
                                    SmarterSMBApplication.triggerDataLoadingAfterSubmit = false;
                                    SmarterSMBApplication.connectedCustomerState = "";
                                    sendStopRequestBeforeReset("Taking a break");
                                    goToHomeScreen();
                                    SmarterSMBApplication.startDataLoadingActivity();
                                }
                            } else {
                                if (SmarterSMBApplication.triggerDataLoadingAfterSubmit) {
                                    SmarterSMBApplication.triggerDataLoadingAfterSubmit = false;
                                    SmarterSMBApplication.connectedCustomerState = "";
                                    sendStopRequestBeforeReset("Taking a break");
                                    goToHomeScreen();
                                    SmarterSMBApplication.startDataLoadingActivity();
                                } else {
                                    if (SmarterSMBApplication.isDiallingFollowUpC2C) {
                                        if (CommonUtils.isNetworkAvailable(getApplicationContext())) {
                                            navigateToUearnFollowUpActivity();
                                        } else {
                                            SmarterSMBApplication.matchingInNumberNotInStartMode = false;
                                            navigateToUearnHome();
                                        }
                                    } else {
                                        goToHomeScreen();
                                    }
                                }
                            }
                        } else {
                            runOnUiThread(new Runnable() {
                                public void run() {
                                    Toast.makeText(getApplicationContext(), "Retrying..", Toast.LENGTH_SHORT).show();
                                }
                            });
                            Thread.sleep(5000);
                            responsejsonObject = DataUploadUtils.postSalesStatusUpdateData(Urls.getSalesStatusUpdate(), jsonObj);
                            if (responsejsonObject != null) {
                                data = responsejsonObject.toString();
                            }
                            if (data != null && !data.isEmpty()) {
                                dismissProgressDialog();
                                CommonUtils.saveBankContactInfoToSmartContactDB(getApplicationContext(), customerNumber, "", status, ApplicationSettings.getPref(AFTER_CALL_NOTES, ""), sub1, sub2, extranote, leadsrc, wrapup, eventstartdate, transactionid);
                                if (status != null && !status.isEmpty() && status.contains("(")) {
                                    status = status.substring(0, status.indexOf("("));
                                }
                                invokeNextCustomer(data);
                                clearAllContext();
                                if (SmarterSMBApplication.matchingInNumberNotInStartMode || SmarterSMBApplication.stayAtHomeScenario) {
                                    SmarterSMBApplication.matchingInNumberNotInStartMode = false;
                                    SmarterSMBApplication.resetHomeNotInStartMode = true;
                                    SmarterSMBApplication.outgoingCallNotInStartMode = false;
                                    if (SmarterSMBApplication.isDiallingFollowUpC2C) {
                                        if (CommonUtils.isNetworkAvailable(getApplicationContext())) {
                                            navigateToUearnFollowUpActivity();
                                        } else {
                                            navigateToUearnHome();
                                        }
                                    } else {
                                        navigateToUearnHome();
                                    }
                                } else if (NotificationData.legAConnect) {
                                    Cursor flpMissedCusrosr = getFlpMissedCursor();
                                    if (redialNumber) {
                                        redialNumber = false;
                                        goToHomeScreen();
                                    } else if (flpMissedCusrosr != null && flpMissedCusrosr.getCount() > 0) {
                                        SmarterSMBApplication.sendCallDisconnectStartFollowUpRequest = true;
                                        SmarterSMBApplication.callEndedACPTimeout = true;
                                        killCall(getApplicationContext());
                                    } else if (submitACPTimeout) {
                                        submitACPTimeout = false;
                                        SmarterSMBApplication.sendCallDisconnectStopRequest = true;
                                        SmarterSMBApplication.callEndedACPTimeout = true;
                                        killCall(getApplicationContext());
                                    } else {
                                        Intent intent = getIntent();
                                        goToHomeScreen();
                                        intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
                                        overridePendingTransition(0, 0);
                                        startActivity(intent);
                                        overridePendingTransition(0, 0);
                                    }
                                    if (SmarterSMBApplication.triggerDataLoadingAfterSubmit) {
                                        SmarterSMBApplication.triggerDataLoadingAfterSubmit = false;
                                        SmarterSMBApplication.connectedCustomerState = "";
                                        sendStopRequestBeforeReset("Taking a break");
                                        goToHomeScreen();
                                        SmarterSMBApplication.startDataLoadingActivity();
                                    }
                                } else {
                                    if (SmarterSMBApplication.triggerDataLoadingAfterSubmit) {
                                        SmarterSMBApplication.triggerDataLoadingAfterSubmit = false;
                                        SmarterSMBApplication.connectedCustomerState = "";
                                        sendStopRequestBeforeReset("Taking a break");
                                        goToHomeScreen();
                                        SmarterSMBApplication.startDataLoadingActivity();
                                    } else {
                                        if (SmarterSMBApplication.isDiallingFollowUpC2C) {
                                            if (CommonUtils.isNetworkAvailable(getApplicationContext())) {
                                                navigateToUearnFollowUpActivity();
                                            } else {
                                                SmarterSMBApplication.matchingInNumberNotInStartMode = false;
                                                navigateToUearnHome();
                                            }
                                        } else {
                                            goToHomeScreen();
                                        }
                                    }
                                }
                            } else {
                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        Toast.makeText(getApplicationContext(), "Retrying..", Toast.LENGTH_SHORT).show();
                                    }
                                });
                                Thread.sleep(5000);
                                responsejsonObject = DataUploadUtils.postSalesStatusUpdateData(Urls.getSalesStatusUpdate(), jsonObj);
                                if (responsejsonObject != null) {
                                    data = responsejsonObject.toString();
                                }
                                if (data != null && !data.isEmpty()) {
                                    dismissProgressDialog();
                                    CommonUtils.saveBankContactInfoToSmartContactDB(getApplicationContext(), customerNumber, "", status, ApplicationSettings.getPref(AFTER_CALL_NOTES, ""), sub1, sub2, extranote, leadsrc, wrapup, eventstartdate, transactionid);
                                    if (status != null && !status.isEmpty() && status.contains("(")) {
                                        status = status.substring(0, status.indexOf("("));
                                    }
                                    invokeNextCustomer(data);
                                    clearAllContext();
                                    if (SmarterSMBApplication.matchingInNumberNotInStartMode || SmarterSMBApplication.stayAtHomeScenario) {
                                        SmarterSMBApplication.matchingInNumberNotInStartMode = false;
                                        SmarterSMBApplication.resetHomeNotInStartMode = true;
                                        SmarterSMBApplication.outgoingCallNotInStartMode = false;
                                        if (SmarterSMBApplication.isDiallingFollowUpC2C) {
                                            if (CommonUtils.isNetworkAvailable(getApplicationContext())) {
                                                navigateToUearnFollowUpActivity();
                                            } else {
                                                navigateToUearnHome();
                                            }
                                        } else {
                                            navigateToUearnHome();
                                        }
                                    } else if (NotificationData.legAConnect) {
                                        Cursor flpMissedCusrosr = getFlpMissedCursor();
                                        if (redialNumber) {
                                            redialNumber = false;
                                            goToHomeScreen();
                                        } else if (flpMissedCusrosr != null && flpMissedCusrosr.getCount() > 0) {
                                            SmarterSMBApplication.sendCallDisconnectStartFollowUpRequest = true;
                                            SmarterSMBApplication.callEndedACPTimeout = true;
                                            killCall(getApplicationContext());
                                        } else if (submitACPTimeout) {
                                            submitACPTimeout = false;
                                            SmarterSMBApplication.sendCallDisconnectStopRequest = true;
                                            SmarterSMBApplication.callEndedACPTimeout = true;
                                            killCall(getApplicationContext());
                                        } else {
                                            Intent intent = getIntent();
                                            goToHomeScreen();
                                            intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
                                            overridePendingTransition(0, 0);
                                            startActivity(intent);
                                            overridePendingTransition(0, 0);
                                        }
                                        if (SmarterSMBApplication.triggerDataLoadingAfterSubmit) {
                                            SmarterSMBApplication.triggerDataLoadingAfterSubmit = false;
                                            SmarterSMBApplication.connectedCustomerState = "";
                                            sendStopRequestBeforeReset("Taking a break");
                                            goToHomeScreen();
                                            SmarterSMBApplication.startDataLoadingActivity();
                                        }
                                    } else {
                                        if (SmarterSMBApplication.triggerDataLoadingAfterSubmit) {
                                            SmarterSMBApplication.triggerDataLoadingAfterSubmit = false;
                                            SmarterSMBApplication.connectedCustomerState = "";
                                            sendStopRequestBeforeReset("Taking a break");
                                            goToHomeScreen();
                                            SmarterSMBApplication.startDataLoadingActivity();
                                        } else {
                                            if (SmarterSMBApplication.isDiallingFollowUpC2C) {
                                                if (CommonUtils.isNetworkAvailable(getApplicationContext())) {
                                                    navigateToUearnFollowUpActivity();
                                                } else {
                                                    SmarterSMBApplication.matchingInNumberNotInStartMode = false;
                                                    navigateToUearnHome();
                                                }
                                            } else {
                                                goToHomeScreen();
                                            }
                                        }
                                    }
                                } else {
                                    NotificationData.backToNetworkCustomerNo = NotificationData.dialledCustomerNumber;
                                    NotificationData.backToNetworkTransactionId = NotificationData.transactionId;
                                    UearnHome.retrySalesStageUpdateFailed = true;

                                    if (sub1 != null && !sub1.isEmpty()) {
                                        sub1 = sub1 + " REUPLOAD(1)";
                                    } else {
                                        sub1 = "REUPLOAD(1)";
                                    }

                                    if (ApplicationSettings.containsPref(AppConstants.UPLOAD_STATUS2)) {
                                        boolean uploadStatus2 = ApplicationSettings.getPref(AppConstants.UPLOAD_STATUS2, false);
                                        if (!uploadStatus2) {
                                            CommonUtils.saveOflineStatusToSmartContactDB(getApplicationContext(), customerNumber, "", status, ApplicationSettings.getPref(AFTER_CALL_NOTES, ""), sub1, sub2, extranote, leadsrc, wrapup, eventstartdate, transactionid);
                                        } else {
                                            CommonUtils.saveOflineStatusToSmartContactDB2(getApplicationContext(), customerNumber, "", status, ApplicationSettings.getPref(AFTER_CALL_NOTES, ""), sub1, sub2, extranote, leadsrc, wrapup, eventstartdate, transactionid);
                                        }
                                    } else {
                                        CommonUtils.saveOflineStatusToSmartContactDB2(getApplicationContext(), customerNumber, "", status, ApplicationSettings.getPref(AFTER_CALL_NOTES, ""), sub1, sub2, extranote, leadsrc, wrapup, eventstartdate, transactionid);
                                    }

                                    if (status != null && !status.isEmpty() && status.contains("(")) {
                                        status = status.substring(0, status.indexOf("("));
                                    }
                                    if (SmarterSMBApplication.triggerDataLoadingAfterSubmit) {
                                        SmarterSMBApplication.triggerDataLoadingAfterSubmit = false;
                                        SmarterSMBApplication.connectedCustomerState = "";
                                        sendStopRequestBeforeReset("Taking a break");
                                        goToHomeScreen();
                                        SmarterSMBApplication.startDataLoadingActivity();
                                    } else {
                                        if (SmarterSMBApplication.isDiallingFollowUpC2C) {
                                            if (CommonUtils.isNetworkAvailable(getApplicationContext())) {
                                                navigateToUearnFollowUpActivity();
                                            } else {
                                                SmarterSMBApplication.matchingInNumberNotInStartMode = false;
                                                navigateToUearnHome();
                                            }
                                        } else {
                                            goToHomeScreen();
                                        }
                                    }
                                }
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            });
            thread.start();
            new Handler() {
                public void handleMessage(Message msg) {
                    super.handleMessage(msg);
                    try {
                        dismissProgressDialog();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            };
        } else {
            if (radStarted) {
                getCalendarEntryInfo.caller_number = "00000000";
                getCalendarEntryInfo.status = "ALL RNR";

                if(SmarterSMBApplication.inboundCallInOutbound){
                    SmarterSMBApplication.inboundCallInOutbound = false;
                    getCalendarEntryInfo.lead_source = "";
                }

                if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
                    boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
                    if (ibControl) {
                        if (NotificationData.inboundCustomerNumber != null && !NotificationData.inboundCustomerNumber.isEmpty()) {
                            getCalendarEntryInfo.caller_number = NotificationData.inboundCustomerNumber;
                        }
                        if (NotificationData.inboundCustomerName != null && !NotificationData.inboundCustomerName.isEmpty()) {
                            getCalendarEntryInfo.caller_name = NotificationData.inboundCustomerName;
                        }
                        if (NotificationData.inboundTransactionId != null && !NotificationData.inboundTransactionId.isEmpty()) {
                            getCalendarEntryInfo.transactionId = NotificationData.inboundTransactionId;
                        }
                    }
                    getCalendarEntryInfo.status = "NEW DATA";
                }

                final JSONObject jsonObj = JSONParser.getJsonForSalesUpdate(getCalendarEntryInfo);
                showProgressDialog();
                Thread thread = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            JSONObject responsejsonObject = DataUploadUtils.postSalesStatusUpdateData(Urls.getSalesStatusUpdate(), jsonObj);
                            String data = "";
                            if (responsejsonObject != null) {
                                data = responsejsonObject.toString();
                            }
                            if (data != null && !data.isEmpty()) {
                                dismissProgressDialog();
                                CommonUtils.saveBankContactInfoToSmartContactDB(getApplicationContext(), "00000000", "", status, ApplicationSettings.getPref(AFTER_CALL_NOTES, ""), sub1, sub2, extranote, leadsrc, wrapup, eventstartdate, transactionid);
                                if (status != null && !status.isEmpty() && status.contains("(")) {
                                    status = status.substring(0, status.indexOf("("));
                                }
                                invokeNextCustomer(data);
                                clearAllContext();
                                if (SmarterSMBApplication.matchingInNumberNotInStartMode || SmarterSMBApplication.stayAtHomeScenario) {
                                    SmarterSMBApplication.matchingInNumberNotInStartMode = false;
                                    SmarterSMBApplication.resetHomeNotInStartMode = true;
                                    SmarterSMBApplication.outgoingCallNotInStartMode = false;
                                    if (SmarterSMBApplication.isDiallingFollowUpC2C) {
                                        if (CommonUtils.isNetworkAvailable(getApplicationContext())) {
                                            navigateToUearnFollowUpActivity();
                                        } else {
                                            navigateToUearnHome();
                                        }
                                    } else {
                                        navigateToUearnHome();
                                    }
                                } else if (NotificationData.legAConnect) {
                                    Cursor flpMissedCusrosr = getFlpMissedCursor();
                                    if (redialNumber) {
                                        redialNumber = false;
                                        goToHomeScreen();
                                    } else if (flpMissedCusrosr != null && flpMissedCusrosr.getCount() > 0) {
                                        SmarterSMBApplication.sendCallDisconnectStartFollowUpRequest = true;
                                        SmarterSMBApplication.callEndedACPTimeout = true;
                                        killCall(getApplicationContext());
                                    } else if (submitACPTimeout) {
                                        submitACPTimeout = false;
                                        SmarterSMBApplication.sendCallDisconnectStopRequest = true;
                                        SmarterSMBApplication.callEndedACPTimeout = true;
                                        killCall(getApplicationContext());
                                    } else {
                                        Intent intent = getIntent();
                                        goToHomeScreen();
                                        intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
                                        overridePendingTransition(0, 0);
                                        startActivity(intent);
                                        overridePendingTransition(0, 0);
                                    }
                                    if (SmarterSMBApplication.triggerDataLoadingAfterSubmit) {
                                        SmarterSMBApplication.triggerDataLoadingAfterSubmit = false;
                                        SmarterSMBApplication.connectedCustomerState = "";
                                        sendStopRequestBeforeReset("Taking a break");
                                        goToHomeScreen();
                                        SmarterSMBApplication.startDataLoadingActivity();
                                    }
                                } else {
                                    if (SmarterSMBApplication.triggerDataLoadingAfterSubmit) {
                                        SmarterSMBApplication.triggerDataLoadingAfterSubmit = false;
                                        SmarterSMBApplication.connectedCustomerState = "";
                                        sendStopRequestBeforeReset("Taking a break");
                                        goToHomeScreen();
                                        SmarterSMBApplication.startDataLoadingActivity();
                                    } else {
                                        if (SmarterSMBApplication.isDiallingFollowUpC2C) {
                                            if (CommonUtils.isNetworkAvailable(getApplicationContext())) {
                                                navigateToUearnFollowUpActivity();
                                            } else {
                                                SmarterSMBApplication.matchingInNumberNotInStartMode = false;
                                                navigateToUearnHome();
                                            }
                                        } else {
                                            SmarterSMBApplication.agentIsInConnectingState = false;
                                            goToHomeScreen();
                                        }
                                    }
                                }
                            } else {
                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        Toast.makeText(getApplicationContext(), "Retrying..", Toast.LENGTH_SHORT).show();
                                    }
                                });
                                Thread.sleep(5000);
                                responsejsonObject = DataUploadUtils.postSalesStatusUpdateData(Urls.getSalesStatusUpdate(), jsonObj);
                                if (responsejsonObject != null) {
                                    data = responsejsonObject.toString();
                                }
                                if (data != null && !data.isEmpty()) {
                                    dismissProgressDialog();
                                    CommonUtils.saveBankContactInfoToSmartContactDB(getApplicationContext(), "00000000", "", status, ApplicationSettings.getPref(AFTER_CALL_NOTES, ""), sub1, sub2, extranote, leadsrc, wrapup, eventstartdate, transactionid);
                                    if (status != null && !status.isEmpty() && status.contains("(")) {
                                        status = status.substring(0, status.indexOf("("));
                                    }
                                    invokeNextCustomer(data);
                                    clearAllContext();
                                    if (SmarterSMBApplication.matchingInNumberNotInStartMode || SmarterSMBApplication.stayAtHomeScenario) {
                                        SmarterSMBApplication.matchingInNumberNotInStartMode = false;
                                        SmarterSMBApplication.resetHomeNotInStartMode = true;
                                        SmarterSMBApplication.outgoingCallNotInStartMode = false;
                                        if (SmarterSMBApplication.isDiallingFollowUpC2C) {
                                            if (CommonUtils.isNetworkAvailable(getApplicationContext())) {
                                                navigateToUearnFollowUpActivity();
                                            } else {
                                                navigateToUearnHome();
                                            }
                                        } else {
                                            navigateToUearnHome();
                                        }
                                    } else if (NotificationData.legAConnect) {
                                        Cursor flpMissedCusrosr = getFlpMissedCursor();
                                        if (redialNumber) {
                                            redialNumber = false;
                                            goToHomeScreen();
                                        } else if (flpMissedCusrosr != null && flpMissedCusrosr.getCount() > 0) {
                                            SmarterSMBApplication.sendCallDisconnectStartFollowUpRequest = true;
                                            SmarterSMBApplication.callEndedACPTimeout = true;
                                            killCall(getApplicationContext());
                                        } else if (submitACPTimeout) {
                                            submitACPTimeout = false;
                                            SmarterSMBApplication.sendCallDisconnectStopRequest = true;
                                            SmarterSMBApplication.callEndedACPTimeout = true;
                                            killCall(getApplicationContext());
                                        } else {
                                            Intent intent = getIntent();
                                            goToHomeScreen();
                                            intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
                                            overridePendingTransition(0, 0);
                                            startActivity(intent);
                                            overridePendingTransition(0, 0);
                                        }
                                        if (SmarterSMBApplication.triggerDataLoadingAfterSubmit) {
                                            SmarterSMBApplication.triggerDataLoadingAfterSubmit = false;
                                            SmarterSMBApplication.connectedCustomerState = "";
                                            sendStopRequestBeforeReset("Taking a break");
                                            goToHomeScreen();
                                            SmarterSMBApplication.startDataLoadingActivity();
                                        }
                                    } else {
                                        if (SmarterSMBApplication.triggerDataLoadingAfterSubmit) {
                                            SmarterSMBApplication.triggerDataLoadingAfterSubmit = false;
                                            SmarterSMBApplication.connectedCustomerState = "";
                                            sendStopRequestBeforeReset("Taking a break");
                                            goToHomeScreen();
                                            SmarterSMBApplication.startDataLoadingActivity();
                                        } else {
                                            if (SmarterSMBApplication.isDiallingFollowUpC2C) {
                                                if (CommonUtils.isNetworkAvailable(getApplicationContext())) {
                                                    navigateToUearnFollowUpActivity();
                                                } else {
                                                    SmarterSMBApplication.matchingInNumberNotInStartMode = false;
                                                    navigateToUearnHome();
                                                }
                                            } else {
                                                SmarterSMBApplication.agentIsInConnectingState = false;
                                                goToHomeScreen();
                                            }
                                        }
                                    }
                                } else {
                                    runOnUiThread(new Runnable() {
                                        public void run() {
                                            Toast.makeText(getApplicationContext(), "Retrying..", Toast.LENGTH_SHORT).show();
                                        }
                                    });
                                    Thread.sleep(5000);
                                    responsejsonObject = DataUploadUtils.postSalesStatusUpdateData(Urls.getSalesStatusUpdate(), jsonObj);
                                    if (responsejsonObject != null) {
                                        data = responsejsonObject.toString();
                                    }
                                    if (data != null && !data.isEmpty()) {
                                        dismissProgressDialog();
                                        CommonUtils.saveBankContactInfoToSmartContactDB(getApplicationContext(), "00000000", "", status, ApplicationSettings.getPref(AFTER_CALL_NOTES, ""), sub1, sub2, extranote, leadsrc, wrapup, eventstartdate, transactionid);
                                        if (status != null && !status.isEmpty() && status.contains("(")) {
                                            status = status.substring(0, status.indexOf("("));
                                        }
                                        invokeNextCustomer(data);
                                        clearAllContext();
                                        if (SmarterSMBApplication.matchingInNumberNotInStartMode || SmarterSMBApplication.stayAtHomeScenario) {
                                            SmarterSMBApplication.matchingInNumberNotInStartMode = false;
                                            SmarterSMBApplication.resetHomeNotInStartMode = true;
                                            SmarterSMBApplication.outgoingCallNotInStartMode = false;
                                            if (SmarterSMBApplication.isDiallingFollowUpC2C) {
                                                if (CommonUtils.isNetworkAvailable(getApplicationContext())) {
                                                    navigateToUearnFollowUpActivity();
                                                } else {
                                                    navigateToUearnHome();
                                                }
                                            } else {
                                                navigateToUearnHome();
                                            }
                                        } else if (NotificationData.legAConnect) {
                                            Cursor flpMissedCusrosr = getFlpMissedCursor();
                                            if (redialNumber) {
                                                redialNumber = false;
                                                goToHomeScreen();
                                            } else if (flpMissedCusrosr != null && flpMissedCusrosr.getCount() > 0) {
                                                SmarterSMBApplication.sendCallDisconnectStartFollowUpRequest = true;
                                                SmarterSMBApplication.callEndedACPTimeout = true;
                                                killCall(getApplicationContext());
                                            } else if (submitACPTimeout) {
                                                submitACPTimeout = false;
                                                SmarterSMBApplication.sendCallDisconnectStopRequest = true;
                                                SmarterSMBApplication.callEndedACPTimeout = true;
                                                killCall(getApplicationContext());
                                            } else {
                                                Intent intent = getIntent();
                                                goToHomeScreen();
                                                intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
                                                overridePendingTransition(0, 0);
                                                startActivity(intent);
                                                overridePendingTransition(0, 0);
                                            }
                                            if (SmarterSMBApplication.triggerDataLoadingAfterSubmit) {
                                                SmarterSMBApplication.triggerDataLoadingAfterSubmit = false;
                                                SmarterSMBApplication.connectedCustomerState = "";
                                                sendStopRequestBeforeReset("Taking a break");
                                                goToHomeScreen();
                                                SmarterSMBApplication.startDataLoadingActivity();
                                            }
                                        } else {
                                            if (SmarterSMBApplication.triggerDataLoadingAfterSubmit) {
                                                SmarterSMBApplication.triggerDataLoadingAfterSubmit = false;
                                                SmarterSMBApplication.connectedCustomerState = "";
                                                sendStopRequestBeforeReset("Taking a break");
                                                goToHomeScreen();
                                                SmarterSMBApplication.startDataLoadingActivity();
                                            } else {
                                                if (SmarterSMBApplication.isDiallingFollowUpC2C) {
                                                    if (CommonUtils.isNetworkAvailable(getApplicationContext())) {
                                                        navigateToUearnFollowUpActivity();
                                                    } else {
                                                        SmarterSMBApplication.matchingInNumberNotInStartMode = false;
                                                        navigateToUearnHome();
                                                    }
                                                } else {
                                                    SmarterSMBApplication.agentIsInConnectingState = false;
                                                    goToHomeScreen();
                                                }
                                            }
                                        }
                                    } else {
                                        NotificationData.backToNetworkCustomerNo = NotificationData.dialledCustomerNumber;
                                        NotificationData.backToNetworkTransactionId = NotificationData.transactionId;
                                        UearnHome.retrySalesStageUpdateFailed = true;
                                        if (sub1 != null && !sub1.isEmpty()) {
                                            sub1 = sub1 + " REUPLOAD(1)";
                                        } else {
                                            sub1 = "REUPLOAD(1)";
                                        }
                                        if (ApplicationSettings.containsPref(AppConstants.UPLOAD_STATUS2)) {
                                            boolean uploadStatus2 = ApplicationSettings.getPref(AppConstants.UPLOAD_STATUS2, false);
                                            if (!uploadStatus2) {
                                                CommonUtils.saveOflineStatusToSmartContactDB(getApplicationContext(), "00000000", "", status, ApplicationSettings.getPref(AFTER_CALL_NOTES, ""), sub1, sub2, extranote, leadsrc, wrapup, eventstartdate, transactionid);
                                            } else {
                                                CommonUtils.saveOflineStatusToSmartContactDB2(getApplicationContext(), "00000000", "", status, ApplicationSettings.getPref(AFTER_CALL_NOTES, ""), sub1, sub2, extranote, leadsrc, wrapup, eventstartdate, transactionid);
                                            }
                                        } else {
                                            CommonUtils.saveOflineStatusToSmartContactDB2(getApplicationContext(), "00000000", "", status, ApplicationSettings.getPref(AFTER_CALL_NOTES, ""), sub1, sub2, extranote, leadsrc, wrapup, eventstartdate, transactionid);
                                        }

                                        if (status != null && !status.isEmpty() && status.contains("(")) {
                                            status = status.substring(0, status.indexOf("("));
                                        }
                                        if (SmarterSMBApplication.triggerDataLoadingAfterSubmit) {
                                            SmarterSMBApplication.triggerDataLoadingAfterSubmit = false;
                                            SmarterSMBApplication.connectedCustomerState = "";
                                            sendStopRequestBeforeReset("Taking a break");
                                            goToHomeScreen();
                                            SmarterSMBApplication.startDataLoadingActivity();
                                        } else {
                                            if (SmarterSMBApplication.isDiallingFollowUpC2C) {
                                                if (CommonUtils.isNetworkAvailable(getApplicationContext())) {
                                                    navigateToUearnFollowUpActivity();
                                                } else {
                                                    SmarterSMBApplication.matchingInNumberNotInStartMode = false;
                                                    navigateToUearnHome();
                                                }
                                            } else {
                                                SmarterSMBApplication.agentIsInConnectingState = false;
                                                goToHomeScreen();
                                            }
                                        }
                                    }
                                }
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                });
                thread.start();
                new Handler() {
                    public void handleMessage(Message msg) {
                        super.handleMessage(msg);
                        try {
                            dismissProgressDialog();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                };
            } else {
                goToHomeScreen();
            }
        }
    }

    private void updateSalesStageRedial() {

        if (NotificationData.dialledCustomerNumber != null && !NotificationData.dialledCustomerNumber.isEmpty()) {
            customerNumber = NotificationData.dialledCustomerNumber;
        }
        String start_time = CommonUtils.getTimeFormatInISO(new Date());
        GetCalendarEntryInfo getCalendarEntryInfo = new GetCalendarEntryInfo();
        if (status != null && !status.isEmpty()) {
            getCalendarEntryInfo.setStatus(status);
            getCalendarEntryInfo.status = status;
        } else if (latestStatus != null && !latestStatus.isEmpty()) {
            getCalendarEntryInfo.setStatus(latestStatus);
            getCalendarEntryInfo.status = latestStatus;
        } else {
            status = checkSalesList();
            getCalendarEntryInfo.setStatus(status);
            getCalendarEntryInfo.status = status;
        }

        String salesStatusRedial = "";
        if ((status == null || status.isEmpty())) {
            salesStatusRedial = "(REDIAL)";
        } else {
            salesStatusRedial = status + "(REDIAL)";
        }

        getCalendarEntryInfo.setStatus(salesStatusRedial);
        getCalendarEntryInfo.status = salesStatusRedial;

        if (ApplicationSettings.getPref(AFTER_CALL_NOTES, "") != null) {
            getCalendarEntryInfo.notes = ApplicationSettings.getPref(AFTER_CALL_NOTES, "");
        } else {
            getCalendarEntryInfo.notes = "";
        }

        if (customerNumber != null && !(customerNumber.isEmpty())) {
            getCalendarEntryInfo.caller_number = customerNumber;
        }

        getCalendarEntryInfo.user_id = SmarterSMBApplication.SmartUser.getId();
        getCalendarEntryInfo.latitude = Double.toString(latitude);
        getCalendarEntryInfo.longitude = Double.toString(longitude);
        if (subStatus1 != null) {
            getCalendarEntryInfo.subStatus1 = subStatus1;
            sub1 = subStatus1;
        } else {
            getCalendarEntryInfo.subStatus1 = "";
        }
        if (subStatus2 != null && !(subStatus2.isEmpty())) {
            sub2 = subStatus2;
            getCalendarEntryInfo.subStatus2 = subStatus2;
        } else {
            getCalendarEntryInfo.subStatus2 = "";
        }
        getCalendarEntryInfo.setEvent_start_date(start_time);

        if (radStarted) {
            Calendar calender = new GregorianCalendar(final_start_year, final_start_month, final_start_dayOfMonth, final_start_hour, final_start_min);
            nextFollowUpTime = calender.getTimeInMillis();
        }

        if (radStarted) {
            if (nextFollowUpTime > 0) {
                Date startDate = new Date();
                startDate.setTime(nextFollowUpTime);
                String event_start_time = CommonUtils.getTimeFormatInISO(startDate);
                getCalendarEntryInfo.setEvent_start_date(event_start_time);
            }
        }

        getCalendarEntryInfo.extranotes = NotificationData.customerFeedback;

        if (NotificationData.remarks != null && !NotificationData.remarks.isEmpty()) {
            getCalendarEntryInfo.notes = NotificationData.remarks;
        } else {
            String notesText = getNotes(customerNumber);
            if (notesText != null && !notesText.isEmpty()) {
                getCalendarEntryInfo.notes = notesText;
            }
        }

        if(NotificationData.updatedCustomKVS != null && !NotificationData.updatedCustomKVS.isEmpty()) {
            getCalendarEntryInfo.customkvs = NotificationData.updatedCustomKVS;
        }

        long endTime = ApplicationSettings.getPref(AppConstants.CALL_END_TIME, 0l);
        long submitTime = ApplicationSettings.getPref(AppConstants.CALL_SUBMIT_TIME, 0l);
        long wrapUpTime = getTimeDifference(endTime, submitTime);
        getCalendarEntryInfo.wrapup = String.valueOf(wrapUpTime);

        String leadSource = NotificationData.leadSource;
        if (leadSource == null || leadSource.isEmpty()) {
            leadSource = getLeadSource(customerNumber);
        }
        getCalendarEntryInfo.lead_source = leadSource;

        String customerToContact = ApplicationSettings.getPref(CUSTOMER_TO_CONTACT, "");
        if (customerToContact == null || customerToContact.isEmpty()) {
            customerToContact = getCustomerToContact(customerNumber);
        }
        getCalendarEntryInfo.customer_id = customerToContact;

        getCalendarEntryInfo.transactionId = NotificationData.transactionId;
        extranote = getCalendarEntryInfo.extranotes;
        leadsrc = getCalendarEntryInfo.lead_source;
        wrapup = getCalendarEntryInfo.wrapup;
        eventstartdate = getCalendarEntryInfo.event_start_date;
        transactionid = getCalendarEntryInfo.transactionId;

        String createdAt = CommonUtils.getTimeFormatInISO(new Date());
        getCalendarEntryInfo.created_at = createdAt;

        if (getCalendarEntryInfo.caller_number != null && !getCalendarEntryInfo.caller_number.isEmpty()) {
            final JSONObject jsonObj = JSONParser.getJsonForSalesUpdate(getCalendarEntryInfo);
            Thread thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        JSONObject responsejsonObject = DataUploadUtils.postSalesStatusUpdateData(Urls.getSalesStatusUpdate(), jsonObj);
                        String data = "";
                        if (responsejsonObject != null) {
                            data = responsejsonObject.toString();
                        }
                        if (data != null && !data.isEmpty()) {
                            CommonUtils.saveBankContactInfoToSmartContactDB(getApplicationContext(), customerNumber, "", status, ApplicationSettings.getPref(AFTER_CALL_NOTES, ""), sub1, sub2, extranote, leadsrc, wrapup, eventstartdate, transactionid);
                        } else {
                            if (sub1 != null && !sub1.isEmpty()) {
                                sub1 = sub1 + " REUPLOAD(1)";
                            } else {
                                sub1 = "REUPLOAD(1)";
                            }
                            if (ApplicationSettings.containsPref(AppConstants.UPLOAD_STATUS2)) {
                                boolean uploadStatus2 = ApplicationSettings.getPref(AppConstants.UPLOAD_STATUS2, false);
                                if (!uploadStatus2) {
                                    CommonUtils.saveOflineStatusToSmartContactDB(getApplicationContext(), customerNumber, "", status, ApplicationSettings.getPref(AFTER_CALL_NOTES, ""), sub1, sub2, extranote, leadsrc, wrapup, eventstartdate, transactionid);
                                } else {
                                    CommonUtils.saveOflineStatusToSmartContactDB2(getApplicationContext(), customerNumber, "", status, ApplicationSettings.getPref(AFTER_CALL_NOTES, ""), sub1, sub2, extranote, leadsrc, wrapup, eventstartdate, transactionid);
                                }
                            } else {
                                CommonUtils.saveOflineStatusToSmartContactDB2(getApplicationContext(), customerNumber, "", status, ApplicationSettings.getPref(AFTER_CALL_NOTES, ""), sub1, sub2, extranote, leadsrc, wrapup, eventstartdate, transactionid);
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            });
            thread.start();
        }
    }

    private void sendInCallActivityToServer(final String next_action) {

        if (NotificationData.dialledCustomerNumber != null && !NotificationData.dialledCustomerNumber.isEmpty()) {
            customerNumber = NotificationData.dialledCustomerNumber;
        }

        if (customerNumber != null && !(customerNumber.isEmpty())) {
            getCalendarEntryInfo.caller_number = customerNumber;
        }

        if (status != null && !status.isEmpty()) {
            if (status.equals("APT RESCHEDULE")) {
                status = "APT FIXED";
            } else if (callbackCheck) {
                if (currentSubject != null && !currentSubject.isEmpty()) {
                    if (currentSubject.equalsIgnoreCase("preflp") || currentSubject.equalsIgnoreCase("postflp")) {
                        status = "APT FIXED";
                    }
                }
            }
            getCalendarEntryInfo.setStatus(status);
            getCalendarEntryInfo.status = status;
        } else if (latestStatus != null && !latestStatus.isEmpty()) {
            getCalendarEntryInfo.setStatus(latestStatus);
            getCalendarEntryInfo.status = latestStatus;
        } else {
            status = checkSalesList();
            getCalendarEntryInfo.setStatus(status);
            getCalendarEntryInfo.status = status;
        }

        getCalendarEntryInfo.user_id = SmarterSMBApplication.SmartUser.getId();

        if (subStatus1 != null) {
            getCalendarEntryInfo.subStatus1 = subStatus1;
            sub1 = subStatus1;
        } else {
            getCalendarEntryInfo.subStatus1 = "";
        }

        if (subStatus2 != null && !(subStatus2.isEmpty())) {
            sub2 = subStatus2;
            getCalendarEntryInfo.subStatus2 = subStatus2;
        } else {
            getCalendarEntryInfo.subStatus2 = "";
        }

        String createdAt = CommonUtils.getTimeFormatInISO(new Date());
        getCalendarEntryInfo.created_at = createdAt;

        if (radStarted) {
            Calendar calender = new GregorianCalendar(final_start_year, final_start_month, final_start_dayOfMonth, final_start_hour, final_start_min);
            nextFollowUpTime = calender.getTimeInMillis();

            if (nextFollowUpTime > 0) {
                Date startDate = new Date();
                startDate.setTime(nextFollowUpTime);
                String event_start_time = CommonUtils.getTimeFormatInISO(startDate);
                getCalendarEntryInfo.setEvent_start_date(event_start_time);
            } else if (status != null && !status.isEmpty() && status.equals("INTERESTED")) {
                Calendar cDtTm = Calendar.getInstance();

                final_start_year = cDtTm.get(Calendar.YEAR);
                final_start_month = cDtTm.get(Calendar.MONTH);
                final_start_dayOfMonth = cDtTm.get(Calendar.DAY_OF_MONTH);
                final_end_year = cDtTm.get(Calendar.YEAR);
                final_end_month = cDtTm.get(Calendar.MONTH);
                final_end_dayOfMonth = cDtTm.get(Calendar.DAY_OF_MONTH);

                calender = new GregorianCalendar(final_start_year, final_start_month, final_start_dayOfMonth, final_start_hour, final_start_min);
                nextFollowUpTime = calender.getTimeInMillis();

                if (nextFollowUpTime > 0) {
                    Date startDate = new Date();
                    startDate.setTime(nextFollowUpTime);
                    String event_start_time = CommonUtils.getTimeFormatInISO(startDate);
                    getCalendarEntryInfo.setEvent_start_date(event_start_time);
                }
            } else {
                getCalendarEntryInfo.setEvent_start_date("");
            }
        }

        getCalendarEntryInfo.extranotes = NotificationData.customerFeedback;
        if (NotificationData.remarks != null && !NotificationData.remarks.isEmpty()) {
            getCalendarEntryInfo.notes = NotificationData.remarks;
        } else {
            String notesText = getNotes(customerNumber);
            if (notesText != null && !notesText.isEmpty()) {
                getCalendarEntryInfo.notes = notesText;
            }
        }

        if(NotificationData.updatedCustomKVS != null && !NotificationData.updatedCustomKVS.isEmpty()) {
            getCalendarEntryInfo.customkvs = NotificationData.updatedCustomKVS;
        }

        String leadSource = NotificationData.leadSource;
        if (leadSource == null || leadSource.isEmpty()) {
            leadSource = getLeadSource(customerNumber);
        }
        getCalendarEntryInfo.lead_source = leadSource;

        String customerToContact = ApplicationSettings.getPref(CUSTOMER_TO_CONTACT, "");
        if (customerToContact == null || customerToContact.isEmpty()) {
            customerToContact = getCustomerToContact(customerNumber);
        }
        getCalendarEntryInfo.customer_id = customerToContact;

        getCalendarEntryInfo.transactionId = NotificationData.transactionId;
        extranote = getCalendarEntryInfo.extranotes;
        leadsrc = getCalendarEntryInfo.lead_source;
        wrapup = getCalendarEntryInfo.wrapup;
        eventstartdate = getCalendarEntryInfo.event_start_date;
        transactionid = getCalendarEntryInfo.transactionId;

//        if (getCalendarEntryInfo.caller_number != null && !getCalendarEntryInfo.caller_number.isEmpty()) {
            next_action_obj = JSONParser.getJsonForSalesUpdate(getCalendarEntryInfo);
//            AsyncTaskInCallActivity asyncTask = new AsyncTaskInCallActivity();
//            asyncTask.execute();
            Thread thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        DataUploadUtils.postInCallActivity(next_action, next_action_obj);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            });
            thread.start();
//        }
    }

    private void sendSalesStatusUpdateViaSocketEmit() {

        if (NotificationData.dialledCustomerNumber != null && !NotificationData.dialledCustomerNumber.isEmpty()) {
            customerNumber = NotificationData.dialledCustomerNumber;
        }

        if (status != null && !status.isEmpty()) {
            if (status.equals("APT RESCHEDULE")) {
                status = "APT FIXED";
            } else if (callbackCheck) {
                if (currentSubject != null && !currentSubject.isEmpty()) {
                    if (currentSubject.equalsIgnoreCase("preflp") || currentSubject.equalsIgnoreCase("postflp")) {
                        status = "APT FIXED";
                    }
                }
            }
            getCalendarEntryInfo.setStatus(status);
            getCalendarEntryInfo.status = status;
        } else if (latestStatus != null && !latestStatus.isEmpty()) {
            getCalendarEntryInfo.setStatus(latestStatus);
            getCalendarEntryInfo.status = latestStatus;
        } else {
            status = checkSalesList();
            getCalendarEntryInfo.setStatus(status);
            getCalendarEntryInfo.status = status;
        }

        if (getCalendarEntryInfo.status != null && !getCalendarEntryInfo.status.isEmpty()) {
            if (getCalendarEntryInfo.status.contains("(")) {
                getCalendarEntryInfo.status = getCalendarEntryInfo.status.substring(0, getCalendarEntryInfo.status.indexOf("("));
            }
            if (connectedRNR) {
                getCalendarEntryInfo.status = getCalendarEntryInfo.status + "(CONNECTED)";
            } else if (rnrConnected) {
                getCalendarEntryInfo.status = getCalendarEntryInfo.status + "(RNR)";
            } else if (checkRNR) {
                boolean truePredictive = ApplicationSettings.getPref(AppConstants.TRUE_PREDICTIVE, false);
                if (truePredictive) {
                    getCalendarEntryInfo.status = getCalendarEntryInfo.status + "(ALL RNR)";
                }
            }
        }

        if (ApplicationSettings.getPref(AFTER_CALL_NOTES, "") != null) {
            getCalendarEntryInfo.notes = ApplicationSettings.getPref(AFTER_CALL_NOTES, "");
        } else {
            getCalendarEntryInfo.notes = "";
        }

        if (customerNumber != null && !(customerNumber.isEmpty())) {
            getCalendarEntryInfo.caller_number = customerNumber;
        }

        getCalendarEntryInfo.user_id = SmarterSMBApplication.SmartUser.getId();
        getCalendarEntryInfo.latitude = Double.toString(latitude);
        getCalendarEntryInfo.longitude = Double.toString(longitude);

        if (subStatus1 != null) {
            getCalendarEntryInfo.subStatus1 = subStatus1;
            sub1 = subStatus1;
        } else {
            getCalendarEntryInfo.subStatus1 = "";
        }

        if (subStatus2 != null && !(subStatus2.isEmpty())) {
            sub2 = subStatus2;
            getCalendarEntryInfo.subStatus2 = subStatus2;
        } else {
            getCalendarEntryInfo.subStatus2 = "";
        }

        String createdAt = CommonUtils.getTimeFormatInISO(new Date());
        getCalendarEntryInfo.created_at = createdAt;

        if (radStarted) {
            Calendar calender = new GregorianCalendar(final_start_year, final_start_month, final_start_dayOfMonth, final_start_hour, final_start_min);
            nextFollowUpTime = calender.getTimeInMillis();

            if (nextFollowUpTime > 0) {
                Date startDate = new Date();
                startDate.setTime(nextFollowUpTime);
                String event_start_time = CommonUtils.getTimeFormatInISO(startDate);
                getCalendarEntryInfo.setEvent_start_date(event_start_time);
            } else if (status != null && !status.isEmpty() && status.equals("INTERESTED")) {
                Calendar cDtTm = Calendar.getInstance();

                final_start_year = cDtTm.get(Calendar.YEAR);
                final_start_month = cDtTm.get(Calendar.MONTH);
                final_start_dayOfMonth = cDtTm.get(Calendar.DAY_OF_MONTH);
                final_end_year = cDtTm.get(Calendar.YEAR);
                final_end_month = cDtTm.get(Calendar.MONTH);
                final_end_dayOfMonth = cDtTm.get(Calendar.DAY_OF_MONTH);

                calender = new GregorianCalendar(final_start_year, final_start_month, final_start_dayOfMonth, final_start_hour, final_start_min);
                nextFollowUpTime = calender.getTimeInMillis();

                if (nextFollowUpTime > 0) {
                    Date startDate = new Date();
                    startDate.setTime(nextFollowUpTime);
                    String event_start_time = CommonUtils.getTimeFormatInISO(startDate);
                    getCalendarEntryInfo.setEvent_start_date(event_start_time);
                }
            } else {
                getCalendarEntryInfo.setEvent_start_date("");
            }
        }

        getCalendarEntryInfo.extranotes = NotificationData.customerFeedback;
        if (NotificationData.remarks != null && !NotificationData.remarks.isEmpty()) {
            getCalendarEntryInfo.notes = NotificationData.remarks;
        } else {
            String notesText = getNotes(customerNumber);
            if (notesText != null && !notesText.isEmpty()) {
                getCalendarEntryInfo.notes = notesText;
            }
        }

        if(NotificationData.updatedCustomKVS != null && !NotificationData.updatedCustomKVS.isEmpty()) {
            getCalendarEntryInfo.customkvs = NotificationData.updatedCustomKVS;
        }

        long endTime = ApplicationSettings.getPref(AppConstants.CALL_END_TIME, 0l);
        long submitTime = ApplicationSettings.getPref(AppConstants.CALL_SUBMIT_TIME, 0l);
        long wrapUpTime = getTimeDifference(endTime, submitTime);
        getCalendarEntryInfo.wrapup = String.valueOf(wrapUpTime);

        String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
        if (questionsAct != null && !questionsAct.isEmpty()) {

            mmtStatus = ApplicationSettings.getPref(AppConstants.MMT_STATUS, "");
            mmtSubStatus1 = ApplicationSettings.getPref(AppConstants.MMT_SUBSTATUS, "");
            mmtNotes = ApplicationSettings.getPref(AppConstants.MMT_DURING_CALL_NOTES, "");

            if (mmtRedialScenario) {
                mmtStatus = mmtStatus + "(" + "REDIAL" + ")";
                mmtRedialScenario = false;
            }

            if (status != null && !status.isEmpty()) {
                mmtStatus = status;
            }

            if (mmtStatus.equals("")) {
                mmtStatus = "NEW DATA";
            } else {
                status = mmtStatus;
            }

            sub1 = mmtSubStatus1;
            getCalendarEntryInfo.status = mmtStatus;
            getCalendarEntryInfo.subStatus1 = mmtSubStatus1;
            if (callbackCheck) {
                getCalendarEntryInfo.subStatus2 = "CALLBACK";
            }
            getCalendarEntryInfo.notes = mmtNotes;

            if (!redialScenario) {

                ApplicationSettings.putPref(AppConstants.MMT_STATUS, "");
                ApplicationSettings.putPref(AppConstants.MMT_SUBSTATUS, "");
                ApplicationSettings.putPref(AppConstants.MMT_DURING_CALL_NOTES, "");
                getCalendarEntryInfo.appointment_id = mydbAppointmentId;
            } else {
                currentSalesStatus = mmtStatus;
                ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                ApplicationSettings.putPref("SUBJECT", currentSubject);
                ApplicationSettings.putLongPref("AppointmentId", NotificationData.appointment_db_id);
                getCalendarEntryInfo.appointment_id = ApplicationSettings.getPref(AFTER_CALL_APPOINTMENT_ID, "");
            }
        }

        String leadSource = NotificationData.leadSource;
        if (leadSource == null || leadSource.isEmpty()) {
            leadSource = getLeadSource(customerNumber);
        }
        getCalendarEntryInfo.lead_source = leadSource;

        String customerToContact = ApplicationSettings.getPref(CUSTOMER_TO_CONTACT, "");
        if (customerToContact == null || customerToContact.isEmpty()) {
            customerToContact = getCustomerToContact(customerNumber);
        }
        getCalendarEntryInfo.customer_id = customerToContact;

        getCalendarEntryInfo.transactionId = NotificationData.transactionId;
        extranote = getCalendarEntryInfo.extranotes;
        leadsrc = getCalendarEntryInfo.lead_source;
        wrapup = getCalendarEntryInfo.wrapup;
        eventstartdate = getCalendarEntryInfo.event_start_date;
        transactionid = getCalendarEntryInfo.transactionId;

        if (getCalendarEntryInfo.caller_number != null && !getCalendarEntryInfo.caller_number.isEmpty()) {
            JSONObject jsonObj = JSONParser.getJsonForSalesUpdate(getCalendarEntryInfo);
            if (mSocket != null && mSocket.connected()) {
                try {
                    String userId = ApplicationSettings.getPref(AppConstants.USERINFO_ID, "");
                    if (!userId.isEmpty()) {
                        mSocket.emit("sioforssu", userId, jsonObj.toString());
                    }
                } catch (Exception e) {
                    //System.out.println(e.getMessage());
                }
            }
        } else {
            if (radStarted) {
                getCalendarEntryInfo.caller_number = "00000000";
                getCalendarEntryInfo.status = "ALL RNR";
                JSONObject jsonObj = JSONParser.getJsonForSalesUpdate(getCalendarEntryInfo);
                if (mSocket != null && mSocket.connected()) {
                    try {
                        String userId = ApplicationSettings.getPref(AppConstants.USERINFO_ID, "");
                        if (!userId.isEmpty()) {
                            mSocket.emit("sioforssu", userId, jsonObj.toString());
                        }
                    } catch (Exception e) {
                        //System.out.println(e.getMessage());
                    }
                }
            } else {
                goToHomeScreen();
            }
        }
    }

    private String getNotes(String number) {
        String notes = "";
        try {
            MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
            SQLiteDatabase dbase = dbHelper.getWritableDatabase();
            if (number != null && !number.isEmpty()) {
                String selection = "TO1=" + "'" + number + "'";
                Cursor cursor = dbase.query("remindertbNew", null, selection, null, null, null, "UPDATED_AT DESC");
                if (cursor != null && cursor.getCount() > 0) {
                    cursor.moveToFirst();
                    notes = cursor.getString(cursor.getColumnIndex("NOTES"));
                }
                if (dbase.isOpen()) {
                    dbase.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return notes;
    }

    private String getCustomKVS(String number) {
        String notes = "";
        try {
            MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
            SQLiteDatabase dbase = dbHelper.getWritableDatabase();
            if (number != null && !number.isEmpty()) {
                String selection = "TO1=" + "'" + number + "'";
                Cursor cursor = dbase.query("remindertbNew", null, selection, null, null, null, "UPDATED_AT DESC");
                if (cursor != null && cursor.getCount() > 0) {
                    cursor.moveToFirst();
                    notes = cursor.getString(cursor.getColumnIndex("CUSTOMKVS"));
                }
                if (dbase.isOpen()) {
                    dbase.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return notes;
    }

    private String getSubstatus1(String number) {
        String substatus1 = "";
        try {
            MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
            SQLiteDatabase dbase = dbHelper.getWritableDatabase();
            String selection = "TO1=" + "'" + number + "'";
            Cursor cursor = dbase.query("remindertbNew", null, selection, null, null, null, "UPDATED_AT DESC");
            if (cursor != null && cursor.getCount() > 0) {
                cursor.moveToFirst();
                substatus1 = cursor.getString(cursor.getColumnIndex("SUBSTATUS1"));
            }
            if (dbase.isOpen()) {
                dbase.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return substatus1;
    }

    private String getSubstatus2(String number) {
        String substatus2 = "";
        try {
            MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
            SQLiteDatabase dbase = dbHelper.getWritableDatabase();
            String selection = "TO1=" + "'" + number + "'";
            Cursor cursor = dbase.query("remindertbNew", null, selection, null, null, null, "UPDATED_AT DESC");
            if (cursor != null && cursor.getCount() > 0) {
                cursor.moveToFirst();
                substatus2 = cursor.getString(cursor.getColumnIndex("SUBSTATUS2"));
            }
            if (dbase.isOpen()) {
                dbase.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return substatus2;
    }

    private String getReferredByText(String number) {
        String referredBy = "";
        try {
            MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
            SQLiteDatabase dbase = dbHelper.getWritableDatabase();
            if (number != null && !number.isEmpty()) {
                String selection = "TO1=" + "'" + number + "'";
                Cursor cursor = dbase.query("remindertbNew", null, selection, null, null, null, "UPDATED_AT DESC");
                if (cursor != null && cursor.getCount() > 0) {
                    cursor.moveToFirst();
                    referredBy = cursor.getString(cursor.getColumnIndex("REFERRED_BY"));
                }
                if (dbase.isOpen()) {
                    dbase.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return referredBy;
    }

    private String getLatestStatus(String number) {
        String latestStatus = "";
        try {
            MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
            SQLiteDatabase dbase = dbHelper.getWritableDatabase();
            String selection = "TO1=" + "'" + number + "'";
            Cursor cursor = dbase.query("remindertbNew", null, selection, null, null, null, "UPDATED_AT DESC");
            if (cursor != null && cursor.getCount() > 0) {
                cursor.moveToFirst();
                latestStatus = cursor.getString(cursor.getColumnIndex("STATUS"));
            }
            if (dbase.isOpen()) {
                dbase.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return latestStatus;
    }

    protected void processAfterCallConnected() {

        if (titleText != null && !titleText.isEmpty()) {
            titleLayout.setVisibility(View.VISIBLE);
            if (titleText.startsWith("<html>")) {
                showTitleWebView();
            } else {
                showTitleTextView();
            }
        }

        processAfterCallConnected = true;

        String noOfCustomersToCall = ApplicationSettings.getPref(AppConstants.NO_OF_CUSTOMERS_TO_CALL, "");
        if (noOfCustomersToCall != null && !noOfCustomersToCall.isEmpty() && !ServiceHandler.callDisconnected) {
            customersListLayout.setVisibility(View.VISIBLE);
            customerDetailsList = new ArrayList<>();
            String customersListViewData = ApplicationSettings.getPref(AppConstants.CUSTOMER_LIST_DATA, "");
            CustomerLite[] listOfCustomers = new Gson().fromJson(customersListViewData, CustomerLite[].class);
            if (listOfCustomers != null && listOfCustomers.length > 0) {
                Collections.addAll(customerDetailsList, listOfCustomers);
            }

            String connectedNumber = ApplicationSettings.getPref(AppConstants.CONNECTED_CUSTOMER, "");
            CustomerLite customerLite = null;
            List<CustomerLite> tempCustomerDetailsList = null;
            if (connectedNumber != null && !connectedNumber.isEmpty() && customerDetailsList != null && customerDetailsList.size() > 0) {
                if (connectedNumber.contains("")) {
                    connectedNumber = connectedNumber.replaceAll("\\s+", "");
                }
                if (connectedNumber != null && !connectedNumber.isEmpty() && !connectedNumber.startsWith("+")) {
                    connectedNumber = "+" + connectedNumber;
                }

                if (customerDetailsList != null && customerDetailsList.size() > 0) {
                    for (int i = 0; i < customerDetailsList.size(); i++) {
                        if (customerDetailsList.get(i).customerNumber.contains(connectedNumber)) {
                            connectedNumberInList = true;
                        }
                    }
                }

                if (!connectedNumberInList) {
                    return;
                }

                for (int i = 0; i < customerDetailsList.size(); i++) {
                    customerLite = customerDetailsList.get(i);
                    if (customerLite.type.isEmpty()) {
                        customerLite.type = "RNR";
                    }
                    if (customerLite.notes != null && !customerLite.notes.isEmpty() && !customerLite.notes.equals("null")) {
                        customerLite.notes = "";
                    }
                    if (customerLite.customerNumber.equals(connectedNumber)) {
                        tempCustomerDetailsList = new ArrayList<>();
                        customerLite.type = "Connected";
                        SmarterSMBApplication.agentIsInConnectingState = false;
                        statusString = customerLite.status;
                        if (customerLite.customerName == null || customerLite.customerName.isEmpty()) {
                            customerLite.customerName = "No Name";
                        }
                        tempCustomerDetailsList.add(0, customerLite);
                        setConnectedCustomerDetails(customerLite);
                        ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER_NAME, customerLite.customerName);

                        boolean hybridEndpoint = ApplicationSettings.getPref(AppConstants.C2C_HYBRID_ENDPOINT, false);
                        if (!hybridEndpoint) {
                            break;
                        }
                    }
                }

                String customerListData = new Gson().toJson(customerDetailsList);
                ApplicationSettings.putPref(AppConstants.CUSTOMER_LIST_DATA, "");
                ApplicationSettings.putPref(AppConstants.CUSTOMER_LIST_DATA, customerListData);
                //System.out.print(customerListData);

                rnrCallsList = new ArrayList<>();

                if (listOfCustomers != null && listOfCustomers.length > 0) {
                    for (int i = 0; i < listOfCustomers.length; i++) {
                        customerLite = customerDetailsList.get(i);
                        String typeOfCall = customerLite.type;
                        if (typeOfCall != null && !typeOfCall.isEmpty() && typeOfCall.equals("RNR")) {
                            rnrCallsList.add(customerLite);
                        }
                    }
                    putRNRCallDetailsToDb(rnrCallsList);
                }

                String qanda = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");

                layout5.setVisibility(View.GONE);
                formButtonLayout.setVisibility(View.GONE);

                flp_layout.setVisibility(View.GONE);
                acpBottomLayout.setVisibility(View.GONE);
                nameNumberRelativeLayout.setVisibility(View.GONE);
                pan_available_layout.setVisibility(View.GONE);
                remarks.setVisibility(View.GONE);

                if (!leadSheetAttached && (qanda == null || qanda.isEmpty())) {
                    acpBottomLayout.setVisibility(View.GONE);
                    if (mRecyclerView != null)
                        mRecyclerView.removeAllViews();
                    mRecyclerView = findViewById(R.id.my_recycler_view);
                    mRecyclerView.setHasFixedSize(true);
                    LinearLayoutManager mLayoutManager = new LinearLayoutManager(this);
                    mRecyclerView.setLayoutManager(mLayoutManager);
                    AutoDialListAdapter mAdapter = new AutoDialListAdapter(tempCustomerDetailsList);
                    mRecyclerView.setAdapter(mAdapter);
                    mAdapter.notifyDataSetChanged();
                } else if (!leadSheetAttached && (qanda != null && !qanda.isEmpty() && !qanda.equals("null"))) {
                    String statusArr[] = CommonUtils.getsubStatusFromReminderTable(this, connectedCustomer);
                    if (statusArr != null && statusArr.length > 1) {
                    }
                    if (NotificationData.statusString != null && !NotificationData.statusString.equals("NEW DATA")) {
                        customersListLayout.setVisibility(View.VISIBLE);
                        setEndCallButtonLayoutVisibility();
                        if (mRecyclerView != null)
                            mRecyclerView.removeAllViews();
                        mRecyclerView = findViewById(R.id.my_recycler_view);
                        mRecyclerView.setHasFixedSize(true);
                        LinearLayoutManager mLayoutManager = new LinearLayoutManager(this);
                        mRecyclerView.setLayoutManager(mLayoutManager);
                        AutoDialListAdapter mAdapter = new AutoDialListAdapter(tempCustomerDetailsList);
                        mRecyclerView.setAdapter(mAdapter);
                        mAdapter.notifyDataSetChanged();
                    } else {
                        llAfterCall.setVisibility(View.VISIBLE);
                        customersListLayout.setVisibility(View.GONE);
                        handleQuestionnaireAndACP();
                    }
                } else {
                    flp_layout.setVisibility(View.VISIBLE);
                    acpBottomLayout.setVisibility(View.VISIBLE);
                    nameNumberRelativeLayout.setVisibility(View.VISIBLE);
                    pan_available_layout.setVisibility(View.VISIBLE);
                    remarks.setVisibility(View.VISIBLE);
                }
            } else {
                layout5.setVisibility(View.GONE);
                formButtonLayout.setVisibility(View.GONE);

                flp_layout.setVisibility(View.GONE);
                acpBottomLayout.setVisibility(View.GONE);
                nameNumberRelativeLayout.setVisibility(View.GONE);
                pan_available_layout.setVisibility(View.GONE);
                remarks.setVisibility(View.GONE);

                if (!leadSheetAttached) {
                    acpBottomLayout.setVisibility(View.GONE);
                    mRecyclerView = findViewById(R.id.my_recycler_view);
                    mRecyclerView.setHasFixedSize(true);
                    LinearLayoutManager mLayoutManager = new LinearLayoutManager(this);
                    mRecyclerView.setLayoutManager(mLayoutManager);
                    AutoDialListAdapter mAdapter = new AutoDialListAdapter(customerDetailsList);
                    mRecyclerView.setAdapter(mAdapter);
                    mAdapter.notifyDataSetChanged();
                } else {
                    flp_layout.setVisibility(View.VISIBLE);
                    acpBottomLayout.setVisibility(View.VISIBLE);
                    nameNumberRelativeLayout.setVisibility(View.VISIBLE);
                    pan_available_layout.setVisibility(View.VISIBLE);
                    remarks.setVisibility(View.VISIBLE);
                }
            }
        } else {
            llAfterCall.setVisibility(View.VISIBLE);

            noOfCustomersToCall = ApplicationSettings.getPref(AppConstants.NO_OF_CUSTOMERS_TO_CALL, "");
            if (noOfCustomersToCall != null && !noOfCustomersToCall.isEmpty()) {
                customersListLayout.setVisibility(View.VISIBLE);
                setEndCallButtonLayoutVisibility();
            } else {
                customersListLayout.setVisibility(View.GONE);
                endCallButtonLayout.setVisibility(View.GONE);
            }

            layout5.setVisibility(View.VISIBLE);
            submitLayout.setVisibility(View.GONE);
            formButtonLayout.setVisibility(View.VISIBLE);
            handleQuestionnaireAndACP();
        }

        if (shouldRecord()) {
            if (connectedCustomer != null && !connectedCustomer.isEmpty()) {
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        Intent intent = getIntent();
                        if (intent != null) {
                            if (intent.hasExtra("callrecording")) {
                                String callrecording = intent.getStringExtra("callrecording");
                                if (callrecording != null && !callrecording.isEmpty() && callrecording.equalsIgnoreCase("completed")) {
                                    return;
                                }
                            } else {
                                Intent recorderIntent = new Intent(activity, RecorderService.class);
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                                    activity.startForegroundService(recorderIntent);
                                } else {
                                    activity.startService(recorderIntent);
                                }
                            }
                        } else {
                            Intent recorderIntent = new Intent(activity, RecorderService.class);
                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                                activity.startForegroundService(recorderIntent);
                            } else {
                                activity.startService(recorderIntent);
                            }
                        }
                    }
                }).start();
            }
        }
    }

    private boolean shouldRecord() {
        if (ApplicationSettings.getPref(AppConstants.SETTING_CALL_RECORDING_STATE, false)) {
            return true;
        } else {
            return false;
        }
    }

    private void setConnectedCustomerDetails(CustomerLite customerLite) {
        ratingsCustomerDetailsName.setText(customerLite.customerName);
        ratingsCustomerDetailsStatus.setText(customerLite.status);
        ratingsCustomerDetailsSubstatus1.setText(customerLite.substatus1);
        ratingsCustomerDetailsSubstatus2.setText(customerLite.substatus2);
        ratingsCustomerDetailsNotes.setText(customerLite.notes);

        freeNumberCustomerDetailsName.setText(customerLite.customerName);
        freeNumberCustomerDetailsStatus.setText(customerLite.status);
        freeNumberCustomerDetailsSubstatus1.setText(customerLite.substatus1);
        freeNumberCustomerDetailsSubstatus2.setText(customerLite.substatus2);
        freeNumberCustomerDetailsNotes.setText(customerLite.notes);

        freeTextCustomerDetailsName.setText(customerLite.customerName);
        freeTextCustomerDetailsStatus.setText(customerLite.status);
        freeTextCustomerDetailsSubstatus1.setText(customerLite.substatus1);
        freeTextCustomerDetailsSubstatus2.setText(customerLite.substatus2);
        freeTextCustomerDetailsNotes.setText(customerLite.notes);

        searchableDropdownCustomerDetailsName.setText(customerLite.customerName);
        searchableDropdownCustomerDetailsStatus.setText(customerLite.status);
        searchableDropdownCustomerDetailsSubstatus1.setText(customerLite.substatus1);
        searchableDropdownCustomerDetailsSubstatus2.setText(customerLite.substatus2);
        searchableDropdownCustomerDetailsNotes.setText(customerLite.notes);

        multiSelectionDropdownCustomerDetailsName.setText(customerLite.customerName);
        multiSelectionDropdownCustomerDetailsStatus.setText(customerLite.status);
        multiSelectionDropdownCustomerDetailsSubstatus1.setText(customerLite.substatus1);
        multiSelectionDropdownCustomerDetailsSubstatus2.setText(customerLite.substatus2);
        multiSelectionDropdownCustomerDetailsNotes.setText(customerLite.notes);

        dropdownCustomerDetailsName.setText(customerLite.customerName);
        dropdownCustomerDetailsStatus.setText(customerLite.status);
        dropdownCustomerDetailsSubstatus1.setText(customerLite.substatus1);
        dropdownCustomerDetailsSubstatus2.setText(customerLite.substatus2);
        dropdownCustomerDetailsNotes.setText(customerLite.notes);

        buttonsCustomerDetailsName.setText(customerLite.customerName);
        buttonsCustomerDetailsStatus.setText(customerLite.status);
        buttonsCustomerDetailsSubstatus1.setText(customerLite.substatus1);
        buttonsCustomerDetailsSubstatus2.setText(customerLite.substatus2);
        buttonsCustomerDetailsNotes.setText(customerLite.notes);

        isInterestedCustomerDetailsName.setText(customerLite.customerName);
        isInterestedCustomerDetailsStatus.setText(customerLite.status);
        isInterestedCustomerDetailsSubstatus1.setText(customerLite.substatus1);
        isInterestedCustomerDetailsSubstatus2.setText(customerLite.substatus2);
        isInterestedCustomerDetailsNotes.setText(customerLite.notes);
        dateTimeCustomerDetailsName.setText(customerLite.customerName);
        dateTimeCustomerDetailsStatus.setText(customerLite.status);
        dateTimeCustomerDetailsSubstatus1.setText(customerLite.substatus1);
        dateTimeCustomerDetailsSubstatus2.setText(customerLite.substatus2);
        dateTimeCustomerDetailsNotes.setText(customerLite.notes);

        uploadAttachmentCustomerDetailsName.setText(customerLite.customerName);
        uploadAttachmentCustomerDetailsStatus.setText(customerLite.status);
        uploadAttachmentCustomerDetailsSubstatus1.setText(customerLite.substatus1);
        uploadAttachmentCustomerDetailsSubstatus2.setText(customerLite.substatus2);
        uploadAttachmentCustomerDetailsNotes.setText(customerLite.notes);

        followupCustomerDetailsName.setText(customerLite.customerName);
        followupCustomerDetailsStatus.setText(customerLite.status);
        followupCustomerDetailsSubstatus1.setText(customerLite.substatus1);
        followupCustomerDetailsSubstatus2.setText(customerLite.substatus2);
        followupCustomerDetailsNotes.setText(customerLite.notes);
    }

    private void handleQuestionnaireAndACP() {
        if(SmarterSMBApplication.cloud2IncomingCall && !SmarterSMBApplication.endCallButtonClicked){
            NotificationData.customKVS = "";
            NotificationData.dialledCustomerNumber = "";
            questionCount = 0;

            if (SmarterSMBApplication.endCallButtonClicked) {
                NotificationData.isSocketResponse = false;
            }
            connectingText2 = findViewById(R.id.connectingText2);
            connectingText1 = findViewById(R.id.connectingText1);

                SmarterSMBApplication.callStateIsDisconnected = false;
                SmarterSMBApplication.incomingCallRejectedByAgent = false;
                SmarterSMBApplication.autoCallDisconnected = false;
                ServiceHandler.callDisconnected = false;

                if (ApplicationSettings.containsPref(AppConstants.CONNECTED_TEXT)) {
                    String connectedTextStr = ApplicationSettings.getPref(AppConstants.CONNECTED_TEXT, "");
                    if (connectedTextStr != null && !connectedTextStr.isEmpty() && !connectedTextStr.equals("null")) {
                        String[] connectedTextStrArr = connectedTextStr.split("\\|");
                        connection_status.setText(connectedTextStrArr[0].toString());
                        connectingText1.setText(connectedTextStrArr[1].toString());
                        connectingText2.setText(connectedTextStrArr[2].toString());
                        endCallButtonLayout.setVisibility(View.VISIBLE);
                        muteCallButton.setVisibility(View.VISIBLE);
                        launchAppButton.setVisibility(View.VISIBLE);
                        getInfo.setVisibility(View.GONE);
                    }
                }

                getCustomInfoLayout.setVisibility(View.VISIBLE);
                customersInfoLayout.setVisibility(View.GONE);
                titleLayout.setVisibility(View.GONE);
                customkvsLayout.setVisibility(View.GONE);

                String qanda = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");
                if (qanda != null && !qanda.isEmpty() && !qanda.equals("null")) {
                    layout5.setVisibility(View.VISIBLE);
                    submitLayout.setVisibility(View.GONE);
                    nextButton.setVisibility(View.VISIBLE);
                    previousButton.setVisibility(View.VISIBLE);
                    radMessageLayout.setVisibility(View.GONE);
                    radMessageText.setVisibility(View.GONE);
                    formButtonLayout.setVisibility(View.VISIBLE);
                    SmarterSMBApplication.currentAppState = "Connected";
                    SmarterSMBApplication.agentIsInConnectingState = false;
                    //Log.d("PredictiveTesting", "showQuestionnaireForInboundCall() Outside");
                    //getCustomInfoLayout.setVisibility(View.GONE);
                    showQuestionnaireForInboundCall();
                } else {
                    layout5.setVisibility(View.GONE);
                    submitLayout.setVisibility(View.GONE);
                    nextButton.setVisibility(View.GONE);
                    previousButton.setVisibility(View.GONE);
                    nameNumberRelativeLayout.setVisibility(View.GONE);
                    flp_layout.setVisibility(View.GONE);
                    acpBottomLayout.setVisibility(View.GONE);
                }

//                if (!ServiceHandler.callDisconnected) {
//                    if (NotificationData.customKVS != null && !NotificationData.customKVS.isEmpty() && !NotificationData.customKVS.equals("null")) {
//                        if (customkvsText != null) {
//                            customkvsText.loadDataWithBaseURL(null, NotificationData.customKVS, "text/html", "utf-8", null);
//                            customkvsLayout.setVisibility(View.VISIBLE);
//                            customkvsText.setVisibility(View.VISIBLE);
//                        }
//                    }
//                }

        } else {
            if (SmarterSMBApplication.currentAppState != null && !SmarterSMBApplication.currentAppState.isEmpty() && (SmarterSMBApplication.currentAppState.equalsIgnoreCase("Connecting"))) {
                connectingText1 = findViewById(R.id.connectingText1);
                connectingText2 = findViewById(R.id.connectingText2);
                connection_status.setText("Connecting..");
                connectingText1.setText("Wait we are reaching out");
                connectingText2.setText("If you are in a conversation and haven't received any details Click on");
                getInfo.setVisibility(View.VISIBLE);
                layout5.setVisibility(View.GONE);
                nextButton.setVisibility(View.GONE);
                previousButton.setVisibility(View.GONE);
                if(SmarterSMBApplication.postInboundDataToServer) {
                    SmarterSMBApplication.postInboundDataToServer = false;
                    NotificationData.leadSource = "";
                    postInboundCallDataInOutboundScenario();
                }
            }
            if (NotificationData.dialledCustomerNumber == null || NotificationData.dialledCustomerNumber.isEmpty()) {
                checkRNR = true;
            }
            String questionStr = "";
            if (nextButtonClicked) {
                salesStageUpdated = false;
                navigateBackAndStop = true;
                ServiceHandler.callDisconnected = false;
                questionStr = currentQuestionnaire;
            } else {
                questionStr = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");
            }

            getAndSetLastElementTypeAndValue();

            String qanda = "";
            try {
                if (questionStr != null && !questionStr.isEmpty() && questionStr.startsWith("{")) {
                    JSONObject jsonObj = new JSONObject(questionStr);
                    if (jsonObj.has("lookupcolumn")) {
                        String lookupcolumn = jsonObj.getString("lookupcolumn");
                        if (redialScenario) {
                            currentSalesStatus = ApplicationSettings.getPref(AppConstants.MMT_STATUS, "");
                            currentSubject = ApplicationSettings.getPref("SUBJECT", "");
                        }
                        switch (currentSalesStatus) {
                            case "NEW DATA":
                                qanda = getLookUpValue(currentSalesStatus);
                                break;

                            case "APT FIXED":
                                qanda = getAptFixedType(currentSalesStatus, currentSubject);
                                break;

                            case "APT RESCHEDULE":
                                qanda = getLookUpValue(currentSalesStatus);
                                break;

                            case "APT CONFIRM":
                                qanda = getAptFixedType(currentSalesStatus, currentSubject);
                                break;

                            case "CLOSED":
                                qanda = getLookUpValue(currentSalesStatus);
                                break;
                        }
                    } else {
                        if (nextButtonClicked) {
                            qanda = currentQuestionnaire;
                        } else {
                            qanda = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");
                        }
                    }
                } else {
                    if (nextButtonClicked) {
                        qanda = currentQuestionnaire;
                    } else {
                        String cloudNumber2 = ApplicationSettings.getPref(AppConstants.CLOUD_OUTGOING2, "");

                        if (SmarterSMBApplication.cloud2IncomingCall) {
                            qanda = ApplicationSettings.getPref("CLOUDNUMBER2QUES", "");
                        } else {
                            qanda = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");
                        }
                        //qanda = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");
                    }
                }
            } catch (Throwable t) {
                Log.e("MyApp2", "Could not parse malformed JSON: \"" + questionStr + "\"");
            }

            String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
            if (qanda != null && !qanda.isEmpty() && !qanda.equals("null")) {
                if ((questionsAct != null && !questionsAct.isEmpty()) || (NotificationData.statusString != null && NotificationData.statusString.equals("NEW DATA")) || redialScenario) {
                    if (!qanda.equals("null")) {
                        try {
                            rootArrayData = new JSONArray(qanda);
                            rootArrayDataOrg = rootArrayData;
                            decisionArrayList = new ArrayList<String>();
                            if(decisionArrayList != null && !decisionArrayList.contains(rootArrayDataOrg)) {
                                decisionArrayList.add(rootArrayDataOrg.toString());
                            }
                            JSONObject jsonobject = rootArrayData.getJSONObject(questionCount);
                            if (jsonobject.has("q")) {
                                rootQ = jsonobject.getString("q");
                                nestedQuesHash.put(rootQ, rootArrayData.toString());
                                indexQuesHash.put(rootQ, questionCount);
                            }
                            if (jsonobject.has("at")) {
                                rootR = jsonobject.getString("at");
                                currentObject = rootR;
                            }
                            if (jsonobject.has("a")) {
                                rootA = jsonobject.getString("a");
                            }
                            if (jsonobject.has("last-updated")) {
                                rootLastUpdate = jsonobject.getString("last-updated");
                            }
                            if (jsonobject.has("value")) {
                                rootValue = jsonobject.getString("value");
                            }
                            if (jsonobject.has("mandatory")) {
                                mandatory = jsonobject.getString("mandatory");
                                if (mandatory != null && !mandatory.isEmpty() && mandatory.equalsIgnoreCase("y")) {
                                    SmarterSMBApplication.isCurrentQuesMandatory = true;
                                } else {
                                    SmarterSMBApplication.isCurrentQuesMandatory = false;
                                }
                            } else {
                                SmarterSMBApplication.isCurrentQuesMandatory = false;
                            }

                            if (jsonobject.has("decision")) {
                                decision = jsonobject.getString("decision");
                                if (decision != null && !decision.isEmpty() && decision.equalsIgnoreCase("y")) {
                                    SmarterSMBApplication.isDecisionMakingQues = true;
                                    String currentSelectedVal = String.valueOf(questionAnswerHash.get(rootQ));
                                    if(currentSelectedVal != null && !currentSelectedVal.isEmpty()){
                                        SmarterSMBApplication.currentSelectedValue = currentSelectedVal;
                                    }
                                } else {
                                    SmarterSMBApplication.isDecisionMakingQues = false;
                                }
                            } else {
                                SmarterSMBApplication.isDecisionMakingQues = false;
                            }

                            if (jsonobject.has("action_type")) {
                                actionType = jsonobject.getString("action_type");
                                actionTypeHash.put(rootQ, actionType);
                            }

                            if (jsonobject.has("title")) {
                                titleText = jsonobject.getString("title");
                            }
                            if (NotificationData.isSocketResponse) {
                                if (titleText != null && !titleText.isEmpty()) {
                                    titleLayout.setVisibility(View.VISIBLE);
                                    if (titleText.startsWith("<html>")) {
                                        showTitleWebView();
                                    } else {
                                        showTitleTextView();
                                    }
                                }
                            }
                            if (jsonobject.has("hint")) {
                                hintText = jsonobject.getString("hint");
                            }
                            if (jsonobject.has("dd_data")) {
                                dropDownData = jsonobject.getString("dd_data");
                                if (dropDownData != null && dropDownData.length() > 0) {
                                    dropDownHash.put(rootQ, dropDownData);
                                }
                            }

                            if (jsonobject.has("sdd_data")) {
                                searchableDropDownData = jsonobject.getString("sdd_data");
                                if (searchableDropDownData != null && searchableDropDownData.length() > 0) {
                                    searchableDropDownHash.put(rootQ, searchableDropDownData);
                                }
                            }
                            if (jsonobject.has("msdd_data")) {
                                multiSelectionDropDownData = jsonobject.getString("msdd_data");
                                if (multiSelectionDropDownData != null && multiSelectionDropDownData.length() > 0) {
                                    multiSelectionDropDownHash.put(rootQ, multiSelectionDropDownData);
                                }
                            }
                            if (jsonobject.has("cb_data")) {
                                checkboxData = jsonobject.getString("cb_data");
                                if (checkboxData != null && checkboxData.length() > 0) {
                                    checkboxHash.put(rootQ, checkboxData);
                                }
                            }
                            if (jsonobject.has("bt_data")) {
                                buttonData = jsonobject.getString("bt_data");
                                if (buttonData != null && buttonData.length() > 0) {
                                    buttonHash.put(rootQ, buttonData);
                                }
                            }
                            if (jsonobject.has("rb_data")) {
                                radiobuttonData = jsonobject.getString("rb_data");
                                if (radiobuttonData != null && radiobuttonData.length() > 0) {
                                    radiobuttonHash.put(rootQ, radiobuttonData);
                                }
                            }
                            if (jsonobject.has("status")) {
                                if (!checkRNR && !ServiceHandler.callDisconnected && !redialScenario) {
                                    status = jsonobject.getString("status");
                                    mmtStatus = status;
                                    ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                                }
                            }

                            if (jsonobject.has("min_value")) {
                                min = Integer.parseInt(jsonobject.getString("min_value"));
                            }
                            if (jsonobject.has("max_value")) {
                                max = Integer.parseInt(jsonobject.getString("max_value"));
                            }

                            if (jsonobject.has("max_yes")) {
                                max_yes = Integer.parseInt(jsonobject.getString("max_yes"));
                            }
                            if (jsonobject.has("max_yes_action")) {
                                max_yes_action = jsonobject.getString("max_yes_action");
                            }
                            if (jsonobject.has("cb_action")) {
                                cb_action = jsonobject.getString("cb_action");
                            }
                            if (jsonobject.has("next_action")) {
                                JSONObject nextActionObj = jsonobject.getJSONObject("next_action");
                                if(nextActionObj != null &&  nextActionObj.has("post_url")){
                                    next_action = String.valueOf(nextActionObj.get("post_url"));
                                }
                            } else {
                                next_action = "";
                            }
                            questionnaireHash.put(rootQ, rootR);
                            if(tempQuesList != null && !tempQuesList.contains(rootQ)) {
                                tempQuesList.add(questionCount, rootQ);
                            }
                            tempQnAHash.put(rootQ, rootR);
                            if (titleText != null && !titleText.isEmpty()) {
                                titleQHash.put(rootQ, titleText);
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                            layout5.setVisibility(View.GONE);
                            nextButton.setVisibility(View.GONE);
                            previousButton.setVisibility(View.GONE);
                            disableCallOptions();
                        }
                    } else {
                        customerRatings.setVisibility(View.GONE);
                        ratingsView.setVisibility(View.GONE);
                        nextButton.setVisibility(View.GONE);
                        previousButton.setVisibility(View.GONE);
                        disableCallOptions();
                        ratingsLayout.setVisibility(View.GONE);
                        formButtonLayout.setVisibility(View.GONE);
                        freeNumberLayout.setVisibility(View.GONE);
                        freeTextLayout.setVisibility(View.GONE);
                        searchableDropDownLayout.setVisibility(View.GONE);
                        multiSelectionDropDownLayout.setVisibility(View.GONE);
                        dropdownLayout.setVisibility(View.GONE);
                        checkboxLayout.setVisibility(View.GONE);
                        buttonsLayout.setVisibility(View.GONE);
                        radiobuttonsLayout.setVisibility(View.GONE);
                        isInterestedLayout.setVisibility(View.GONE);
                        dateTimeLayout.setVisibility(View.GONE);
                        followupLayout.setVisibility(View.GONE);
                        uploadAttachmentLayout.setVisibility(View.GONE);
                        callManagerLayout.setVisibility(View.GONE);
                    }

                    if (ServiceHandler.callDisconnected) {
                        hideTitleTextViewAndWebView();
                        if (statusGetInfoRelativeLayout != null) {
                            statusGetInfoRelativeLayout.setVisibility(View.GONE);
                        }
                        boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
                        if (sequencialEndpoint) {
                            showACPScreenSequencial();
                        } else {
                            if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty()) {
                                if (ApplicationSettings.containsPref(AppConstants.PARALLEL_GROUP_SIZE)) {
                                    String parallelGroupSize = ApplicationSettings.getPref(AppConstants.PARALLEL_GROUP_SIZE, "");
                                    if (parallelGroupSize != null && !parallelGroupSize.isEmpty()) {
                                        showACPScreenSequencial();
                                    } else {
                                        showACPScreen();
                                    }
                                } else {
                                    showACPScreen();
                                }
                            } else {
                                showACPScreen();
                            }
                        }
                    } else {
                        if (leadSheetAttachCancel || leadSheetAttached) {
                            flp_layout.setVisibility(View.VISIBLE);
                            acpBottomLayout.setVisibility(View.VISIBLE);
                            nameNumberRelativeLayout.setVisibility(View.VISIBLE);
                            pan_available_layout.setVisibility(View.VISIBLE);
                            remarks.setVisibility(View.VISIBLE);
                            layout5.setVisibility(View.GONE);
                            formButtonLayout.setVisibility(View.GONE);
                            endCallButtonLayout.setVisibility(View.GONE);
                            leadSheetAttachCancel = false;
                        } else {
                            flp_layout.setVisibility(View.GONE);
                            acpBottomLayout.setVisibility(View.GONE);
                            nameNumberRelativeLayout.setVisibility(View.GONE);
                            if (customerNumber != null && customerNumber.isEmpty()) {
                                if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
                                    boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
                                    if (ibControl) {

                                    }
                                } else {
                                    String cloudNumber2 = ApplicationSettings.getPref(AppConstants.CLOUD_OUTGOING2, "");
                                    if (SmarterSMBApplication.cloud2IncomingCall) {

                                    } else {
                                        nextButton.setVisibility(View.GONE);
                                        previousButton.setVisibility(View.GONE);
                                        disableCallOptions();
                                    }

                                }
                            }

                            formButtonLayout.setVisibility(View.VISIBLE);
                            if (rootR.equalsIgnoreCase("RT")) {
                                ratingsLayout();
                            } else if (rootR.equalsIgnoreCase("FT") || rootR.equalsIgnoreCase("EMAIL") || rootR.equalsIgnoreCase("BLANK")) {
                                freeTextLayout();
                            } else if (rootR.equalsIgnoreCase("CALLPM")) {
                                callManagerLayout();
                            } else if (rootR.equalsIgnoreCase("DD")) {
                                dropDownLayout();
                            } else if (rootR != null && rootR.equalsIgnoreCase("CB")) {
                                checkBoxLayout();
                            } else if (rootR.equalsIgnoreCase("BT")) {
                                buttonLayout();
                            } else if (rootR.equalsIgnoreCase("RB")) {
                                radiobuttonLayout();
                            } else if (rootR.equalsIgnoreCase("NP")) {
                                numberpickerLayout();
                            } else if (rootR.equalsIgnoreCase("YN")) {
                                yesNoLayout();
                            } else if (rootR.equalsIgnoreCase("DATETIME") || rootR.equalsIgnoreCase("DATE")) {
                                dateTimeLayout();
                            } else if (rootR.equalsIgnoreCase("FLP")) {
                                followUpLayout();
                            } else if (rootR.equalsIgnoreCase("FN") || rootR.equalsIgnoreCase("SMS")) {
                                freeNumberLayout();
                            } else if (rootR.equalsIgnoreCase("SDD")) {
                                searchableDropdownLayout();
                            } else if (rootR.equalsIgnoreCase("MSDD")) {
                                multiSelectionDropdownLayout();
                            } else if (rootR.equalsIgnoreCase("ATTACHMENT")) {
                                attachmentLayout();
                            }
                            uView.setVisibility(View.GONE);
                            allianceSalesStage.setVisibility(View.GONE);
                        }
                    }
                } else {
                    boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
                    if (sequencialEndpoint) {
                        showACPScreenSequencial();
                    } else {
                        if (ServiceHandler.callDisconnected) {
                            showACPScreen();
                        } else {
                            layout5.setVisibility(View.GONE);
                            submitLayout.setVisibility(View.GONE);
                            nextButton.setVisibility(View.GONE);
                            previousButton.setVisibility(View.GONE);
                            disableCallOptions();
                            nameNumberRelativeLayout.setVisibility(View.GONE);
                            flp_layout.setVisibility(View.GONE);
                            acpBottomLayout.setVisibility(View.GONE);
                        }
                    }
                    performInterestedAction();
                }
            } else {
                boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
                if (sequencialEndpoint) {
                    showACPScreenSequencial();
                } else {
                    if (ServiceHandler.callDisconnected) {
                        showACPScreen();
                    } else {
                        layout5.setVisibility(View.GONE);
                        submitLayout.setVisibility(View.GONE);
                        nextButton.setVisibility(View.GONE);
                        previousButton.setVisibility(View.GONE);
                        disableCallOptions();
                        nameNumberRelativeLayout.setVisibility(View.GONE);
                        flp_layout.setVisibility(View.GONE);
                        acpBottomLayout.setVisibility(View.GONE);
                    }
                }
                performInterestedAction();
            }
        }
    }

    private void getAndSetLastElementTypeAndValue() {

        if (questionAnswerHash != null && !questionAnswerHash.isEmpty()){
            Set<Map.Entry<String, String>> questionAnswerHashEntrySet = questionAnswerHash.entrySet();
            ArrayList<Map.Entry<String, String>> questionAnswerHashArrayList = new ArrayList<Map.Entry<String, String>>(questionAnswerHashEntrySet);

            if(questionAnswerHashArrayList != null && questionAnswerHashArrayList.size() > 0){
                int lastIndex = questionAnswerHashArrayList.size() - 1;
                String lastIndexKey = questionAnswerHashArrayList.get(lastIndex).getKey();
                String lastIndexValue = questionAnswerHashArrayList.get(lastIndex).getValue();
                String lastIndexType = String.valueOf(tempQnAHash.get(lastIndexKey));

                if(lastIndexType != null && !lastIndexType.isEmpty()){
                    if(lastIndexType.equalsIgnoreCase("DD")){
                        dropDownValueFromList = lastIndexValue;
                    } else if(lastIndexType.equalsIgnoreCase("FT")){
                        customerExperience.setText(lastIndexValue);
                    } else if(lastIndexType.equalsIgnoreCase("FN")){
                        freeNumber.setText(lastIndexValue);
                    }
                }
            }
        }

    }

    private void showQuestionnaireForInboundCall() {
        String qanda = "";
        String cloudNumber2 = ApplicationSettings.getPref(AppConstants.CLOUD_OUTGOING2, "");

        if (SmarterSMBApplication.cloud2IncomingCall) {
            NotificationData.dialledCustomerNumber = "";
            NotificationData.dialledCustomerName = "";
            NotificationData.customerFeedback = "";
            NotificationData.leadSource = "";
            NotificationData.statusString = "";
            NotificationData.customKVS = "";
            SmarterSMBApplication.outgoingCallNotInStartMode = false;
            if(UearnActivity.redialScenario){
                SmarterSMBApplication.endCallButtonClicked = false;
            }
            qanda = ApplicationSettings.getPref("CLOUDNUMBER2QUES", "");
        }else{
            qanda = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");
        }


        String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
        if (qanda != null && !qanda.isEmpty() && !qanda.equals("null")) {
            if (!qanda.equals("null")) {
                try {
                    rootArrayData = new JSONArray(qanda);
                    rootArrayDataOrg = rootArrayData;
                    if(decisionArrayList != null && !decisionArrayList.contains(rootArrayDataOrg)) {
                        decisionArrayList.add(rootArrayDataOrg.toString());
                    }
                    JSONObject jsonobject = rootArrayData.getJSONObject(questionCount);
                    if (jsonobject.has("q")) {
                        rootQ = jsonobject.getString("q");
                        nestedQuesHash.put(rootQ, rootArrayData.toString());
                        indexQuesHash.put(rootQ, questionCount);
                    }
                    if (jsonobject.has("at")) {
                        rootR = jsonobject.getString("at");
                        currentObject = rootR;
                    }
                    if (jsonobject.has("a")) {
                        rootA = jsonobject.getString("a");
                    }
                    if (jsonobject.has("last-updated")) {
                        rootLastUpdate = jsonobject.getString("last-updated");
                    }
                    if (jsonobject.has("value")) {
                        rootValue = jsonobject.getString("value");
                    }
                    if (jsonobject.has("mandatory")) {
                        mandatory = jsonobject.getString("mandatory");
                        if (mandatory != null && !mandatory.isEmpty() && mandatory.equalsIgnoreCase("y")) {
                            SmarterSMBApplication.isCurrentQuesMandatory = true;
                        } else {
                            SmarterSMBApplication.isCurrentQuesMandatory = false;
                        }
                    } else {
                        SmarterSMBApplication.isCurrentQuesMandatory = false;
                    }

                    if (jsonobject.has("decision")) {
                        decision = jsonobject.getString("decision");
                        if (decision != null && !decision.isEmpty() && decision.equalsIgnoreCase("y")) {
                            SmarterSMBApplication.isDecisionMakingQues = true;
                            String currentSelectedVal = String.valueOf(questionAnswerHash.get(rootQ));
                            if(currentSelectedVal != null && !currentSelectedVal.isEmpty()){
                                SmarterSMBApplication.currentSelectedValue = currentSelectedVal;
                            }
                        } else {
                            SmarterSMBApplication.isDecisionMakingQues = false;
                        }
                    } else {
                        SmarterSMBApplication.isDecisionMakingQues = false;
                    }

                    if (jsonobject.has("action_type")) {
                        actionType = jsonobject.getString("action_type");
                        actionTypeHash.put(rootQ, actionType);
                    }

                    if (jsonobject.has("title")) {
                        titleText = jsonobject.getString("title");
                    }

                    if (titleText != null && !titleText.isEmpty()) {
                        titleLayout.setVisibility(View.VISIBLE);
                        if (titleText.startsWith("<html>")) {
                            showTitleWebView();
                        } else {
                            showTitleTextView();
                        }
                    }

                    if (jsonobject.has("hint")) {
                        hintText = jsonobject.getString("hint");
                    }
                    if (jsonobject.has("dd_data")) {
                        dropDownData = jsonobject.getString("dd_data");
                        if (dropDownData != null && dropDownData.length() > 0) {
                            dropDownHash.put(rootQ, dropDownData);
                        }
                    }

                    if (jsonobject.has("sdd_data")) {
                        searchableDropDownData = jsonobject.getString("sdd_data");
                        if (searchableDropDownData != null && searchableDropDownData.length() > 0) {
                            searchableDropDownHash.put(rootQ, searchableDropDownData);
                        }
                    }
                    if (jsonobject.has("msdd_data")) {
                        multiSelectionDropDownData = jsonobject.getString("msdd_data");
                        if (multiSelectionDropDownData != null && multiSelectionDropDownData.length() > 0) {
                            multiSelectionDropDownHash.put(rootQ, multiSelectionDropDownData);
                        }
                    }
                    if (jsonobject.has("cb_data")) {
                        checkboxData = jsonobject.getString("cb_data");
                        if (checkboxData != null && checkboxData.length() > 0) {
                            checkboxHash.put(rootQ, checkboxData);
                        }
                    }
                    if (jsonobject.has("bt_data")) {
                        buttonData = jsonobject.getString("bt_data");
                        if (buttonData != null && buttonData.length() > 0) {
                            buttonHash.put(rootQ, buttonData);
                        }
                    }
                    if (jsonobject.has("rb_data")) {
                        radiobuttonData = jsonobject.getString("rb_data");
                        if (radiobuttonData != null && radiobuttonData.length() > 0) {
                            radiobuttonHash.put(rootQ, radiobuttonData);
                        }
                    }
                    if (jsonobject.has("status")) {
                        if (!checkRNR && !ServiceHandler.callDisconnected && !redialScenario) {
                            status = jsonobject.getString("status");
                            mmtStatus = status;
                            ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                        }
                    }

                    if (jsonobject.has("min_value")) {
                        min = Integer.parseInt(jsonobject.getString("min_value"));
                    }
                    if (jsonobject.has("max_value")) {
                        max = Integer.parseInt(jsonobject.getString("max_value"));
                    }

                    if (jsonobject.has("max_yes")) {
                        max_yes = Integer.parseInt(jsonobject.getString("max_yes"));
                    }
                    if (jsonobject.has("max_yes_action")) {
                        max_yes_action = jsonobject.getString("max_yes_action");
                    }
                    if (jsonobject.has("cb_action")) {
                        cb_action = jsonobject.getString("cb_action");
                    }

                    if (jsonobject.has("next_action")) {
                        JSONObject nextActionObj = jsonobject.getJSONObject("next_action");
                        if(nextActionObj != null &&  nextActionObj.has("post_url")){
                            next_action = String.valueOf(nextActionObj.get("post_url"));
                        }
                    } else {
                        next_action = "";
                    }
                    questionnaireHash.put(rootQ, rootR);
                    if(tempQuesList != null && !tempQuesList.contains(rootQ)) {
                        tempQuesList.add(questionCount, rootQ);
                    }
                    tempQnAHash.put(rootQ, rootR);
                    if (titleText != null && !titleText.isEmpty()) {
                        titleQHash.put(rootQ, titleText);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            } else {
                customerRatings.setVisibility(View.GONE);
                ratingsView.setVisibility(View.GONE);
                nextButton.setVisibility(View.GONE);
                previousButton.setVisibility(View.GONE);
                disableCallOptions();
                ratingsLayout.setVisibility(View.GONE);
                formButtonLayout.setVisibility(View.GONE);
                freeNumberLayout.setVisibility(View.GONE);
                freeTextLayout.setVisibility(View.GONE);
                searchableDropDownLayout.setVisibility(View.GONE);
                multiSelectionDropDownLayout.setVisibility(View.GONE);
                dropdownLayout.setVisibility(View.GONE);
                checkboxLayout.setVisibility(View.GONE);
                buttonsLayout.setVisibility(View.GONE);
                radiobuttonsLayout.setVisibility(View.GONE);
                isInterestedLayout.setVisibility(View.GONE);
                dateTimeLayout.setVisibility(View.GONE);
                followupLayout.setVisibility(View.GONE);
                uploadAttachmentLayout.setVisibility(View.GONE);
                callManagerLayout.setVisibility(View.GONE);
            }

            flp_layout.setVisibility(View.GONE);
            acpBottomLayout.setVisibility(View.GONE);
            nameNumberRelativeLayout.setVisibility(View.GONE);
//            if (customerNumber != null && customerNumber.isEmpty()) {
//                nextButton.setVisibility(View.GONE);
//            }

            formButtonLayout.setVisibility(View.VISIBLE);
            if (rootR.equalsIgnoreCase("RT")) {
                ratingsLayout();
            } else if (rootR.equalsIgnoreCase("FT") || rootR.equalsIgnoreCase("EMAIL") || rootR.equalsIgnoreCase("BLANK")) {
                freeTextLayout();
            } else if (rootR.equalsIgnoreCase("CALLPM")){
                callManagerLayout();
            } else if (rootR.equalsIgnoreCase("DD")) {
                dropDownLayout();
            } else if (rootR != null && rootR.equalsIgnoreCase("CB")) {
                checkBoxLayout();
            } else if (rootR.equalsIgnoreCase("BT")) {
                buttonLayout();
            } else if (rootR.equalsIgnoreCase("RB")) {
                radiobuttonLayout();
            } else if (rootR.equalsIgnoreCase("NP")) {
                numberpickerLayout();
            } else if (rootR.equalsIgnoreCase("YN")) {
                yesNoLayout();
            } else if (rootR.equalsIgnoreCase("DATETIME") || rootR.equalsIgnoreCase("DATE")) {
                dateTimeLayout();
            } else if (rootR.equalsIgnoreCase("FLP")) {
                followUpLayout();
            } else if (rootR.equalsIgnoreCase("FN") || rootR.equalsIgnoreCase("SMS")) {
                freeNumberLayout();
            } else if (rootR.equalsIgnoreCase("SDD")) {
                searchableDropdownLayout();
            } else if (rootR.equalsIgnoreCase("MSDD")) {
                multiSelectionDropdownLayout();
            } else if (rootR.equalsIgnoreCase("ATTACHMENT")) {
                attachmentLayout();
            }
            uView.setVisibility(View.GONE);
            allianceSalesStage.setVisibility(View.GONE);
        }
    }

    private void applyHintTextFT(String rootQ, String hintText) {
        etCustomerExperience.setHint(hintText);
    }

    private void applyHintTextFN(String rootQ, String hintText) {
        etFreeNumber.setHint(hintText);
    }

    /*Added By Sujit on 8:45PM */
    private String getLookUpValue(String input) {

        String questionStr = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");
        String lookUpStr = "";

        switch (input) {
            case "NEW DATA":
                try {
                    JSONObject questionJsonObject = new JSONObject(questionStr);
                    lookUpStr = questionJsonObject.getJSONArray(input).toString();
                } catch (JSONException e) {
                    e.printStackTrace();
                }
                break;
            case "APT FIXED":
                try {
                    JSONObject questionJsonObject = new JSONObject(questionStr);
                    lookUpStr = questionJsonObject.getJSONObject(input).toString();
                } catch (JSONException e) {
                    e.printStackTrace();
                }
                break;
            case "APT RESCHEDULE":
                try {
                    JSONObject questionJsonObject = new JSONObject(questionStr);
                    lookUpStr = questionJsonObject.getJSONArray(input).toString();
                } catch (JSONException e) {
                    e.printStackTrace();
                }
                break;
            case "APT CONFIRM":
                try {
                    JSONObject questionJsonObject = new JSONObject(questionStr);
                    lookUpStr = questionJsonObject.getJSONObject(input).toString();
                } catch (JSONException e) {
                    e.printStackTrace();
                }
                break;
            case "CLOSED":
                try {
                    JSONObject questionJsonObject = new JSONObject(questionStr);
                    lookUpStr = questionJsonObject.getJSONArray(input).toString();
                } catch (JSONException e) {
                    e.printStackTrace();
                }
                break;
        }
        return lookUpStr;
    }

    private String getAptFixedType(String salesStatus, String subjectType) {
        String atpSTring = getLookUpValue(salesStatus);
        String result = "";
        try {
            JSONObject aptJsonObject = new JSONObject(atpSTring);
            subjectType = subjectType.toLowerCase();
            result = aptJsonObject.getJSONArray(subjectType).toString();
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return result;
    }

    public void checkCloudCall() {
        if (getIntent().hasExtra("knowlarityNumber")) {
            try {
                if (CommonUtils.isC2cNetworkAvailable(this)) {
                    String start_t = "", end_t = "";
                    if (getIntent().hasExtra("start_t")) {
                        start_t = getIntent().getStringExtra("start_t");
                    }
                    if (getIntent().hasExtra("end_t")) {
                        end_t = getIntent().getStringExtra("end_t");
                    }

                    SimpleDateFormat sdf = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy", Locale.ENGLISH);
                    SimpleDateFormat pstFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    pstFormat.setTimeZone(TimeZone.getTimeZone("Asia/Calcutta"));
                    String callStartTime = pstFormat.format(sdf.parse(start_t));
                    String callEndDateTime = pstFormat.format(sdf.parse(end_t));
                    callStartTime = callStartTime + "+05:30";
                    callEndDateTime = callEndDateTime + "+05:30";
                    String srNumber = "";
                    if (ApplicationSettings.containsPref(AppConstants.SR_NUMBER)) {
                        srNumber = ApplicationSettings.getPref(AppConstants.SR_NUMBER, "");
                    }
                    String cloud1 = "";
                    if (ApplicationSettings.containsPref(AppConstants.CLOUD_OUTGOING1)) {
                        cloud1 = ApplicationSettings.getPref(AppConstants.CLOUD_OUTGOING1, "");
                    }
                }
            } catch (NullPointerException e) {
                e.printStackTrace();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public void getLatLong() {
        try {
            GPSTracker gpsTracker = new GPSTracker(this);
            if (gpsTracker.canGetLocation()) {
                latitude = gpsTracker.getLatitude();
                longitude = gpsTracker.getLongitude();
            } else {
                gpsTracker.showSettingsAlert();
            }
        } catch (Exception e) {

        }
    }

    private void initializeCalendar() {
        long currentTime = System.currentTimeMillis();
        Calendar calendar = Calendar.getInstance();
        int year = calendar.get(Calendar.YEAR);
        int month = calendar.get(Calendar.MONTH);
        int day = calendar.get(Calendar.DAY_OF_MONTH);
        int minute = calendar.get(Calendar.MINUTE);
        int hour = calendar.get(Calendar.HOUR_OF_DAY);
        mCalendar = Calendar.getInstance();
        mTodayCalendar = Calendar.getInstance();
        mCalendar.set(Calendar.DAY_OF_MONTH, day);
        mCalendar.set(Calendar.MONTH, month);
        mCalendar.set(Calendar.YEAR, year);
        mCalendar.set(Calendar.HOUR_OF_DAY, hour);
        mCalendar.set(Calendar.MINUTE, minute + 1);
        mTodayCalendar = mCalendar;
        String cmeridian = "";

        if (mCalendar.getTime().getTime() > currentTime) {
            switch (mCalendar.get(Calendar.AM_PM)) {
                case Calendar.AM:
                    cmeridian = "AM";
                    break;
                case Calendar.PM:
                    cmeridian = "PM";
                    break;
            }
        }

        int hourTw = hour;
        if (hourTw > 12) {
            hourTw -= 12;
        }
    }

    public void getDetailsFromDb() {

        String ns = Context.NOTIFICATION_SERVICE;
        String filePath = "";
        NotificationManager mNotificationManager = (NotificationManager) getSystemService(ns);
        Intent intent = getIntent();
        if (intent != null) {
            if (intent.hasExtra("dbid") && intent.getLongExtra("dbid", 0) != 0) {
                dbid = intent.getLongExtra("dbid", 0);
            }
            if (intent.hasExtra("showinprogress")) {
                showInProgress = intent.getIntExtra("showinprogress", 0);
            }
            if (intent.hasExtra("notification_id")) {
                int id = intent.getIntExtra("notification_id", 1);
                mNotificationManager.cancel(id);
            }
        }

        if (dbid != 0) {
            String endTime = "";

            MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
            SQLiteDatabase db = dbHelper.getWritableDatabase();

            if (intent.hasExtra("cloudcall")) {
                Cursor cursor = db.rawQuery("SELECT * FROM ameyo_entries where _id=" + "'" + dbid + "'", null);
                if (cursor.getCount() > 0) {
                    cursor.moveToFirst();
                    from = cursor.getString(cursor.getColumnIndex("FROM1"));
                    to = cursor.getString(cursor.getColumnIndex("TO1"));
                    eventType = cursor.getString(cursor.getColumnIndex("EVENT_TYPE"));
                    callStartTime = cursor.getString(cursor.getColumnIndex("STARTTIME"));
                    ameyocallStartTime = callStartTime;
                    endTime = cursor.getString(cursor.getColumnIndex("ENDTIME"));
                    filePath = cursor.getString(cursor.getColumnIndex("FILE_PATH"));
                    String Status = cursor.getString(cursor.getColumnIndex("STATUS"));
                    if (ApplicationSettings.getPref(AppConstants.USERINFO_PHONE, "").equals(from)) {
                        customerNumber = to;
                    } else {
                        customerNumber = from;
                    }
                }
                cursor.close();

            } else {
                Cursor cursor = db.rawQuery("SELECT * FROM mytbl where _id=" + "'" + dbid + "'", null);
                if (cursor.getCount() > 0) {
                    cursor.moveToFirst();
                    from = cursor.getString(cursor.getColumnIndex("FROM1"));
                    to = cursor.getString(cursor.getColumnIndex("TO1"));
                    eventType = cursor.getString(cursor.getColumnIndex("EVENT_TYPE"));
                    callStartTime = cursor.getString(cursor.getColumnIndex("STARTTIME"));
                    endTime = cursor.getString(cursor.getColumnIndex("ENDTIME"));
                    cotactName = cursor.getString(cursor.getColumnIndex("CALLER"));
                    filePath = cursor.getString(cursor.getColumnIndex("FILE_PATH"));
                    String Status = cursor.getString(cursor.getColumnIndex("STATUS"));
                    if (ApplicationSettings.getPref(AppConstants.USERINFO_PHONE, "").equals(from)) {
                        customerNumber = to;
                    } else {
                        customerNumber = from;
                    }
                }
                cursor.close();
            }
            if (customerNumber != null) {
                String customer_Name = CommonUtils.getContactName(getApplicationContext(), customerNumber);
                if (customer_Name != null && !customer_Name.equals("")) {
                    callerName = customer_Name;
                }
                if (callerName != null && !callerName.equals("")) {
                    String temp = customerNumber;
                    customerNumber = temp;
                }
                updateAppointmentToCompletedStatus();
            }

            if (db.isOpen()) {
                db.close();
            }

            dbHelper.close();
        }

        boolean truePredictive = ApplicationSettings.getPref(AppConstants.TRUE_PREDICTIVE, false);
        if (truePredictive) {
            if (SmarterSMBApplication.connectedCustomerName != null && !SmarterSMBApplication.connectedCustomerName.isEmpty()) {
                name1 = SmarterSMBApplication.connectedCustomerName;
            } else if (NotificationData.dialledCustomerName != null && !NotificationData.dialledCustomerName.isEmpty()) {
                name1 = NotificationData.dialledCustomerName;
            } else {
                name1 = "No Name";
            }
        } else {
            String name = ApplicationSettings.getPref(AfterCallActivity.AFTER_CALL_NAME, "");

            if (name != null && !(name.isEmpty())) {
                name1 = name;
            } else if (cotactName != null && !(cotactName.isEmpty())) {
                name1 = cotactName;
            } else if (tv_name_or_number.getText() != null && !tv_name_or_number.getText().toString().isEmpty()) {
                name1 = tv_name_or_number.getText().toString();
            } else {
                String customerName = getCallerName(customerNumber);
                if (customerName != null && !customerName.isEmpty()) {
                    name1 = customerName;
                } else {
                    name1 = "No Name";
                }
            }
        }
        tv_name_or_number.setText(name1);
        ApplicationSettings.putPref(AfterCallActivity.AFTER_CALL_NAME, "");

        if (customerNumber != null && !customerNumber.isEmpty()) {
            tv_name_or_number.setText(name1);
        } else {
            truePredictive = ApplicationSettings.getPref(AppConstants.TRUE_PREDICTIVE, false);
            if (truePredictive) {
                if (SmarterSMBApplication.connectedCustomerName != null && !SmarterSMBApplication.connectedCustomerName.isEmpty()) {
                    tv_name_or_number.setText(SmarterSMBApplication.connectedCustomerName);
                } else if (NotificationData.dialledCustomerName != null && !NotificationData.dialledCustomerName.isEmpty()) {
                    tv_name_or_number.setText(NotificationData.dialledCustomerName);
                } else {
                    if (ServiceHandler.callDisconnected) {
                        tv_name_or_number.setText("No Name");
                        checkRNR = true;
                        rnrScenario = true;
                        redialCard.setVisibility(View.GONE);
                        flp_layout.setWeightSum(3);
                        connectedCustomerState = "ACP";
                        SmarterSMBApplication.currentAppState = "ACP";
                        onClick(rnrLayout);
                        tpdrnrScenario = true;
                    }
                }
            } else {
                String remoteAutoEnabled = ApplicationSettings.getPref(AppConstants.RAD_OPTIMIZED_POST, "");
                truePredictive = ApplicationSettings.getPref(AppConstants.TRUE_PREDICTIVE, false);

                if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty() && !truePredictive) {
                    if (ServiceHandler.callDisconnected) {
                        tv_name_or_number.setText("No Name");
                        checkRNR = true;
                        rnrScenario = true;
                        redialCard.setVisibility(View.GONE);
                        flp_layout.setWeightSum(3);
                        connectedCustomerState = "ACP";
                        SmarterSMBApplication.currentAppState = "ACP";
                        onClick(rnrLayout);
                        sdrnrScenario = true;
                    }
                }
            }
        }
    }

    public void getDetailsFromDbSequencial() {

        String connectedNumber = "";

        String ns = Context.NOTIFICATION_SERVICE;
        String filePath = "";
        NotificationManager mNotificationManager = (NotificationManager) getSystemService(ns);
        Intent intent = getIntent();
        if (intent != null) {
            if (intent.hasExtra("dbid") && intent.getLongExtra("dbid", 0) != 0) {
                dbid = intent.getLongExtra("dbid", 0);
            }
            if (intent.hasExtra("showinprogress")) {
                showInProgress = intent.getIntExtra("showinprogress", 0);
            }
            if (intent.hasExtra("notification_id")) {
                int id = intent.getIntExtra("notification_id", 1);
                mNotificationManager.cancel(id);
            }
        }

        if (dbid != 0) {
            String endTime = "";

            MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
            SQLiteDatabase db = dbHelper.getWritableDatabase();

            if (intent.hasExtra("cloudcall")) {
                Cursor cursor = db.rawQuery("SELECT * FROM ameyo_entries where _id=" + "'" + dbid + "'", null);
                if (cursor.getCount() > 0) {
                    cursor.moveToFirst();
                    from = cursor.getString(cursor.getColumnIndex("FROM1"));

                    connectedNumber = ApplicationSettings.getPref(AppConstants.CONNECTED_CUSTOMER, "");
                    if (connectedNumber != null && !connectedNumber.isEmpty() && connectedNumber.contains("")) {
                        connectedNumber = connectedNumber.replaceAll("\\s+", "");
                    }
                    if (connectedNumber != null && !connectedNumber.isEmpty() && !connectedNumber.startsWith("+")) {
                        connectedNumber = "+" + connectedNumber;
                    }

                    to = connectedNumber;

                    eventType = cursor.getString(cursor.getColumnIndex("EVENT_TYPE"));
                    callStartTime = cursor.getString(cursor.getColumnIndex("STARTTIME"));
                    ameyocallStartTime = callStartTime;
                    cotactName = cursor.getString(cursor.getColumnIndex("CALLER"));

                    if (ApplicationSettings.getPref(AppConstants.USERINFO_PHONE, "").equals(from)) {
                        customerNumber = to;
                    } else {
                        customerNumber = from;
                    }
                }
                cursor.close();

            } else {
                Cursor cursor = db.rawQuery("SELECT * FROM mytbl where _id=" + "'" + dbid + "'", null);
                if (cursor.getCount() > 0) {
                    cursor.moveToFirst();
                    from = cursor.getString(cursor.getColumnIndex("FROM1"));

                    connectedNumber = ApplicationSettings.getPref(AppConstants.CONNECTED_CUSTOMER, "");
                    if (connectedNumber != null && !connectedNumber.isEmpty() && connectedNumber.contains("")) {
                        connectedNumber = connectedNumber.replaceAll("\\s+", "");
                    }
                    if (connectedNumber != null && !connectedNumber.isEmpty() && !connectedNumber.startsWith("+")) {
                        connectedNumber = "+" + connectedNumber;
                    }

                    to = connectedNumber;

                    eventType = cursor.getString(cursor.getColumnIndex("EVENT_TYPE"));
                    callStartTime = cursor.getString(cursor.getColumnIndex("STARTTIME"));
                    cotactName = cursor.getString(cursor.getColumnIndex("CALLER"));

                    if (ApplicationSettings.getPref(AppConstants.USERINFO_PHONE, "").equals(from)) {
                        customerNumber = to;
                    } else {
                        customerNumber = from;
                    }
                }
                cursor.close();
            }

            if (customerNumber != null) {
                callerName = CommonUtils.getContactName(getApplicationContext(), customerNumber);
                if (customerNumber.equals(connectedNumber)) {
                    callerName = ApplicationSettings.getPref(AppConstants.CONNECTED_CUSTOMER_NAME, "");
                }
                if (callerName != null && !callerName.equals("")) {
                    String temp = customerNumber;
                    customerNumber = temp;
                }
                updateAppointmentToCompletedStatus();
            }

            if (db.isOpen()) {
                db.close();
            }
            dbHelper.close();
        }

        String name = ApplicationSettings.getPref(AfterCallActivity.AFTER_CALL_NAME, "");

        if (name != null && !(name.isEmpty())) {
            name1 = name;
        } else if (callerName != null && !callerName.equals("")) {
            name1 = callerName;
        } else if (cotactName != null && !(cotactName.isEmpty())) {
            name1 = cotactName;
        } else if (NotificationData.knolarity_name != null && !(NotificationData.knolarity_name.isEmpty())) {
            name1 = NotificationData.knolarity_name;
        } else {
            String customerName = getCallerName(customerNumber);
            if (customerName != null && !customerName.isEmpty()) {
                name1 = customerName;
            } else {
                name1 = "No Name";
            }
        }

        tv_name_or_number.setText(name1);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.only_edit, menu);
        menu.findItem(R.id.edit).setVisible(false);
        menu.findItem(R.id.action_dialer).setVisible(false);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();
        if (id == android.R.id.home) {
            if (!ServiceHandler.callDisconnected) {

            } else {
                submit();
            }
        } else if (id == R.id.action_dialer) {
            if (customerNumber != null) {
                if (!customerNumber.isEmpty()) {
                    clickToCall(customerNumber);
                }
            }
        }
        return true;
    }

    private void clickToCall(final String customerNumber) {

        if (redialClicked) {
            return;
        } else {
            redialClicked = true;
        }

        boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
        if (sequencialEndpoint) {
            if (redialScenario) {
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                onStop();
            }
        } else {
            if (redialScenario) {
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                onStop();
            }
        }

        ServiceHandler.callDisconnected = false;
        boolean secondSim = false;
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP_MR1) {
            SubscriptionManager subscriptionManager = SubscriptionManager.from(getApplicationContext());
            @SuppressLint("MissingPermission")
            List<SubscriptionInfo> subsInfoList = subscriptionManager.getActiveSubscriptionInfoList();
            for (SubscriptionInfo subscriptionInfo : subsInfoList) {
                String number = subscriptionInfo.getNumber();
                int SimStotNumber = subscriptionInfo.getSimSlotIndex();
                if (SimStotNumber == 1) {
                    secondSim = true;
                }
            }
        } else {
            secondSim = true;
        }

        if (ApplicationSettings.getPref(AppConstants.CLOUD_OUTGOING, false)) {
            if (customerNumber != null) {
                String userNumber = ApplicationSettings.getPref(AppConstants.USERINFO_PHONE, "");
                if (userNumber != null && !(userNumber.isEmpty())) {
                    final String customernumber = customerNumber;
                    String sr_number = ApplicationSettings.getPref(AppConstants.SR_NUMBER, "");
                    String caller_id = ApplicationSettings.getPref(AppConstants.CLOUD_OUTGOING1, "");
                    if (caller_id != null && !(caller_id.isEmpty())) {
                        if (sr_number != null && !(sr_number.isEmpty())) {
                            if (CommonUtils.isC2cNetworkAvailable(this)) {
                                knowlarityCheck = true;
                                NotificationData.knolarity_start_time = new Date().toString();
                                KnowlarityModel knowlarityModel = new KnowlarityModel(sr_number, userNumber, customerNumber);
                                knowlarityModel.setClient_id(caller_id);
                                new APIProvider.ReClickToCall(knowlarityModel, 213, true, new API_Response_Listener<String>() {
                                    @Override
                                    public void onComplete(String data, long request_code, int failure_code) {
                                        NotificationData.knolarity_response_time = new Date().toString();
                                        if (data != null && !(data.isEmpty())) {
                                            if (data.contains("_SMBALERT_")) {
                                                CommonUtils.setToast(getApplicationContext(), data.replace("_SMBALERT_", ""));
                                                if (data.contains("Connecting to the customer")) {
                                                    NotificationData.customerFeedback = "";
                                                    NotificationData.updatedCustomKVS = "";
                                                    NotificationData.dialledCustomerNumber = "";
                                                    restartActivity();
                                                } else {
                                                    navigateToUearnHome();
                                                }
                                            } else if (data.contains("_SMBACP_")) {
                                                String uuidValue = data.replace("_SMBACP_", "");
                                                NotificationData.transactionId = uuidValue;
                                                NotificationData.uuid = uuidValue;
                                                NotificationData.knolarity_response = "Success : ";
                                                try {
                                                    setCallData();
                                                    NotificationData.knolarity_number = customernumber;
                                                    ApplicationSettings.putPref(AppConstants.CLOUD_CUSTOMER_NUMBER, customernumber);

                                                } catch (NullPointerException e) {
                                                    e.printStackTrace();
                                                }
                                                CommonUtils.storeUuidHash(customernumber, uuidValue);
                                                Toast.makeText(getApplicationContext(), "Connecting to the customer. Please wait ...", Toast.LENGTH_LONG).show();
                                                CommonUtils.showACPScreen(getApplicationContext());
                                                navigateToUearnHome();
                                            } else {
                                                NotificationData.transactionId = data;
                                                NotificationData.uuid = data;
                                                NotificationData.knolarity_response = "Success : ";
                                                try {
                                                    setCallData();
                                                    NotificationData.knolarity_number = customernumber;
                                                    ApplicationSettings.putPref(AppConstants.CLOUD_CUSTOMER_NUMBER, customernumber);

                                                } catch (NullPointerException e) {
                                                    e.printStackTrace();
                                                }
                                                CommonUtils.storeUuidHash(customernumber, data);
                                                Toast.makeText(getApplicationContext(), "Connecting to the customer. Please wait ...", Toast.LENGTH_LONG).show();
                                                navigateToUearnHome();
                                            }

                                        } else if (failure_code == APIProvider.INVALID_AUTH_KEY) {
                                            CommonUtils.setToast(getApplicationContext(), "Invalid Auth key");
                                            navigateToUearnHome();
                                        } else if (failure_code == APIProvider.INVALID_REQUEST) {
                                            CommonUtils.setToast(getApplicationContext(), "Request Not Allowed");
                                            navigateToUearnHome();
                                        } else if (failure_code == APIProvider.INVALID_PARAMETER) {
                                            CommonUtils.setToast(getApplicationContext(), "Invalid Parameters");
                                            navigateToUearnHome();
                                        } else if (failure_code == APIProvider.INVALID_NUMBER) {
                                            CommonUtils.setToast(getApplicationContext(), "This number is not valid");
                                            navigateToUearnHome();
                                        } else if (failure_code == APIProvider.SERVER_ALERT) {
                                            CommonUtils.setToast(getApplicationContext(), APIProvider.SERVER_ALERT_MESSAGE);
                                        } else if (failure_code == APIProvider.DND) {
                                            if (!chechFirstCall(customernumber)) {
                                                createFirstCallFollowup();
                                            }
                                            if (customernumber != null && !customerNumber.isEmpty()) {
                                                createCmail(customernumber);
                                            }
                                            NotificationData.knolarity_response = "DND : ";
                                            Intent intent = new Intent(UearnActivity.this, ReuploadService.class);
                                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                                                startForegroundService(intent);
                                            } else {
                                                startService(intent);
                                            }
                                            Toast.makeText(getApplicationContext(), "This number is DND.", Toast.LENGTH_LONG).show();
                                            navigateToUearnHome();
                                        } else if (failure_code == APIProvider.AGENET_NOT_VERIFIED) {
                                            NotificationData.knolarity_response = "Agent not verified : ";
                                            Toast.makeText(getApplicationContext(), "Hi. Your mobile number in Not verified.", Toast.LENGTH_LONG).show();
                                        } else if (failure_code == APIProvider.SR_NOT_REGISTERED) {
                                            NotificationData.knolarity_response = "No SR Number : ";
                                            Toast.makeText(getApplicationContext(), "Hey! Ask your admin to call Support at 9113907215.", Toast.LENGTH_LONG).show();
                                        } else {
                                            NotificationData.knolarity_response = "Request Failed : ";
                                            Toast.makeText(getApplicationContext(), "Please check your internet connection.", Toast.LENGTH_LONG).show();
                                        }
                                    }
                                }).reClickToCall(knowlarityModel);
//                                Intent main = new Intent(this, UearnHome.class);
//                                main.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
//                                main.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
//                                startActivity(main);
//                                Log.d("RedialTest", "Finishing current Activity and caLLING UearnHome");
                                Intent intent = getIntent();
                                if (this.isFinishing()) {

                                } else {
                                    this.finish();
                                    intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
                                    overridePendingTransition(0, 0);
                                    startActivity(intent);
                                }
                                Toast toastMessage = Toast.makeText(this, "Dialling", Toast.LENGTH_LONG);
                                toastMessage.setGravity(Gravity.CENTER, 0, 0);
                                toastMessage.show();
//                                this.finish();
                            } else {
                                Toast.makeText(UearnActivity.this, "You have no Internet connection.", Toast.LENGTH_SHORT).show();
                            }
                        } else {
                            Toast.makeText(this, "No SR Number", Toast.LENGTH_SHORT).show();
                            this.finish();
                        }
                    } else {
                        Toast.makeText(this, "No Client ID", Toast.LENGTH_SHORT).show();
                    }
                } else {
                    Toast.makeText(this, "Invalid User Number", Toast.LENGTH_SHORT).show();
                }
            } else {
                Toast.makeText(this, "Invalid Customer Number", Toast.LENGTH_SHORT).show();
            }
        } else {
            appointmentId = mydbAppointmentId;
            ApplicationSettings.putPref(AFTER_CALL_APPOINTMENT_ID, appointmentId);
            callToCustomer(this, customerNumber, appointmentId, status, "", "", "", "");
        }
    }

    public static void callToCustomer(Context context, String number, String appointmentId, String status, String substatus1, String substatus2, String callername, String notes) {
        if (context != null) {
            Intent intent = new Intent(Intent.ACTION_CALL);
            if (number != null) {
                String num = "tel:" + number;
                intent.setData(Uri.parse(num));
            }
            setCallData(appointmentId, status, substatus1, substatus2, callername, notes);
            if (ActivityCompat.checkSelfPermission(context, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {
                return;
            }
            context.startActivity(intent);
        }
    }

    public static void setCallData(String appointmentId, String status, String substatus1, String substatus2, String callername, String notes) {
        NotificationData.notificationData = true;
        NotificationData.appointment_id = appointmentId;
        NotificationData.statusString = status;
        NotificationData.notes_string = notes;
        NotificationData.order_value = "0";
        NotificationData.isAppointment = true;
        String screen = ApplicationSettings.getPref(AppConstants.AFTERCALLACTIVITY_SCREEN, "");
        if (screen != null && ((screen.equalsIgnoreCase("Auto2AfterCallActivity") || (screen.equalsIgnoreCase("Auto1AfterCallActivity"))))) {
            NotificationData.makeACall = true;
        }
        if (callername != null) {
            NotificationData.knolarity_name = callername;
        }
        if (substatus1 != null && status != null && !status.equalsIgnoreCase("NEW DATA")) {
            NotificationData.substatus1 = substatus1;
        }
        if (substatus2 != null && status != null && !status.equalsIgnoreCase("NEW DATA")) {
            NotificationData.substatus2 = substatus2;
        }
    }

    private void setCallData() {
        NotificationData.notificationData = true;
        String name = ApplicationSettings.getPref(AfterCallActivity.AFTER_CALL_NAME, "");
        if (name != null && !(name.isEmpty())) {
            NotificationData.knolarity_name = name;
        } else if (callerName != null && !callerName.equals("")) {
            NotificationData.knolarity_name = callerName;
        } else if (cotactName != null && !(cotactName.isEmpty())) {
            NotificationData.knolarity_name = cotactName;
        }

        if (dbNotes != null) {
            NotificationData.notes_string = dbNotes;
        } else if (notesString != null) {
            NotificationData.notes_string = dbNotes;
        }
    }

    private void followUpAndRedialConnectedScenario() {
        hideTitleTextViewAndWebView();
        redialNumber = false;
        if (SmarterSMBApplication.isDiallingFollowUpC2C || SmarterSMBApplication.remoteEnabledRedialScenario || SmarterSMBApplication.followupsInPredictive) {
            killCall(this);
        }
        ServiceHandler.callDisconnected = true;
        ServiceHandler.processCompleted = true;
        SmarterSMBApplication.navigateToACP = true;
        Intent intent = getIntent();
        goToHomeScreen();
        intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
        overridePendingTransition(0, 0);
        startActivity(intent);
        overridePendingTransition(0, 0);
    }

    private void followupConnectedAndRNRScenario() {
        hideTitleTextViewAndWebView();
        String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
        if (questionsAct != null && !questionsAct.isEmpty()) {
            callEndedFromDuringCall = true;
        }
        endCallButtonLayout.setVisibility(View.GONE);
        nextButtonClicked = false;
        if (!NotificationData.isSocketResponse) {
            callbacklayoutview.setEnabled(false);
        }
        if (getCustomInfoLayout != null)
            getCustomInfoLayout.setVisibility(View.GONE);
        killCall(this);
        if (questionsAct != null && !questionsAct.isEmpty()) {
            if (ServiceHandler.callDisconnected) {
                NotificationData.legAConnect = false;
                SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
                String dbId = sharedPref.getString("dbid", "0");
                if (!dbId.isEmpty()) {
                    dbid = Long.valueOf(dbId);
                    Intent intent = getIntent();
                    finish();
                    if (!SmarterSMBApplication.showSingleAcp) {
                        SmarterSMBApplication.showSingleAcp = true;
                        startActivity(intent);
                    }
                }
            }
        }
    }

    private void connectedAndRNRScenarioPD() {
        hideTitleTextViewAndWebView();
        ServiceHandler.callDisconnected = true;
        ServiceHandler.processCompleted = true;
        SmarterSMBApplication.navigateToACP = true;
        Intent intent = getIntent();
        goToHomeScreen();
        intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
        overridePendingTransition(0, 0);
        startActivity(intent);
        overridePendingTransition(0, 0);
    }

    private void connectedAndRNRScenarioSD() {
        NotificationData.source = "Agent disconnected";
        new CallDisconnectInfo().execute();
        String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");

        if (questionsAct != null && !questionsAct.isEmpty()) {
            callEndedFromDuringCall = true;
        }
        endCallButtonLayout.setVisibility(View.GONE);
        nextButtonClicked = false;
        if (!NotificationData.isSocketResponse) {
            callbacklayoutview.setEnabled(false);
        }
        if (getCustomInfoLayout != null)
            getCustomInfoLayout.setVisibility(View.GONE);
        killCall(this);
        if (questionsAct != null && !questionsAct.isEmpty()) {
            if (ServiceHandler.callDisconnected) {
                NotificationData.legAConnect = false;
                SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
                String dbId = sharedPref.getString("dbid", "0");
                if (!dbId.isEmpty()) {
                    dbid = Long.valueOf(dbId);
                    Intent intent = getIntent();
                    finish();
                    if (!SmarterSMBApplication.showSingleAcp) {
                        SmarterSMBApplication.showSingleAcp = true;
                        startActivity(intent);
                    }
                }
            }
        }
    }

    private void stopRecording(String customerNumber) {
        if (shouldRecord()) {
            Intent recorderIntent = new Intent(this, RecorderService.class);
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                startForegroundService(recorderIntent);
            } else {
                startService(recorderIntent);
            }
        } else {
            if (redialNumber) {
                boolean truePredictive = ApplicationSettings.getPref(AppConstants.TRUE_PREDICTIVE, false);
                if (truePredictive) {
                    if (NotificationData.dialledCustomerNumber != null && !NotificationData.dialledCustomerNumber.isEmpty()) {
                        if (SmarterSMBApplication.isCurrentQuesMandatory  && NotificationData.isSocketResponse && SmarterSMBApplication.currentAppState.equalsIgnoreCase("Connected")) {
                            SmarterSMBApplication.callEndedFromDuringCall = false;
                            Toast.makeText(this, "Please complete the questionnaire", Toast.LENGTH_SHORT).show();
                        } else {
                            immediateQuestionnaireSubmit();
                            followUpAndRedialConnectedScenario();
                        }
                    } else {
                        followUpAndRedialConnectedScenario();
                    }
                } else {
                    redialNumber = false;
                    killCall(this);
                }
            } else {
                if (SmarterSMBApplication.moveToNormal) {
                    boolean truePredictive = ApplicationSettings.getPref(AppConstants.TRUE_PREDICTIVE, false);
                    if (truePredictive) {
                        SmarterSMBApplication.moveToNormal = false;
                        ServiceHandler.callDisconnected = true;
                        ServiceHandler.processCompleted = true;
                        SmarterSMBApplication.navigateToACP = true;
                        Intent intent = getIntent();
                        goToHomeScreen();
                        intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
                        overridePendingTransition(0, 0);
                        startActivity(intent);
                        overridePendingTransition(0, 0);
                    } else {
                        SmarterSMBApplication.moveToNormal = false;
                        killCall(this);
                    }
                } else {
                    if (SmarterSMBApplication.callingFollowUps) {
                        SmarterSMBApplication.callingFollowUps = false;
                        killCall(this);
                    } else {
                        if (SmarterSMBApplication.outgoingCallNotInStartMode) {
                            if (NotificationData.dialledCustomerNumber != null && !NotificationData.dialledCustomerNumber.isEmpty()) {

                                if (SmarterSMBApplication.isCurrentQuesMandatory  && NotificationData.isSocketResponse && SmarterSMBApplication.currentAppState.equalsIgnoreCase("Connected")) {
                                    SmarterSMBApplication.callEndedFromDuringCall = false;
                                    Toast.makeText(this, "Please complete the questionnaire", Toast.LENGTH_SHORT).show();
                                } else {
                                    immediateQuestionnaireSubmit();
                                    followupConnectedAndRNRScenario();
                                }

                            } else {
                                followupConnectedAndRNRScenario();
                            }
                        } else {
                            if (NotificationData.dialledCustomerNumber != null && !NotificationData.dialledCustomerNumber.isEmpty()) {

                                if (SmarterSMBApplication.isCurrentQuesMandatory  && NotificationData.isSocketResponse && SmarterSMBApplication.currentAppState.equalsIgnoreCase("Connected")) {
                                    SmarterSMBApplication.callEndedFromDuringCall = false;
                                    Toast.makeText(this, "Please complete the questionnaire", Toast.LENGTH_SHORT).show();
                                } else {
                                    immediateQuestionnaireSubmit();
                                    connectedAndRNRScenarioPD();
                                }

                            } else {
                                connectedAndRNRScenarioPD();
                            }
                        }
                    }
                }
            }
        }
    }

    private void createCmail(String phoneno) {

        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db1 = dbHelper.getWritableDatabase();

        ContentValues cv = new ContentValues();

        cv.put("EVENT_TYPE", "call_dnd");
        if (ApplicationSettings.getPref(AppConstants.USERINFO_PHONE, "") != null) {
            cv.put("FROM1", ApplicationSettings.getPref(AppConstants.USERINFO_PHONE, ""));
        }

        String callerName = "";
        if (phoneno != null) {
            cv.put("TO1", phoneno);
            cv.put("MSG_RECEPIENT_NO", phoneno);
            callerName = CommonUtils.getContactName(this, phoneno);
        }


        cv.put("SUBJECT", "Outgoing Call");
        cv.put("MESSAGE", "Outgoing Call");
        if (status != null) {
            cv.put("STATUS", status);
        }
        cv.put("UPLOAD_STATUS", 1);
        cv.put("EMAIL", ApplicationSettings.getPref(AppConstants.USERINFO_EMAIL, null));
        cv.put("PARENT", 0);
        cv.put("STARTTIME", CommonUtils.getTimeFormatInISO(new Date()));
        cv.put("ENDTIME", CommonUtils.getTimeFormatInISO(new Date()));
        cv.put("UNREAD", "false");
        cv.put("CALLER", callerName);
        db1.insert("mytbl", null, cv);
        if (db1 != null && db1.isOpen()) {
            db1.close();
        }
    }

    private void startRecording() {
        if (shouldRecord()) {
            String connectedCustomer = ApplicationSettings.getPref(AppConstants.CLOUD_CUSTOMER_NUMBER, "");
            if (connectedCustomer != null && !connectedCustomer.isEmpty()) {
                ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER, connectedCustomer);
                Intent recorderIntent = new Intent(this, RecorderService.class);
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    startForegroundService(recorderIntent);
                } else {
                    startService(recorderIntent);
                }
            }
        }
    }

    private void invokeNextCustomer(String data) {
        try {
            MyJsonObject jsonObject = new MyJsonObject(data);

            if (jsonObject.has("rdmessage")) {
                String message = jsonObject.getString("rdmessage");
                ApplicationSettings.putPref(AppConstants.RAD_MESSAGE_VALUE, message);
            }

            if (jsonObject.has("info")) {
                String information = jsonObject.getString("info");
                JSONObject jsonObject2 = new JSONObject(information);
                String data1 = "";
                if (jsonObject2.has("data")) {
                    data1 = jsonObject2.getString("data");
                }

                JSONObject infoJsonObject = new JSONObject(data1);

                String alert_message = infoJsonObject.getString("message");
                String alert_title = infoJsonObject.getString("title");
                String tts_enable = infoJsonObject.getString("tts_enable");

                String customerNumber = "";
                if (infoJsonObject.has("customer_number")) {
                    customerNumber = infoJsonObject.getString("customer_number");
                }

                String customerName = "";
                if (infoJsonObject.has("customer_name")) {
                    customerName = infoJsonObject.getString("customer_name");
                }

                if (customerNumber != null && !(customerNumber.isEmpty())) {
                    NotificationData.notificationData = true;
                    NotificationData.knolarity_name = customerName;
                    NotificationData.knolarity_number = customerNumber;
                    NotificationData.dialledCustomerNumber = customerNumber;
                    NotificationData.substatus1 = "";
                    NotificationData.substatus2 = "";
                    NotificationData.statusString = "";
                    NotificationData.notes_string = "";

                    if (infoJsonObject.has("status")) {
                        NotificationData.statusString = infoJsonObject.getString("status");
                    }

                    if (infoJsonObject.has("substatus1")) {
                        NotificationData.substatus1 = infoJsonObject.getString("substatus1");
                    }

                    if (infoJsonObject.has("status")) {
                        NotificationData.substatus2 = infoJsonObject.getString("substatus2");
                    }

                    if (infoJsonObject.has("notes")) {
                        NotificationData.notes_string = infoJsonObject.getString("notes");
                    }

                    ApplicationSettings.putPref(AfterCallActivity.AFTER_CALL_NAME, customerName);
                    ApplicationSettings.putPref(AppConstants.CLOUD_CUSTOMER_NUMBER, customerNumber);
                    startRecording();
                }

                String sign_out = "";
                if (infoJsonObject.has("sign_out")) {
                    sign_out = infoJsonObject.getString("sign_out");
                }

                String offlineUrl = "";
                if (infoJsonObject.has("geturl")) {
                    offlineUrl = infoJsonObject.getString("geturl");
                }
                getUrl = offlineUrl;

                if (alert_message != null && !(alert_message.isEmpty())) {
                    Intent intent4 = new Intent(UearnActivity.this, MyAlertDialog.class);
                    intent4.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                    intent4.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                    if (infoJsonObject.has("rdmessage")) {
                        alert_message = infoJsonObject.getString("rdmessage");
                        intent4.putExtra("RDMESSAGE", alert_message);
                    } else {
                        intent4.putExtra("MESSAGE", alert_message);
                    }
                    if (infoJsonObject.has("rdaction")) {
                        String rdaction = infoJsonObject.getString("rdaction");
                        intent4.putExtra("RDACTION", rdaction);
                    }
                    intent4.putExtra("TTSENABLE", tts_enable);
                    intent4.putExtra("TITLE", alert_title);
                    intent4.putExtra("SIGNOUT", sign_out);
                    if (offlineUrl != null && !offlineUrl.isEmpty()) {
                        intent4.putExtra("GETURL", offlineUrl);
                    }
                    startActivityForResult(intent4, 3);
                }
            }
        } catch (Exception e) {

        }
    }

    public void dismissKeyboard(Activity activity) {
        InputMethodManager imm = (InputMethodManager) activity.getSystemService(Context.INPUT_METHOD_SERVICE);
        if (null != activity.getCurrentFocus())
            imm.hideSoftInputFromWindow(activity.getCurrentFocus().getApplicationWindowToken(), 0);
    }

    public static boolean isBluetoothHeadsetConnected() {
        BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        return mBluetoothAdapter != null && mBluetoothAdapter.isEnabled() && mBluetoothAdapter.getProfileConnectionState(BluetoothHeadset.HEADSET) == BluetoothHeadset.STATE_CONNECTED;
    }

    @Override
    public void onBackPressed() {
        return;
    }

    public void submit() {

        //Log.d("LoginTime", "UearnActivity - submit()");

        SmarterSMBApplication.endCallButtonClicked = false;
        SmarterSMBApplication.autoCallAnswered = false;
        SmarterSMBApplication.autoCallDisconnected = false;
        SmarterSMBApplication.showSingleAcp = false;
        SmarterSMBApplication.currentModeIsConnected = false;

        boolean truePredictive = ApplicationSettings.getPref(AppConstants.TRUE_PREDICTIVE, false);
        if (truePredictive) {
            SmarterSMBApplication.incomingCallAcceptedByAgent = true;
        } else {
            SmarterSMBApplication.incomingCallAcceptedByAgent = false;
        }

        if (statusString != null && !statusString.isEmpty()) {
            if (status == null || status.isEmpty()) {
                status = statusString;
            }
        } else if (checkRNR) {
            if (status == null || status.isEmpty()) {
                status = "NEW DATA";
            }
        } else if (status == null || status.isEmpty()) {
            status = "NEW DATA";
        }

        if (callbackCheck) {
            if (!((final_start_hour != 0) || (final_end_hour != 0) || (final_start_min != 0) || (final_end_min != 0))) {
                if (followupError != null) {
                    followupError.setVisibility(View.VISIBLE);
                }
            } else {
                if (ApplicationSettings.containsPref(AppConstants.SSU_ON_SIO)) {
                    boolean ssuonsio = ApplicationSettings.getPref(AppConstants.SSU_ON_SIO, false);
                    if (ssuonsio) {
                        sendSalesStatusUpdateViaSocketEmit();
                    }
                }
                saveSalesStatusInLocalDB();
                updateAppointmentToCompletedStatus(NotificationData.dialledCustomerNumber);
                handleSubmitNormal();
            }
        } else {
            if (ApplicationSettings.containsPref(AppConstants.SSU_ON_SIO)) {
                boolean ssuonsio = ApplicationSettings.getPref(AppConstants.SSU_ON_SIO, false);
                if (ssuonsio) {
                    sendSalesStatusUpdateViaSocketEmit();
                }
            }
            saveSalesStatusInLocalDB();
            updateAppointmentToCompletedStatus(NotificationData.dialledCustomerNumber);
            handleSubmitNormal();
        }

        if (SmarterSMBApplication.SmartUser != null && !SmarterSMBApplication.SmartUser.getEmulationOn()) {
            if (SmarterSMBApplication.isRemoteDialledStart || SmarterSMBApplication.currentStateIsStartMode) {
                if (ApplicationSettings.containsPref(AppConstants.DISALLOW_HEADPHONES)) {
                    boolean disallowHeadphones = ApplicationSettings.getPref(AppConstants.DISALLOW_HEADPHONES, false);
                    if (disallowHeadphones) {

                    } else {
                        if (!SmarterSMBApplication.isHeadPhone) {
                            if (!isBluetoothHeadsetConnected()) {
                                Toast.makeText(this, "Headphone is mandatory. Please connect your headphone", Toast.LENGTH_SHORT).show();
                                SmarterSMBApplication.headphoneNotConnected = true;
                                sendRemoteDialStopRequestForHeadPhoneStatus("");
                                return;
                            }
                        }
                    }
                } else {
                    if (!SmarterSMBApplication.isHeadPhone) {
                        if (!isBluetoothHeadsetConnected()) {
                            Toast.makeText(this, "Headphone is mandatory. Please connect your headphone", Toast.LENGTH_SHORT).show();
                            SmarterSMBApplication.headphoneNotConnected = true;
                            sendRemoteDialStopRequestForHeadPhoneStatus("");
                            return;
                        }
                    }
                }
            }
        }
    }

    private void sendRemoteDialStopRequestForHeadPhoneStatus(String message) {
        if (CommonUtils.isNetworkAvailable(this)) {
            new APIProvider.GetRemoteDialerStop(message, 0, this, "Stopping. Please wait..", new API_Response_Listener<String>() {
                @Override
                public void onComplete(String data, long request_code, int failure_code) {
                    String text = "";
                    try {
                        JSONObject jsonObject = new JSONObject(data);
                        if (jsonObject.has("text")) {
                            text = jsonObject.getString("text");
                        }
                    } catch (Exception e) {

                    }
                }
            }).call();
        } else {
            Toast.makeText(this, "You have no Internet connection. Click on SUBMIT to go back to Home Screen.", Toast.LENGTH_SHORT).show();
        }
    }

    private void saveSalesStatusInLocalDB() {

        if (customerNumber == null || customerNumber.isEmpty()) {
            customerNumber = NotificationData.dialledCustomerNumber;
        }

        String leadSource = NotificationData.leadSource;
        if (leadSource == null || leadSource.isEmpty()) {
            leadSource = getLeadSource(customerNumber);
        }

        if (remarks.getText().toString() != null && !remarks.getText().toString().isEmpty()) {
            NotificationData.remarks = remarks.getText().toString();
            ApplicationSettings.putPref(AFTER_CALL_NOTES, NotificationData.remarks);
        }
        String notes = ApplicationSettings.getPref(AFTER_CALL_NOTES, "");
        if (notes == null || notes.isEmpty()) {
            notes = getNotes(customerNumber);
        }

        long endTime = ApplicationSettings.getPref(AppConstants.CALL_END_TIME, 0l);
        long submitTime = ApplicationSettings.getPref(AppConstants.CALL_SUBMIT_TIME, 0l);
        long wrapUpTime = getTimeDifference(endTime, submitTime);
        String wrapup = String.valueOf(wrapUpTime);
        String eventstartdate = "";
        Calendar calender = new GregorianCalendar(final_start_year, final_start_month, final_start_dayOfMonth, final_start_hour, final_start_min);
        nextFollowUpTime = calender.getTimeInMillis();

        if (nextFollowUpTime > 0) {
            Date startDate = new Date();
            startDate.setTime(nextFollowUpTime);
            eventstartdate = CommonUtils.getTimeFormatInISO(startDate);
        }

        if (customerNumber != null && !customerNumber.isEmpty()) {
            CommonUtils.saveStatusToSmartContactDB(getApplicationContext(), customerNumber, "", status, notes, subStatus1, subStatus2, NotificationData.customerFeedback, leadSource, wrapup, eventstartdate, NotificationData.transactionId);
        }
    }

    public void handleSubmitNormal() {
        NotificationData.isSocketResponse = false;
        if (callEndedFromDuringCall) {
            navigateBackAndStop = true;
            onStop();
        }

        if (SmarterSMBApplication.connectedCustomerInProcess) {
            SmarterSMBApplication.connectedCustomerInProcess = false;
        }

        if (SmarterSMBApplication.disconnectedCustomerInProcess) {
            SmarterSMBApplication.disconnectedCustomerInProcess = false;
        }

        dismissKeyboard(this);
        navigateBackAndStop = true;

        boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
        if (sequencialEndpoint) {
            layout5.setVisibility(View.GONE);
        }

        String qanda = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");

        if (checkRNR) {
            checkRNR = false;
            String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
            if (questionsAct != null && !questionsAct.isEmpty()) {
                formButtonLayout.setVisibility(View.GONE);
                if (NotificationData.callFromDialer) {
                    goToHomeScreen = true;
                    updateSalesStageSync();
                } else {
                    updateSalesStageSync();
                }
            } else {
                if (UearnHome.dialingFromList || UearnHome.manualDialing) {
                    this.finish();
                } else {
                    sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
                    if (sequencialEndpoint) {
                        goToHomeScreen = true;
                        if (customersListLayout != null) {
                            customersListLayout.setVisibility(View.GONE);
                        }
                        endCallButtonLayout.setVisibility(View.GONE);
                        updateSalesStageSync();
                    } else {
                        updateSalesStageSync();
                    }
                }
            }
        } else {
            if (UearnHome.manualDialing)
                UearnActivity.redialScenarioCompleted = false;
            else
                UearnActivity.redialScenarioCompleted = !UearnHome.dialingFromList;

            ApplicationSettings.putPref(AFTER_CALL_NAME, "");
            ApplicationSettings.putPref(AFTER_CALL_APPOINTMENT_ID, "");

            onBackPressed = false;

            if (leadSheetAttached) {
                leadSheetAttached = false;
            }
            if (followupError != null)
                followupError.setVisibility(View.GONE);

            if (!callbackCheck) {
                if ((status == null || status.isEmpty())) {
                    if (!checkRNR) {
                        String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
                        if (questionsAct != null && !questionsAct.isEmpty()) {
                            sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
                            if (sequencialEndpoint) {
                                if ((connectedCustomer == null || connectedCustomer.isEmpty())) {
                                    if (ServiceHandler.processCompleted) {
                                        ServiceHandler.processCompleted = false;
                                        if (callEndedFromDuringCall) {
                                            callEndedFromDuringCall = false;
                                            updateSalesStageSync();
                                        } else if (submitButtonClicked) {
                                            submitButtonClicked = false;
                                            updateSalesStageSync();
                                        }
                                    }
                                } else if (connectedCustomer != null && !connectedCustomer.isEmpty()) {
                                    layout5.setVisibility(View.VISIBLE);
                                    submitLayout.setVisibility(View.GONE);
                                }
                            } else {
                                if (ServiceHandler.processCompleted) {
                                    ServiceHandler.processCompleted = false;
                                    if (callEndedFromDuringCall) {
                                        callEndedFromDuringCall = false;
                                        updateSalesStageSync();
                                    } else if (submitButtonClicked) {
                                        submitButtonClicked = false;
                                        updateSalesStageSync();
                                    }
                                } else {
                                    layout5.setVisibility(View.VISIBLE);
                                    submitLayout.setVisibility(View.GONE);
                                }
                            }
                        } else {
                            sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
                            if (sequencialEndpoint) {
                                if (qanda != null && !qanda.isEmpty() && !qanda.equals("null")) {
                                    if ((connectedCustomer == null || connectedCustomer.isEmpty())) {

                                    } else {
                                        if (NotificationData.statusString != null && !NotificationData.statusString.isEmpty() && NotificationData.statusString.equals("NEW DATA")) {
                                            layout5.setVisibility(View.VISIBLE);
                                            submitLayout.setVisibility(View.GONE);
                                        }
                                    }
                                } else {
                                    if ((connectedCustomer == null || connectedCustomer.isEmpty())) {

                                    } else {

                                    }
                                }
                            } else {
                                Toast.makeText(this, "Please Select Status", Toast.LENGTH_SHORT).show();
                            }
                        }
                    } else {
                        this.finish();
                    }
                } else if (status != null && (status.equalsIgnoreCase("NEW DATA"))) {
                    if (!checkRNR) {
                        String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
                        if (questionsAct != null && !questionsAct.isEmpty()) {
                            sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
                            if (sequencialEndpoint) {
                                if ((connectedCustomer == null || connectedCustomer.isEmpty())) {
                                    if (ServiceHandler.processCompleted) {
                                        ServiceHandler.processCompleted = false;
                                        updateSalesStageSync();
                                    }
                                } else {
                                    if (mmtInvalidButtonClicked || submitButtonClicked) {
                                        if (mmtInvalidButtonClicked)
                                            mmtInvalidButtonClicked = false;
                                        if (submitButtonClicked)
                                            submitButtonClicked = false;
                                        updateSalesStageSync();
                                    } else {
                                        layout5.setVisibility(View.VISIBLE);
                                        submitLayout.setVisibility(View.GONE);
                                    }
                                }
                            } else {
                                if (ServiceHandler.processCompleted) {
                                    ServiceHandler.processCompleted = false;
                                    if (callEndedFromDuringCall) {
                                        callEndedFromDuringCall = false;
                                        updateSalesStageSync();
                                    } else if (submitButtonClicked) {
                                        submitButtonClicked = false;
                                        updateSalesStageSync();
                                    }
                                } else {
                                    if (mmtInvalidButtonClicked || submitButtonClicked) {
                                        if (mmtInvalidButtonClicked)
                                            mmtInvalidButtonClicked = false;
                                        if (submitButtonClicked)
                                            submitButtonClicked = false;
                                        updateSalesStageSync();
                                    } else {
                                        layout5.setVisibility(View.VISIBLE);
                                        submitLayout.setVisibility(View.GONE);
                                    }
                                }
                            }
                        } else {
                            sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
                            if (sequencialEndpoint) {
                                if (qanda != null && !qanda.isEmpty() && !qanda.equals("null")) {
                                    if ((connectedCustomer == null || connectedCustomer.isEmpty())) {

                                    } else {
                                        layout5.setVisibility(View.VISIBLE);
                                        submitLayout.setVisibility(View.GONE);
                                    }
                                }
                            } else {
                                Toast.makeText(this, "Please Select Status", Toast.LENGTH_SHORT).show();
                            }
                        }
                    } else {
                        updateSalesStageSync();
                    }
                } else if (!checkRNR && status != null && (status.equalsIgnoreCase("INTERESTED"))) {

                    if (remarks.getText().toString() != null && !remarks.getText().toString().isEmpty())
                        NotificationData.remarks = remarks.getText().toString();

                    if (subStatus1 != null && (subStatus1.equalsIgnoreCase("HOT LEAD") || subStatus1.equalsIgnoreCase("COLD LEAD"))) {

                        if (remarks.getText().toString() != null && !remarks.getText().toString().isEmpty())
                            NotificationData.remarks = remarks.getText().toString();

                        if (create_followup_card.getVisibility() == View.VISIBLE) {
                            if (!((final_start_hour != 0) || (final_end_hour != 0) || (final_start_min != 0) || (final_end_min != 0))) {
                                followupError.setVisibility(View.VISIBLE);
                            } else {
                                if (NotificationData.callFromDialer) {
                                    goToHomeScreen = true;
                                }
                                updateSalesStageSync();
                            }
                        } else {
                            if (!ServiceHandler.callDisconnected) {

                            } else {
                                updateSalesStageSync();
                            }
                        }
                    } else {
                        if (callEndedFromDuringCall) {
                            callEndedFromDuringCall = false;
                            updateSalesStageSync();
                        }

                    }
                } else if (responseCheck) {
                    Toast.makeText(this, "Please wait..", Toast.LENGTH_SHORT).show();
                } else {
                    if (sequencialEndpoint) {
                        if (!ServiceHandler.callDisconnected) {
                            if (submitButtonPressed) {
                                submitButtonPressed = false;
                                updateSalesStageSync();
                            }
                        } else {
                            updateSalesStageSync();
                        }
                    } else {
                        updateSalesStageSync();
                    }
                }
            } else {
                if (create_followup_card.getVisibility() == View.VISIBLE) {
                    if (!((final_start_hour != 0) || (final_end_hour != 0) || (final_start_min != 0) || (final_end_min != 0))) {
                        Toast.makeText(this, "Please Set a Follow-up", Toast.LENGTH_SHORT).show();
                        followupError.setVisibility(View.VISIBLE);
                    } else {
                        updateSalesStageSync();
                    }
                } else {
                    updateSalesStageSync();
                }
            }
        }

        ServiceHandler.callDisconnected = false;
        getInfoCalled = false;
        callEndedFromDuringCall = false;
        submitButtonPressedFromTimer = false;

        SmarterSMBApplication.agentDisconnectScenario = false;
        SmarterSMBApplication.customerDisconnectScenario = false;
        SmarterSMBApplication.legADisconnectScenario = false;
        SmarterSMBApplication.navigateToACP = false;
    }

    private void updateAppointmentToCompletedStatus() {
        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db = dbHelper.getWritableDatabase();

        long startMls = 0;
        int rnr = 0;

        String appointment_id = null;
        if (reminderdbId != 0) {
            localdbId = reminderdbId;
            Cursor cursor = db.rawQuery("SELECT * FROM remindertbNew where _id=" + "'" + reminderdbId + "'", null);
            if (cursor.getCount() > 0) {
                cursor.moveToFirst();
                appointment_id = cursor.getString(cursor.getColumnIndex("APPOINTMENT_ID"));
                mydbAppointmentId = appointment_id;
                startMls = cursor.getLong(cursor.getColumnIndex("START_TIME"));
                String flpvalue = cursor.getString(cursor.getColumnIndex("FLP_COUNT"));
                rnr = cursor.getInt(cursor.getColumnIndex("RNR_COUNT"));
                if (flpvalue != null && !flpvalue.isEmpty()) {
                    flpCount = Integer.parseInt(flpvalue);
                }
            }
        } else {
            Date date = new Date();
            String selection = "START_TIME" + "<=" + date.getTime() + " AND " + "COMPLETED='" + 0 + "'";
            Cursor cursor = db.query("remindertbNew", null, selection, null, null, null, "START_TIME ASC");
            if (cursor.getCount() > 0) {
                cursor.moveToFirst();
                while (!cursor.isAfterLast()) {
                    String customer_number = cursor.getString(cursor.getColumnIndex("TO1"));
                    if (PhoneNumberUtils.compare(customer_number, customerNumber)) {
                        localdbId = cursor.getLong(cursor.getColumnIndex("_id"));
                        appointment_id = cursor.getString(cursor.getColumnIndex("APPOINTMENT_ID"));
                        mydbAppointmentId = appointment_id;
                        startMls = cursor.getLong(cursor.getColumnIndex("START_TIME"));
                        String flpvalue = cursor.getString(cursor.getColumnIndex("FLP_COUNT"));
                        rnr = cursor.getInt(cursor.getColumnIndex("RNR_COUNT"));
                        if (flpvalue != null && !flpvalue.isEmpty()) {
                            flpCount = Integer.parseInt(flpvalue);
                        }
                    }
                    cursor.moveToNext();
                }
            }
        }
        updateLocDB(localdbId);
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        TimeZone tz = TimeZone.getTimeZone("UTC");
        df.setTimeZone(tz);
        Date calldate = new Date();
        try {
            calldate = df.parse(callStartTime);
        } catch (Exception e) {
        }
        long callTime = calldate.getTime();
        long tatValue = callTime - startMls;
        if (tatValue < 0) {
            tatValue = 0;
        }
        Integer tat = (int) (long) (tatValue);
        int tatInSec = (tat / 1000) % 60;
        getCalendarEntryInfo.user_id = SmarterSMBApplication.SmartUser.getId();
        getCalendarEntryInfo.appointment_id = appointment_id;
        getCalendarEntryInfo.responsestatus = "completed";
        getCalendarEntryInfo.update_all_fields = false;
        getCalendarEntryInfo.tat = tatInSec;
        getCalendarEntryInfo.flp_count = "" + flpCount;
        if (duraionOfACall == null) {
            rnr = 0;
        } else if (!(duraionOfACall.equalsIgnoreCase("0")) || duraionOfACall.isEmpty()) {
            rnr = 0;
        }
        getCalendarEntryInfo.rnrCount = rnr;
        if (callStartTime != null && !(callStartTime.isEmpty())) {
            getCalendarEntryInfo.created_at = callStartTime;
        }
        if (db.isOpen()) {
            db.close();
        }
        dbHelper.close();
    }

    private void updateLocDB(long localDBId) {
        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        ContentValues cv = new ContentValues();
        cv.put("COMPLETED", 1);
        cv.put("APPOINTMENT_TYPE", "complete_appointment");
        cv.put("RESPONSE_STATUS", "completed");
        if (callStartTime != null && !(callStartTime.isEmpty())) {
            long startTime = CommonUtils.stringToMilliSec(callStartTime, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
            cv.put("CREATED_AT", startTime);
        }
        cv.put("UPDATED_AT", System.currentTimeMillis());
        cv.put("RNR_COUNT", rnr_count);
        boolean serverAptUpdates = ApplicationSettings.getPref(AppConstants.SERVER_APT_UPDATES, false);
        if (serverAptUpdates) {
            cv.put("UPLOAD_STATUS", 1);
        } else {
            cv.put("UPLOAD_STATUS", 0);
        }

        db.update("remindertbNew", cv, "_id=" + localDBId, null);
        if (db != null && db.isOpen()) {
            db.close();
        }
        if (dbHelper != null)
            dbHelper.close();
    }

    private String getLeadSource(String number) {
        String leadSource = "";
        try {
            MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
            SQLiteDatabase dbase = dbHelper.getWritableDatabase();
            if (number != null && !number.isEmpty()) {
                String selection = "TO1=" + "'" + number + "'";
                Cursor cursor = dbase.query("remindertbNew", null, selection, null, null, null, "UPDATED_AT DESC");
                if (cursor != null && cursor.getCount() > 0) {
                    cursor.moveToFirst();
                    leadSource = cursor.getString(cursor.getColumnIndex("LEAD_SOURCE"));
                }
                if (dbase.isOpen()) {
                    dbase.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return leadSource;
    }

    private String getEmailId(String number) {
        String leadSource = "";
        try {
            MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
            SQLiteDatabase dbase = dbHelper.getWritableDatabase();
            if (number != null && !number.isEmpty()) {
                String selection = "TO1=" + "'" + number + "'";
                Cursor cursor = dbase.query("remindertbNew", null, selection, null, null, null, "UPDATED_AT DESC");
                if (cursor != null && cursor.getCount() > 0) {
                    cursor.moveToFirst();
                    leadSource = cursor.getString(cursor.getColumnIndex("EMAILID"));
                }
                if (dbase.isOpen()) {
                    dbase.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return leadSource;
    }

    private String getCustomerToContact(String number) {
        String customerId = "";
        try {
            MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
            SQLiteDatabase dbase = dbHelper.getWritableDatabase();
            if (number != null && !number.isEmpty()) {
                String selection = "TO1=" + "'" + number + "'";
                Cursor cursor = dbase.query("remindertbNew", null, selection, null, null, null, "UPDATED_AT DESC");
                if (cursor != null && cursor.getCount() > 0) {
                    cursor.moveToFirst();
                    customerId = cursor.getString(cursor.getColumnIndex("CUSTOMER_ID"));
                }
                if (dbase.isOpen()) {
                    dbase.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return customerId;
    }

    private void getDetailsFromDb(String appointment_id) {
        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db = dbHelper.getWritableDatabase();

        Cursor cursor = db.rawQuery("SELECT * FROM remindertbNew where _id=" + "'" + appointment_id + "'", null);
        if (cursor.getCount() > 0) {
            cursor.moveToFirst();
            String location = cursor.getString(cursor.getColumnIndex("LOCATION"));
            callerName = cursor.getString(cursor.getColumnIndex("TONAME"));
            String designation = cursor.getString(cursor.getColumnIndex("DESIGNATION"));
            String companyName = cursor.getString(cursor.getColumnIndex("COMPANY_NAME"));
            String callerNumber = cursor.getString(cursor.getColumnIndex("TO1"));
            String emailIdString = cursor.getString(cursor.getColumnIndex("EMAILID"));
            String sourceOfLead = cursor.getString(cursor.getColumnIndex("LEAD_SOURCE"));
            String customerToContact = cursor.getString(cursor.getColumnIndex("CUSTOMER_ID"));
            String notes = cursor.getString(cursor.getColumnIndex("NOTES"));
            String subject = cursor.getString(cursor.getColumnIndex("SUBJECT"));
            String status = cursor.getString(cursor.getColumnIndex("STATUS"));
            currentSalesStatus = status;
            currentSubject = subject;
            ApplicationSettings.putPref("SUBJECT", currentSubject);
            addressString = cursor.getString(cursor.getColumnIndex("COMPANY_ADDRESS"));
            flpValue = cursor.getInt(cursor.getColumnIndex("FLP_COUNT"));

            if (radStarted) {
                if (FlpCursorAdapter.callFromDoneList || UearnHome.dialingFromList) {
                    ApplicationSettings.putPref(AFTER_CALL_NAME, callerName);
                }
            } else {
                ApplicationSettings.putPref(AFTER_CALL_NAME, callerName);
            }
            ApplicationSettings.putPref(AFTER_CALL_DESIGNATION, designation);
            ApplicationSettings.putPref(AFTER_CALL_PHONE, callerNumber);
            ApplicationSettings.putPref(AFTER_CALL_EMAIL, emailIdString);
            ApplicationSettings.putPref(AFTER_CALL_ADDRESS, location);
            ApplicationSettings.putPref(AFTER_CALL_REMARKS, notes);
            ApplicationSettings.putPref(AFTER_CALL_COMPANY, companyName);
            ApplicationSettings.putPref(AFTER_CALL_LEAD, sourceOfLead);
            ApplicationSettings.putPref(CUSTOMER_TO_CONTACT, customerToContact);
            NotificationData.remarks = notes;
            NotificationData.leadSource = sourceOfLead;
        }
        cursor.close();
        if (db.isOpen()) {
            db.close();
        }
        dbHelper.close();
    }

    private void getDetailsFromDbSequencial(String appointment_id) {
        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db = dbHelper.getWritableDatabase();

        Cursor cursor = db.rawQuery("SELECT * FROM remindertbNew where _id=" + "'" + appointment_id + "'", null);
        if (cursor.getCount() > 0) {
            cursor.moveToFirst();
            String location = cursor.getString(cursor.getColumnIndex("LOCATION"));
            callerName = cursor.getString(cursor.getColumnIndex("TONAME"));
            String designation = cursor.getString(cursor.getColumnIndex("DESIGNATION"));
            String companyName = cursor.getString(cursor.getColumnIndex("COMPANY_NAME"));
            String callerNumber = cursor.getString(cursor.getColumnIndex("TO1"));
            String emailIdString = cursor.getString(cursor.getColumnIndex("EMAILID"));
            String sourceOfLead = cursor.getString(cursor.getColumnIndex("LEAD_SOURCE"));
            String customerToContact = cursor.getString(cursor.getColumnIndex("CUSTOMER_ID"));
            flpValue = cursor.getInt(cursor.getColumnIndex("FLP_COUNT"));

            ApplicationSettings.putPref(AFTER_CALL_NAME, callerName);
            ApplicationSettings.putPref(AFTER_CALL_DESIGNATION, designation);
            ApplicationSettings.putPref(AFTER_CALL_PHONE, callerNumber);
            ApplicationSettings.putPref(AFTER_CALL_COMPANY, companyName);
            ApplicationSettings.putPref(AFTER_CALL_EMAIL, emailIdString);
            ApplicationSettings.putPref(AFTER_CALL_LEAD, sourceOfLead);
            ApplicationSettings.putPref(CUSTOMER_TO_CONTACT, customerToContact);
            ApplicationSettings.putPref(AFTER_CALL_ADDRESS, location);
        }

        cursor.close();
        if (db.isOpen()) {
            db.close();
        }
        dbHelper.close();
    }

    public void setLayoutHeader() {
        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db = dbHelper.getWritableDatabase();

        if (customerNumber != null && !(customerNumber.isEmpty())) {
            Cursor cursor = db.rawQuery("SELECT * FROM remindertbNew where TO1=" + "'" + customerNumber + "'", null);
            if (cursor.getCount() > 0) {
                cursor.moveToFirst();

                do {
                    lastDbId = cursor.getLong(cursor.getColumnIndex("_id"));
                    String followUpValue = cursor.getString(cursor.getColumnIndex("FLP_COUNT"));
                    subStatus1 = cursor.getString(cursor.getColumnIndex("SUBSTATUS1"));
                    if (followUpValue != null && !followUpValue.isEmpty()) {
                        int temp = Integer.parseInt(followUpValue);
                        if (temp > flpCount) {
                            flpCount = Integer.parseInt(followUpValue);
                        }
                    }
                } while (cursor.moveToNext());
            }
            cursor.close();

        } else if (reminderdbId != 0) {

            Cursor cursor = db.rawQuery("SELECT * FROM remindertbNew where _id=" + "'" + reminderdbId + "'", null);
            if (cursor.getCount() > 0) {
                cursor.moveToFirst();

                String followUpValue = cursor.getString(cursor.getColumnIndex("FLP_COUNT"));
                subStatus1 = cursor.getString(cursor.getColumnIndex("SUBSTATUS1"));

                if (followUpValue != null && !followUpValue.isEmpty()) {
                    int count = Integer.parseInt(followUpValue);
                    if (count > flpCount) {
                        flpCount = count;
                    }
                }
            }
            cursor.close();
        }
        if (db.isOpen()) {
            db.close();
        }
        dbHelper.close();
    }

    private void getSelectedCustomer(String number) {

        try {
            MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
            SQLiteDatabase dbase = dbHelper.getWritableDatabase();

            String selection = "TO1=" + "'" + number + "'";
            Cursor cursor = dbase.query("remindertbNew", null, selection, null, null, null, "UPDATED_AT DESC");

            customerList = new ArrayList<>();
            tempcustomerList = new ArrayList<>();
            if (cursor != null && cursor.getCount() > 0) {
                while (cursor.moveToNext()) {
                    int itemId = cursor.getInt(cursor.getColumnIndex("_id"));
                    String customerName = cursor.getString(cursor.getColumnIndex("TONAME"));
                    String customerNumber = cursor.getString(cursor.getColumnIndex("TO1"));
                    String status = cursor.getString(cursor.getColumnIndex("STATUS"));
                    String substatus1 = cursor.getString(cursor.getColumnIndex("SUBSTATUS1"));
                    String substatus2 = cursor.getString(cursor.getColumnIndex("SUBSTATUS2"));
                    String notes = cursor.getString(cursor.getColumnIndex("NOTES"));
                    String customkvs = cursor.getString(cursor.getColumnIndex("CUSTOMKVS"));
                    if (status != null && !status.isEmpty())
                        NotificationData.statusString = status;
                    else
                        NotificationData.statusString = "NEW DATA";
                    CustomerLite customerLiteInfo = new CustomerLite(itemId, customerName, customerNumber, status, substatus1, substatus2, "", "", notes, "", customkvs);
                    customerList.add(customerLiteInfo);
                }
            }
            if (customerList != null && customerList.size() > 0) {
                CustomerLite customerLiteInfo = customerList.get(0);
                tempcustomerList.add(0, customerLiteInfo);
                ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER, "");
                ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER_NAME, "");
                String customerListData = new Gson().toJson(tempcustomerList);
                ApplicationSettings.putPref(AppConstants.CUSTOMER_LIST_DATA, customerListData);
            } else {
                String customersListViewData = ApplicationSettings.getPref(AppConstants.CUSTOMER_LIST_DATA, "");
                CustomerLite[] listOfCustomers = new Gson().fromJson(customersListViewData, CustomerLite[].class);
                if (listOfCustomers != null && listOfCustomers.length > 0) {
                    for (int i = 0; i < listOfCustomers.length; i++) {
                        CustomerLite customer = listOfCustomers[i];
                        customer.type = "";
                        tempcustomerList.add(i, customer);
                    }
                }
                ApplicationSettings.putPref(AppConstants.CUSTOMER_LIST_DATA, "");
                ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER, "");
                ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER_NAME, "");
                String customerListData = new Gson().toJson(tempcustomerList);
                ApplicationSettings.putPref(AppConstants.CUSTOMER_LIST_DATA, customerListData);
            }
            if (dbase.isOpen()) {
                dbase.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void resetCallBackSet() {
        final_start_year = 0;
        final_start_month = 0;
        final_start_dayOfMonth = 0;
        final_start_hour = 0;
        final_start_min = 0;
    }

    @Override
    public void onClick(View view) {
        int id = view.getId();
        if (id == R.id.update_view) {
            if (checkRNR) {
                return;
            }
            radMessageLayout.setVisibility(View.GONE);
            radMessageText.setVisibility(View.GONE);
            resetCallBackSet();
            updateMainLinearLayout.setBackgroundResource(R.drawable.card_border_layout);
            redialMainLinearLayout.setBackgroundResource(R.color.card_background_color);
            rnrMainLinearLayout.setBackgroundResource(R.color.card_background_color);
            callbackMainLinearLayout.setBackgroundResource(R.color.card_background_color);
            callbackCheck = false;
            submitLayout.setVisibility(View.VISIBLE);
            String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
            if (questionsAct != null && !questionsAct.isEmpty()) {
                formButtonLayout.setVisibility(View.GONE);
                create_followup_card.setVisibility(View.GONE);
                uView.setVisibility(View.VISIBLE);
                cView.setVisibility(View.GONE);
                rView.setVisibility(View.GONE);
                redialView.setVisibility(View.GONE);
                remarksCard.setVisibility(View.GONE);
                questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
                if (questionsAct != null && !questionsAct.isEmpty()) {
                    acpBottomLayout.setVisibility(View.VISIBLE);
                    mmtAcpBottomLayout.setVisibility(View.GONE);
                    checkRNR = false;
                }
            } else {
                callbackCheck = false;
                checkRNR = false;
                changeLayoutColor(111);
                uView.setVisibility(View.VISIBLE);
                cView.setVisibility(View.GONE);
                rView.setVisibility(View.GONE);
                redialView.setVisibility(View.GONE);
                remarksCard.setVisibility(View.GONE);

                if (followUpButtonClicked) {
                    create_followup_card.setVisibility(View.VISIBLE);
                    llCallAgain.setVisibility(View.VISIBLE);
                    orText.setVisibility(View.VISIBLE);
                    remarksCard.setVisibility(View.VISIBLE);
                } else {
                    create_followup_card.setVisibility(View.GONE);
                    llCallAgain.setVisibility(View.GONE);
                    orText.setVisibility(View.GONE);
                    remarksCard.setVisibility(View.GONE);
                }
                checkViewFocus();
                if (leadSheetAttached) {
                    changeLayoutColor(7);
                }
            }
            layout5.setVisibility(View.GONE);
        } else if (id == R.id.redial_layout_view) {
            String questionsAct;
            radMessageLayout.setVisibility(View.GONE);
            radMessageText.setVisibility(View.GONE);
            SmarterSMBApplication.remoteEnabledRedialScenario = true;
            SmarterSMBApplication.showSingleAcp = false;
            SmarterSMBApplication.isCurrentQuesMandatory = false;
            ApplicationSettings.putPref(AppConstants.ALLOW_REDIAL_FOR_REMOTE_ENABLED, true);
            redialMainLinearLayout.setBackgroundResource(R.drawable.card_border_layout);
            updateMainLinearLayout.setBackgroundResource(R.color.card_background_color);
            rnrMainLinearLayout.setBackgroundResource(R.color.card_background_color);
            callbackMainLinearLayout.setBackgroundResource(R.color.card_background_color);

            long callEndTime = System.currentTimeMillis();
            ApplicationSettings.putPref(AppConstants.CALL_END_TIME, callEndTime);

            if (SmarterSMBApplication.isDiallingFollowUpC2C) {
                SmarterSMBApplication.isDiallingFollowUpC2C = false;
            }

            if (SmarterSMBApplication.followupsInPredictive) {
                SmarterSMBApplication.followupsInPredictive = false;
            }

            if (SmarterSMBApplication.connectedCustomerInProcess) {
                SmarterSMBApplication.connectedCustomerInProcess = false;
            }

            if (SmarterSMBApplication.disconnectedCustomerInProcess) {
                SmarterSMBApplication.disconnectedCustomerInProcess = false;
            }

            if (ApplicationSettings.containsPref(AppConstants.ADHOC_CALL)) {
                boolean adhocCall = ApplicationSettings.getPref(AppConstants.ADHOC_CALL, false);
                if (adhocCall) {
                    String questionnaire = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE_FROM_SETTINGS, "");
                    ApplicationSettings.putPref(AppConstants.QUESTIONNAIRE, questionnaire);
                }
            }

            create_followup_card.setVisibility(View.GONE);
            llCallAgain.setVisibility(View.GONE);
            orText.setVisibility(View.GONE);
            remarksCard.setVisibility(View.GONE);
            submitLayout.setVisibility(View.GONE);
            waitDialog = new ProgressDialog(this);
            waitDialog.setMessage("Please Wait..");
            waitDialog.setCancelable(true);
            waitDialog.show();
            SmarterSMBApplication.lastConnectedCustomerNumber = ""; //For redial to call we are clearing lastConnectedCustomerNumber to present during call screen.
            SmarterSMBApplication.redialClickCount++;
            NotificationData.isSocketResponse = false;
            callbackCheck = false;
            UearnActivity.callEndedFromDuringCall = false;
            allianceSalesStage.setVisibility(View.GONE);
            uView.setVisibility(View.GONE);
            cView.setVisibility(View.GONE);
            rView.setVisibility(View.GONE);
            redialView.setVisibility(View.VISIBLE);
            questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
            if (questionsAct != null && !questionsAct.isEmpty()) {
                acpBottomLayout.setVisibility(View.VISIBLE);
                mmtAcpBottomLayout.setVisibility(View.GONE);
                checkRNR = false;
                mmtRedialScenario = true;
            }
            if (!UearnHome.manualDialing)
                redialScenario = true;
            if (customerNumber == null || customerNumber.isEmpty()) {
                customerNumber = NotificationData.dialledCustomerNumber;
            }
            if (customerNumber != null && !customerNumber.isEmpty()) {
                boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
                if (sequencialEndpoint) {
                    getSelectedCustomer(customerNumber);
                    navigateBackAndStop = true;
                    clickToCall(customerNumber);
                } else {
                    NotificationData.appointment_db_id = 0;
                    navigateBackAndStop = true;
                    if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty()) {
                        sendRemoteDialStopRequestRedialScenario("Taking a break");
                    } else {
                        clickToCall(customerNumber);
                    }

                }
            } else {
                tempcustomerList = new ArrayList<>();
                boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
                if (sequencialEndpoint) {
                    UearnActivity.redialScenarioCompleted = false;
                    String customersListViewData = ApplicationSettings.getPref(AppConstants.CUSTOMER_LIST_DATA, "");
                    CustomerLite[] listOfCustomers = new Gson().fromJson(customersListViewData, CustomerLite[].class);
                    String number = "";
                    if (listOfCustomers != null && listOfCustomers.length > 0) {
                        for (int i = 0; i < listOfCustomers.length; i++) {
                            CustomerLite customer = listOfCustomers[i];
                            String custNumber = customer.customerNumber;

                            if (customer.type != null && !customer.type.isEmpty() && customer.type.equalsIgnoreCase("INVALID")) {

                            } else {
                                customer.type = "";
                            }

                            number += custNumber + ",";
                            tempcustomerList.add(i, customer);
                            ContentValues cv = new ContentValues();
                            cv.put("COMPLETED", 0);
                            cv.put("RESPONSE_STATUS", "accepted");
                            MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
                            SQLiteDatabase dbase = dbHelper.getWritableDatabase();
                            dbase.update("remindertbNew", cv, "_id=" + customer.id, null);
                        }
                        number = number.substring(0, number.length() - 1);
                    }
                    ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER, "");
                    ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER_NAME, "");
                    String customerListData = new Gson().toJson(tempcustomerList);
                    ApplicationSettings.putPref(AppConstants.CUSTOMER_LIST_DATA, customerListData);
                    //System.out.print(customerListData);
                    clickToCall(number);
                }
            }
            submitButton.setVisibility(View.VISIBLE);
            if (waitDialog != null) {
                waitDialog.dismiss();
            }
            //}
        } else if (id == R.id.callback_view) {
            String questionsAct;
            if (checkRNR) {
                return;
            }

            if (ApplicationSettings.containsPref(AppConstants.DISABLE_CALLBACK)) {
                boolean disableCallback = ApplicationSettings.getPref(AppConstants.DISABLE_CALLBACK, false);
                if (disableCallback) {
                    return;
                }
            }

            radMessageLayout.setVisibility(View.GONE);
            radMessageText.setVisibility(View.GONE);
            callbackMainLinearLayout.setBackgroundResource(R.drawable.card_border_layout);
            updateMainLinearLayout.setBackgroundResource(R.color.card_background_color);
            rnrMainLinearLayout.setBackgroundResource(R.color.card_background_color);
            redialMainLinearLayout.setBackgroundResource(R.color.card_background_color);
            submitLayout.setVisibility(View.GONE);
            questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
            if ((questionsAct != null && !questionsAct.isEmpty() && questionsAct.equals("AJIO"))) {
                String callBackStatus = ApplicationSettings.getPref(AppConstants.MMT_STATUS, "");
                if (callBackStatus != null && !callBackStatus.equals("ASSIGNTOL2")) {
                    allianceStatus = "";
                    allianceSubStatus = "";
                    allianceSalesStage.setVisibility(View.GONE);
                    applicationNumber_Card.setVisibility(View.GONE);
                    councellingLocationLayout.setVisibility(View.GONE);
                    allianceInterestedLayout.setVisibility(View.GONE);
                    councelingDateTimeCard.setVisibility(View.GONE);
                    notInterested_Card.setVisibility(View.GONE);

                    questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
                    if (questionsAct != null && !questionsAct.isEmpty()) {
                        formButtonLayout.setVisibility(View.GONE);
                        questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
                        if (questionsAct != null && !questionsAct.isEmpty()) {
                            acpBottomLayout.setVisibility(View.VISIBLE);
                            mmtAcpBottomLayout.setVisibility(View.GONE);
                            checkRNR = false;
                        }
                    }
                    changeLayoutColor(111);
                    callbackCheck = true;
                    if (NotificationData.statusString != null && !(NotificationData.statusString.isEmpty())) {
                        status = NotificationData.statusString;
                    } else {
                        status = "";
                    }

                    if (NotificationData.substatus1 != null) {
                        subStatus1 = NotificationData.substatus1;
                    } else {
                        subStatus1 = "";
                    }
                    if (NotificationData.substatus2 != null) {
                        subStatus2 = NotificationData.substatus2;
                    } else {
                        subStatus2 = "";
                    }

                    if (NotificationData.notes_string != null) {
                        notesString = NotificationData.notes_string;
                        if (notesString != null && !notesString.isEmpty() && !notesString.equals("null"))
                            remarks.setText(notesString);
                    } else {
                        notesString = getNotesFromDB();
                        if (notesString != null && !notesString.isEmpty() && !notesString.equals("null"))
                            remarks.setText(notesString);
                    }

                    create_followup_card.setVisibility(View.VISIBLE);
                    llCallAgain.setVisibility(View.VISIBLE);
                    uView.setVisibility(View.GONE);
                    cView.setVisibility(View.VISIBLE);
                    rView.setVisibility(View.GONE);
                    redialView.setVisibility(View.GONE);
                    submitButton.setVisibility(View.VISIBLE);
                    remarksCard.setVisibility(View.VISIBLE);
                    pan_available_layout.setVisibility(View.VISIBLE);
                    orText.setVisibility(View.VISIBLE);
                }
            } else {
                allianceStatus = "";
                allianceSubStatus = "";
                allianceSalesStage.setVisibility(View.GONE);
                applicationNumber_Card.setVisibility(View.GONE);
                councellingLocationLayout.setVisibility(View.GONE);
                allianceInterestedLayout.setVisibility(View.GONE);
                councelingDateTimeCard.setVisibility(View.GONE);
                notInterested_Card.setVisibility(View.GONE);
                questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
                if (questionsAct != null && !questionsAct.isEmpty()) {
                    formButtonLayout.setVisibility(View.GONE);
                    questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
                    if (questionsAct != null && !questionsAct.isEmpty()) {
                        acpBottomLayout.setVisibility(View.VISIBLE);
                        mmtAcpBottomLayout.setVisibility(View.GONE);
                        checkRNR = false;
                    }
                }
                changeLayoutColor(111);
                callbackCheck = true;
                if (NotificationData.statusString != null && !(NotificationData.statusString.isEmpty())) {
                    status = NotificationData.statusString;
                } else {
                    status = "";
                }

                if (NotificationData.substatus1 != null) {
                    subStatus1 = NotificationData.substatus1;
                } else {
                    subStatus1 = "";
                }
                if (NotificationData.substatus2 != null) {
                    subStatus2 = NotificationData.substatus2;
                } else {
                    subStatus2 = "";
                }

                if (NotificationData.notes_string != null) {
                    notesString = NotificationData.notes_string;
                    if (notesString != null && !notesString.isEmpty() && !notesString.equals("null"))
                        remarks.setText(notesString);
                } else {
                    notesString = getNotesFromDB();
                    if (notesString != null && !notesString.isEmpty() && !notesString.equals("null"))
                        remarks.setText(notesString);
                }

                create_followup_card.setVisibility(View.VISIBLE);
                llCallAgain.setVisibility(View.VISIBLE);
                uView.setVisibility(View.GONE);
                cView.setVisibility(View.VISIBLE);
                rView.setVisibility(View.GONE);
                redialView.setVisibility(View.GONE);
                submitButton.setVisibility(View.VISIBLE);
                remarksCard.setVisibility(View.VISIBLE);
                pan_available_layout.setVisibility(View.VISIBLE);
                orText.setVisibility(View.VISIBLE);
            }
        } else if (id == R.id.appliedLayout) {
            allianceStatus = "APPROVED ALREADY";
            applicationNumber_Card.setVisibility(View.VISIBLE);
            councellingLocationLayout.setVisibility(View.GONE);
            allianceInterestedLayout.setVisibility(View.GONE);
            councelingDateTimeCard.setVisibility(View.GONE);
            notInterested_Card.setVisibility(View.GONE);
            appliedBtn.setBackgroundColor(getResources().getColor(R.color.button_color));
            interestedBtn.setBackgroundColor(getResources().getColor(R.color.action_bar_color));
            notInterestedBtn.setBackgroundColor(getResources().getColor(R.color.action_bar_color));
        } else if (id == R.id.interestedLayout) {
            allianceStatus = "INTERESTED";
            applicationNumber_Card.setVisibility(View.GONE);
            notInterested_Card.setVisibility(View.GONE);
            councellingLocationLayout.setVisibility(View.VISIBLE);
            allianceInterestedLayout.setVisibility(View.VISIBLE);
            councelingDateTimeCard.setVisibility(View.VISIBLE);
            interestedBtn.setBackgroundColor(getResources().getColor(R.color.button_color));
            appliedBtn.setBackgroundColor(getResources().getColor(R.color.action_bar_color));
            notInterestedBtn.setBackgroundColor(getResources().getColor(R.color.action_bar_color));
        } else if (id == R.id.notInterestedLayout) {
            allianceStatus = "NOT INTERESTED";
            notInterested_Card.setVisibility(View.VISIBLE);
            applicationNumber_Card.setVisibility(View.GONE);
            councellingLocationLayout.setVisibility(View.GONE);
            allianceInterestedLayout.setVisibility(View.GONE);
            councelingDateTimeCard.setVisibility(View.GONE);
            notInterestedBtn.setBackgroundColor(getResources().getColor(R.color.button_color));
            appliedBtn.setBackgroundColor(getResources().getColor(R.color.action_bar_color));
            interestedBtn.setBackgroundColor(getResources().getColor(R.color.action_bar_color));
        } else if (id == R.id.upload_attach_button) {/*SecureRandom rand = new SecureRandom();
                imagePath = Environment.getExternalStorageDirectory().getAbsolutePath() + "/notesimage" + rand.nextInt() + ".JPEG";
                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(new File(imagePath)));
                startActivityForResult(intent, UPLOAD_ATTACHMENT);*/
            startDialog();
        } else if (id == R.id.ll_call_flow_delete) {
            ll_call_flow_upload_file.setVisibility(View.VISIBLE);
            attachmentReadyButton.setVisibility(View.GONE);
            uploadAttachmentButton.setVisibility(View.VISIBLE);
        } else if (id == R.id.edit_name) {
            tv_name_or_number.setEnabled(true);
            tv_name_or_number.setFocusable(true);
            tv_name_or_number.setFocusableInTouchMode(true);
            tv_name_or_number.setSelection(tv_name_or_number.getText().length());
        } else if (id == R.id.btn_ten) {
            autoCheck = true;
            preAlarmSet = true;
            alarmBefore = 0;
            resetBackground(0);
            mCalendar = Calendar.getInstance();
            int calculateMinute1 = Calendar.getInstance().get(Calendar.MINUTE) + 10;
            int calculateHour1 = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
            if (calculateMinute1 >= 60) {
                final_start_min = calculateMinute1 - 60;
                final_start_hour = calculateHour1 + 1;
            } else {
                final_start_min = calculateMinute1;
                final_start_hour = calculateHour1;
            }
            int calculateEndMinute1 = Calendar.getInstance().get(Calendar.MINUTE) + 25;
            if (calculateEndMinute1 >= 60) {
                final_end_min = calculateEndMinute1 - 60;
                final_end_hour = calculateHour1 + 1;
            } else {
                final_end_min = calculateEndMinute1;
                final_end_hour = calculateHour1;
            }
            Calendar cDtTm = Calendar.getInstance();
            final_start_year = cDtTm.get(Calendar.YEAR);
            final_start_month = cDtTm.get(Calendar.MONTH);
            final_start_dayOfMonth = cDtTm.get(Calendar.DAY_OF_MONTH);
            final_end_year = cDtTm.get(Calendar.YEAR);
            final_end_month = cDtTm.get(Calendar.MONTH);
            final_end_dayOfMonth = cDtTm.get(Calendar.DAY_OF_MONTH);
        } else if (id == R.id.questionnaire_btnTen) {
            Calendar cDtTm;
            int calculateEndMinute1;
            int calculateMinute1;
            int calculateHour1;
            autoCheck = true;
            preAlarmSet = true;
            alarmBefore = 0;
            resetBackgroundQuestionnaire(0);
            followupDate.setText("Select Date");
            followupTime.setText("Select Time");
            mCalendar = Calendar.getInstance();
            calculateMinute1 = Calendar.getInstance().get(Calendar.MINUTE) + 10;
            calculateHour1 = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
            if (calculateMinute1 >= 60) {
                final_start_min = calculateMinute1 - 60;
                final_start_hour = calculateHour1 + 1;
            } else {
                final_start_min = calculateMinute1;
                final_start_hour = calculateHour1;
            }
            calculateEndMinute1 = Calendar.getInstance().get(Calendar.MINUTE) + 25;
            if (calculateEndMinute1 >= 60) {
                final_end_min = calculateEndMinute1 - 60;
                final_end_hour = calculateHour1 + 1;
            } else {
                final_end_min = calculateEndMinute1;
                final_end_hour = calculateHour1;
            }
            cDtTm = Calendar.getInstance();
            final_start_year = cDtTm.get(Calendar.YEAR);
            final_start_month = cDtTm.get(Calendar.MONTH);
            final_start_dayOfMonth = cDtTm.get(Calendar.DAY_OF_MONTH);
            final_end_year = cDtTm.get(Calendar.YEAR);
            final_end_month = cDtTm.get(Calendar.MONTH);
            final_end_dayOfMonth = cDtTm.get(Calendar.DAY_OF_MONTH);
        } else if (id == R.id.oyo_btn_ten1) {
            autoCheck = true;
            preAlarmSet = true;
            alarmBefore = 0;
            resetBackground(0);
            mCalendar = Calendar.getInstance();
            int calculateOyoMinute1 = Calendar.getInstance().get(Calendar.MINUTE) + 10;
            int calculateOyoHour1 = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
            if (calculateOyoMinute1 >= 60) {
                final_start_min = calculateOyoMinute1 - 60;
                final_start_hour = calculateOyoHour1 + 1;
            } else {
                final_start_min = calculateOyoMinute1;
                final_start_hour = calculateOyoHour1;
            }
            int calculateOyoEndMinute1 = Calendar.getInstance().get(Calendar.MINUTE) + 25;
            if (calculateOyoEndMinute1 >= 60) {
                final_end_min = calculateOyoEndMinute1 - 60;
                final_end_hour = calculateOyoHour1 + 1;
            } else {
                final_end_min = calculateOyoEndMinute1;
                final_end_hour = calculateOyoHour1;
            }
            Calendar cDOyotTm = Calendar.getInstance();
            final_start_year = cDOyotTm.get(Calendar.YEAR);
            final_start_month = cDOyotTm.get(Calendar.MONTH);
            final_start_dayOfMonth = cDOyotTm.get(Calendar.DAY_OF_MONTH);
            final_end_year = cDOyotTm.get(Calendar.YEAR);
            final_end_month = cDOyotTm.get(Calendar.MONTH);
            final_end_dayOfMonth = cDOyotTm.get(Calendar.DAY_OF_MONTH);
        } else if (id == R.id.btn_thirty) {
            alarmBefore = 10;
            autoCheck = true;
            preAlarmSet = true;
            resetBackground(1);
            mCalendar = Calendar.getInstance();
            int calculateMinute2 = Calendar.getInstance().get(Calendar.MINUTE) + 30;
            int calculateHour2 = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
            if (calculateMinute2 >= 60) {
                final_start_min = calculateMinute2 - 60;
                final_start_hour = calculateHour2 + 1;
            } else {
                final_start_min = calculateMinute2;
                final_start_hour = calculateHour2;
            }
            int calculateEndMinute2 = Calendar.getInstance().get(Calendar.MINUTE) + 45;
            if (calculateEndMinute2 >= 60) {
                final_end_min = calculateEndMinute2 - 60;
                final_end_hour = calculateHour2 + 1;
            } else {
                final_end_min = calculateEndMinute2;
                final_end_hour = calculateHour2;
            }
            Calendar cDtTm1 = Calendar.getInstance();
            final_start_year = cDtTm1.get(Calendar.YEAR);
            final_start_month = cDtTm1.get(Calendar.MONTH);
            final_start_dayOfMonth = cDtTm1.get(Calendar.DAY_OF_MONTH);
            final_end_year = cDtTm1.get(Calendar.YEAR);
            final_end_month = cDtTm1.get(Calendar.MONTH);
            final_end_dayOfMonth = cDtTm1.get(Calendar.DAY_OF_MONTH);
        } else if (id == R.id.questionnaire_btn_thirty) {
            Calendar cDtTm1;
            int calculateEndMinute2;
            int calculateMinute2;
            int calculateHour2;
            alarmBefore = 10;
            autoCheck = true;
            preAlarmSet = true;
            resetBackgroundQuestionnaire(1);
            followupDate.setText("Select Date");
            followupTime.setText("Select Time");
            mCalendar = Calendar.getInstance();
            calculateMinute2 = Calendar.getInstance().get(Calendar.MINUTE) + 30;
            calculateHour2 = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
            if (calculateMinute2 >= 60) {
                final_start_min = calculateMinute2 - 60;
                final_start_hour = calculateHour2 + 1;
            } else {
                final_start_min = calculateMinute2;
                final_start_hour = calculateHour2;
            }
            calculateEndMinute2 = Calendar.getInstance().get(Calendar.MINUTE) + 45;
            if (calculateEndMinute2 >= 60) {
                final_end_min = calculateEndMinute2 - 60;
                final_end_hour = calculateHour2 + 1;
            } else {
                final_end_min = calculateEndMinute2;
                final_end_hour = calculateHour2;
            }
            cDtTm1 = Calendar.getInstance();
            final_start_year = cDtTm1.get(Calendar.YEAR);
            final_start_month = cDtTm1.get(Calendar.MONTH);
            final_start_dayOfMonth = cDtTm1.get(Calendar.DAY_OF_MONTH);
            final_end_year = cDtTm1.get(Calendar.YEAR);
            final_end_month = cDtTm1.get(Calendar.MONTH);
            final_end_dayOfMonth = cDtTm1.get(Calendar.DAY_OF_MONTH);
        } else if (id == R.id.oyo_btn_thirty1) {
            alarmBefore = 10;
            autoCheck = true;
            preAlarmSet = true;
            resetBackground(1);
            mCalendar = Calendar.getInstance();
            int calculateOyoMinute2 = Calendar.getInstance().get(Calendar.MINUTE) + 30;
            int calculateOyoHour2 = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
            if (calculateOyoMinute2 >= 60) {
                final_start_min = calculateOyoMinute2 - 60;
                final_start_hour = calculateOyoHour2 + 1;
            } else {
                final_start_min = calculateOyoMinute2;
                final_start_hour = calculateOyoHour2;
            }
            int calculateOyoEndMinute2 = Calendar.getInstance().get(Calendar.MINUTE) + 45;
            if (calculateOyoEndMinute2 >= 60) {
                final_end_min = calculateOyoEndMinute2 - 60;
                final_end_hour = calculateOyoHour2 + 1;
            } else {
                final_end_min = calculateOyoEndMinute2;
                final_end_hour = calculateOyoHour2;
            }
            Calendar cDtOyoTm1 = Calendar.getInstance();
            final_start_year = cDtOyoTm1.get(Calendar.YEAR);
            final_start_month = cDtOyoTm1.get(Calendar.MONTH);
            final_start_dayOfMonth = cDtOyoTm1.get(Calendar.DAY_OF_MONTH);
            final_end_year = cDtOyoTm1.get(Calendar.YEAR);
            final_end_month = cDtOyoTm1.get(Calendar.MONTH);
            final_end_dayOfMonth = cDtOyoTm1.get(Calendar.DAY_OF_MONTH);
        } else if (id == R.id.btn_sixty) {
            alarmBefore = 10;
            autoCheck = true;
            preAlarmSet = true;
            resetBackground(2);
            mCalendar = Calendar.getInstance();
            int calculateMinute3 = Calendar.getInstance().get(Calendar.MINUTE) + 60;
            int calculateHour3 = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
            if (calculateMinute3 >= 60) {
                final_start_min = calculateMinute3 - 60;
                final_start_hour = calculateHour3 + 1;
            } else {
                final_start_min = calculateMinute3;
                final_start_hour = calculateHour3;
            }
            int calculateEndMinute3 = Calendar.getInstance().get(Calendar.MINUTE) + 75;
            if (calculateEndMinute3 >= 60) {
                final_end_min = calculateEndMinute3 - 60;
                final_end_hour = calculateHour3 + 1;

                if (final_end_min >= 60) {
                    final_end_min = final_end_min - 60;
                    final_end_hour = calculateHour3 + 1;
                }
            }
            Calendar cDtTm2 = Calendar.getInstance();
            final_start_year = cDtTm2.get(Calendar.YEAR);
            final_start_month = cDtTm2.get(Calendar.MONTH);
            final_start_dayOfMonth = cDtTm2.get(Calendar.DAY_OF_MONTH);
            final_end_year = cDtTm2.get(Calendar.YEAR);
            final_end_month = cDtTm2.get(Calendar.MONTH);
            final_end_dayOfMonth = cDtTm2.get(Calendar.DAY_OF_MONTH);
        } else if (id == R.id.questionnaire_btn_sixty) {
            Calendar cDtTm2;
            int calculateMinute3;
            int calculateHour3;
            int calculateEndMinute3;
            alarmBefore = 10;
            autoCheck = true;
            preAlarmSet = true;
            resetBackgroundQuestionnaire(2);
            followupDate.setText("Select Date");
            followupTime.setText("Select Time");
            mCalendar = Calendar.getInstance();
            if (flp_duration > 1) {
                calculateMinute3 = Calendar.getInstance().get(Calendar.MINUTE) + flp_duration * 60;
            } else {
                calculateMinute3 = Calendar.getInstance().get(Calendar.MINUTE) + 60;
            }
            calculateHour3 = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
            if (calculateMinute3 >= 60) {
                final_start_min = calculateMinute3 - 60;
                final_start_hour = calculateHour3 + 1;
            } else {
                final_start_min = calculateMinute3;
                final_start_hour = calculateHour3;
            }
            if (flp_duration > 1) {
                calculateEndMinute3 = Calendar.getInstance().get(Calendar.MINUTE) + (flp_duration * 60) + 15;
            } else {
                calculateEndMinute3 = Calendar.getInstance().get(Calendar.MINUTE) + 75;
            }
            if (calculateEndMinute3 >= 60) {
                final_end_min = calculateEndMinute3 - 60;
                final_end_hour = calculateHour3 + 1;

                if (final_end_min >= 60) {
                    final_end_min = final_end_min - 60;
                    final_end_hour = calculateHour3 + 1;
                }
            }
            cDtTm2 = Calendar.getInstance();
            final_start_year = cDtTm2.get(Calendar.YEAR);
            final_start_month = cDtTm2.get(Calendar.MONTH);
            final_start_dayOfMonth = cDtTm2.get(Calendar.DAY_OF_MONTH);
            final_end_year = cDtTm2.get(Calendar.YEAR);
            final_end_month = cDtTm2.get(Calendar.MONTH);
            final_end_dayOfMonth = cDtTm2.get(Calendar.DAY_OF_MONTH);
        } else if (id == R.id.oyo_btn_sixty1) {
            alarmBefore = 10;
            autoCheck = true;
            preAlarmSet = true;
            resetBackground(2);
            mCalendar = Calendar.getInstance();
            int calculateOyoMinute3 = Calendar.getInstance().get(Calendar.MINUTE) + 60;
            int calculateOyoHour3 = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
            if (calculateOyoMinute3 >= 60) {
                final_start_min = calculateOyoMinute3 - 60;
                final_start_hour = calculateOyoHour3 + 1;
            } else {
                final_start_min = calculateOyoMinute3;
                final_start_hour = calculateOyoHour3;
            }
            int calculateOyoEndMinute3 = Calendar.getInstance().get(Calendar.MINUTE) + 75;
            if (calculateOyoEndMinute3 >= 60) {
                final_end_min = calculateOyoEndMinute3 - 60;
                final_end_hour = calculateOyoHour3 + 1;

                if (final_end_min >= 60) {
                    final_end_min = final_end_min - 60;
                    final_end_hour = calculateOyoHour3 + 1;
                }
            }
            Calendar cDtOyoTm2 = Calendar.getInstance();
            final_start_year = cDtOyoTm2.get(Calendar.YEAR);
            final_start_month = cDtOyoTm2.get(Calendar.MONTH);
            final_start_dayOfMonth = cDtOyoTm2.get(Calendar.DAY_OF_MONTH);
            final_end_year = cDtOyoTm2.get(Calendar.YEAR);
            final_end_month = cDtOyoTm2.get(Calendar.MONTH);
            final_end_dayOfMonth = cDtOyoTm2.get(Calendar.DAY_OF_MONTH);
        } else if (id == R.id.submit_button || id == R.id.mmt_submit_button) {
            String questionsAct;//SmarterSMBApplication.inboundCallInOutbound = false;
            SmarterSMBApplication.webViewOutgoingCallEventTriggered = false;
            SmarterSMBApplication.enableECBAndESB = false;
            SmarterSMBApplication.redialClickCount = 0;
            SmarterSMBApplication.isC2CAutoStart = false;
            SmarterSMBApplication.relaunchSameActivityStayHome = false;
            SmarterSMBApplication.manualDialScenario = false;
            SmarterSMBApplication.agentIsInConnectedState = false;
            submitButtonPressed = true;
            dismissAlertDialog = true;
            nestedQuesHash = new LinkedHashMap();
            indexQuesHash = new LinkedHashMap();
            if (redialScenario || UearnHome.autoDial) {
                startAutodialler = true;
                questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
                redialScenario = questionsAct != null && !questionsAct.isEmpty();
                if (UearnHome.autoDial) {
                    redialScenario = false;
                }
            }
            dummyAppointmentForRedial = false;
            long callSubmitTime = System.currentTimeMillis();
            ApplicationSettings.putPref(AppConstants.CALL_SUBMIT_TIME, callSubmitTime);

            if (ApplicationSettings.containsPref(AppConstants.FK_CONTROL)) {
                boolean fkControl = ApplicationSettings.getPref(AppConstants.FK_CONTROL, false);
                if (fkControl) {
                    Handler handler = new Handler(Looper.getMainLooper());
                    handler.post(new Runnable() {
                        public void run() {
                            totalActiveTime();
                        }
                    });
                }
            }

            submitButtonClicked = true;
            submit();
        } else if (id == R.id.attachment_ready_button) {
            if (imageUrl != null) {
                loadDataFromUrl(imageUrl);
            }
        } else if (id == R.id.getInfo) {
            if (SmarterSMBApplication.outgoingCallNotInStartMode) {
                if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
                    boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
                    if (ibControl) {
                        getConnectedCustomerInfoNotInStartMode(NotificationData.transactionId);
                    } else {
                        if (processAfterCallConnected) {
                            processAfterCallConnected = false;
                        }
                        NotificationData.isSocketResponse = false;
                        NotificationData.dialledCustomerNumber = "";
                        NotificationData.dialledCustomerName = "";
                        getConnectedCustomerInfo(NotificationData.transactionId);
                    }
                } else {
                    if (processAfterCallConnected) {
                        processAfterCallConnected = false;
                    }
                    NotificationData.isSocketResponse = false;
                    NotificationData.dialledCustomerNumber = "";
                    NotificationData.dialledCustomerName = "";
                    getConnectedCustomerInfo(NotificationData.transactionId);
                }
            } else {
                if (processAfterCallConnected) {
                    processAfterCallConnected = false;
                }
                NotificationData.isSocketResponse = false;
                NotificationData.dialledCustomerNumber = "";
                NotificationData.dialledCustomerName = "";
                getConnectedCustomerInfo(NotificationData.transactionId);
            }
        } else if (id == R.id.rnr_view) {
            radMessageLayout.setVisibility(View.GONE);
            radMessageText.setVisibility(View.GONE);
            if (ApplicationSettings.containsPref(AppConstants.FK_CONTROL)) {
                boolean fkControl = ApplicationSettings.getPref(AppConstants.FK_CONTROL, false);
                if (fkControl) {
                    rnrUpdateACPLayout();
                } else if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
                    boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
                    if (ibControl) {
                        rnrUpdateACPLayout();
                    } else {
                        defaultRNRLayout();
                    }
                } else {
                    defaultRNRLayout();
                }
            } else if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
                boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
                if (ibControl) {
                    if (SmarterSMBApplication.webViewOutgoingCallEventTriggered && (NotificationData.outboundDialledCustomerNumber == null || NotificationData.outboundDialledCustomerNumber.isEmpty())) {
                        defaultRNRLayout();
                    } else {
                        rnrUpdateACPLayout();
                    }
                } else {
                    defaultRNRLayout();
                }
            } else {
                if (SmarterSMBApplication.inboundCallInOutbound) {
                    rnrUpdateACPLayout();
                } else {
                    defaultRNRLayout();
                }
            }
        } else if (id == R.id.qde_approved_layout) {
            changeLayoutColor(8);
        } else if (id == R.id.showMore) {
            DisplayMetrics displayMetrics = new DisplayMetrics();
            getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
            int height;
            Display display = getWindowManager().getDefaultDisplay();
            Point size = new Point();
            display.getSize(size);
            int height2 = size.y;
            if (isShowMore) {
                isShowMore = false;
                showMore.setImageResource(R.drawable.down_arrow);
                height = 230;
            } else {
                isShowMore = true;
                showMore.setImageResource(R.drawable.up_arrow);
                height = 300;
            }
            RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) card_view.getLayoutParams();
            layoutParams.height = height;
            card_view.setLayoutParams(layoutParams);
        } else if (id == R.id.nextButton) {
            nextButtonAction();
        } else if (id == R.id.previousButton) {
            previousButtonAction();
        } else if (id == R.id.rnr_button) {
            isOyoRnr = true;
            isOyoInvalid = false;
            disposition_spinner.setSelection(0);
            sub_disposition_spinner.setSelection(0);
            submitButton.setEnabled(true);
            rnrButton.setBackgroundColor(getResources().getColor(R.color.button_color));
            invalidButton.setBackgroundColor(getResources().getColor(R.color.action_bar_color));
            submitButton.setBackgroundColor(getResources().getColor(R.color.button_color));
            submitButton.setEnabled(true);
        } else if (id == R.id.invalid_button) {
            isOyoInvalid = true;
            isOyoRnr = false;
            disposition_spinner.setSelection(0);
            sub_disposition_spinner.setSelection(0);
            submitButton.setEnabled(true);
            rnrButton.setBackgroundColor(getResources().getColor(R.color.action_bar_color));
            invalidButton.setBackgroundColor(getResources().getColor(R.color.button_color));
            submitButton.setBackgroundColor(getResources().getColor(R.color.button_color));
            submitButton.setEnabled(true);
        } else if (id == R.id.mmt_invalid_button) {
            long callSubmitTime;
            mmtStatus = "OTHERS";
            mmtSubStatus1 = "INVALID NUMBER";
            ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
            ApplicationSettings.putPref(AppConstants.MMT_SUBSTATUS, mmtSubStatus1);
            checkRNR = false;
            submitButtonPressed = true;
            if (redialScenario || UearnHome.autoDial) {
                startAutodialler = true;
                redialScenario = false;
            }
            dummyAppointmentForRedial = false;
            callSubmitTime = System.currentTimeMillis();
            ApplicationSettings.putPref(AppConstants.CALL_SUBMIT_TIME, callSubmitTime);
            mmtInvalidButtonClicked = true;
            submit();
        } else if (id == R.id.yes_button) {
            yesnobuttonClicked = true;
            formStatus = "YES";
            yesButton.setTextColor(Color.WHITE);
            yesButton.setBackground(getResources().getDrawable(R.drawable.call_flow_button_red));
            noButton.setBackground(getResources().getDrawable(R.drawable.call_flow_button));
            noButton.setTextColor(ContextCompat.getColor(this, R.color.ques_text_color));
        } else if (id == R.id.no_button) {
            yesnobuttonClicked = true;
            formStatus = "NO";
            noButton.setTextColor(Color.WHITE);
            noButton.setBackground(getResources().getDrawable(R.drawable.call_flow_button_red));
            yesButton.setBackground(getResources().getDrawable(R.drawable.call_flow_button));
            yesButton.setTextColor(ContextCompat.getColor(this, R.color.ques_text_color));
        } else if (id == R.id.endCallButton) {
            SmarterSMBApplication.endCallButtonClicked = true;
            try {

                if (SmarterSMBApplication.outgoingCallNotInStartMode) {
                    SmarterSMBApplication.matchingInNumberNotInStartMode = true;
                } else {
                    SmarterSMBApplication.matchingInNumberNotInStartMode = false;
                }

                if (SmarterSMBApplication.enableECBAndESB) {

                } else if (SmarterSMBApplication.currentAppState != null && !SmarterSMBApplication.currentAppState.isEmpty() && SmarterSMBApplication.currentAppState.equalsIgnoreCase("Connected")) {

                } else {
                    if (ApplicationSettings.containsPref(AppConstants.ENABLE_MESSAGE)) {
                        String enableMessageStr = ApplicationSettings.getPref(AppConstants.ENABLE_MESSAGE, "");
                        if (enableMessageStr != null && !enableMessageStr.isEmpty() && !enableMessageStr.equals("null")) {
                            Toast.makeText(UearnActivity.this, enableMessageStr, Toast.LENGTH_SHORT).show();
                            return;
                        } else {
                            Toast.makeText(UearnActivity.this, "Action is disabled, please try after sometime", Toast.LENGTH_SHORT).show();
                            return;
                        }
                    }
                }
                if (!SmarterSMBApplication.incomingCallAcceptedByAgent) {
                    SmarterSMBApplication.incomingCallRejectedByAgent = true;
                    SmarterSMBApplication.isRemoteDialledStart = false;

                    if (ApplicationSettings.containsPref(AppConstants.SYSTEM_CONTROL)) {
                        boolean systemControl = ApplicationSettings.getPref(AppConstants.SYSTEM_CONTROL, false);
                        if (systemControl) {
                            SmarterSMBApplication.disableStatusBarAndNavigation = false;
                        }
                    }

                    SmarterSMBApplication.endTheSession = true;
                    SmarterSMBApplication.enableECBAndESB = false;

                    if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
                        boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
                        if (ibControl) {
                            SmarterSMBApplication.autoCallAnswered = false;
                        }
                    }
                    SmarterSMBApplication.matchingInNumberNotInStartMode = false;
                    navigateToUearnHome();
                } else {
                    endCallButtonAction();
                }
            } catch (Exception e) {
                int version_code = CommonUtils.getVersionCode(this);
                String message = "<br/><br/>eMail : " + ApplicationSettings.getPref(AppConstants.USERINFO_EMAIL, "") + "<br/>ID : " +
                        ApplicationSettings.getPref(AppConstants.USERINFO_ID, "") + "<br/><br/>App Version: " + version_code + "<br/><br/>UearnActivity - Error endCallButton onClick(): " + e.getMessage();
                ServiceApplicationUsage.callErrorLog(message);
            }
        } else if (id == R.id.muteCallButton) {
            try {
                muteCall();
            } catch (Exception e) {
                int version_code = CommonUtils.getVersionCode(this);
                String message = "<br/><br/>eMail : " + ApplicationSettings.getPref(AppConstants.USERINFO_EMAIL, "") + "<br/>ID : " +
                        ApplicationSettings.getPref(AppConstants.USERINFO_ID, "") + "<br/><br/>App Version: " + version_code + "<br/><br/>UearnActivity - Error muteCallButton onClick(): " + e.getMessage();
                ServiceApplicationUsage.callErrorLog(message);
            }
        } else if (id == R.id.transferCallButton) {
            if (SmarterSMBApplication.currentAppState != null && !SmarterSMBApplication.currentAppState.isEmpty() && (SmarterSMBApplication.currentAppState.equalsIgnoreCase("Connecting"))) {

            } else {
                callOptionsDialog(UearnActivity.this, "", "Do you really want to transfer this call?", "Transfer Call").show();
            }
        } else if (id == R.id.conferenceCallButton) {
            if (SmarterSMBApplication.currentAppState != null && !SmarterSMBApplication.currentAppState.isEmpty() && (SmarterSMBApplication.currentAppState.equalsIgnoreCase("Connecting"))) {

            } else {
                callOptionsDialog(UearnActivity.this, "", "Do you really want to merge this call?", "Merge Call").show();
            }
        } else if (id == R.id.launchAppButton) {
            if (ApplicationSettings.containsPref(AppConstants.FK_CONTROL)) {
                boolean fkControl = ApplicationSettings.getPref(AppConstants.FK_CONTROL, false);
                if (fkControl) {
                    if (SmarterSMBApplication.currentModeIsConnected) {
                        if (!enableESBTimerStarted) {
                            enableESBTimerStarted = true;
                            long enableECBTime = 0l;
                            if (ApplicationSettings.containsPref(AppConstants.ENABLE_ECB)) {
                                String enableECBTimeStr = ApplicationSettings.getPref(AppConstants.ENABLE_ECB, "");
                                if (enableECBTimeStr != null && !enableECBTimeStr.isEmpty()) {
                                    enableECBTime = Long.valueOf(enableECBTimeStr);
                                }
                                if (enableECBTimeStr != null && !enableECBTimeStr.isEmpty() && enableECBTimeStr.equals("0")) {
                                    enableESBTimerCompleted = true;
                                    enableESBTimerStarted = false;
                                }
                            } else {
                                enableESBTimerCompleted = true;
                                enableESBTimerStarted = false;
                            }
                            new Handler().postDelayed(new Runnable() {
                                public void run() {
                                    enableESBTimerCompleted = true;
                                    enableESBTimerStarted = false;
                                    SmarterSMBApplication.currentModeIsConnected = false;
                                }
                            }, enableECBTime * 2);
                        }
                        if (enableESBTimerCompleted) {
                            enableESBTimerCompleted = false;
                            SmarterSMBApplication.launchAppButtonClicked = true;
                            String remoteAutoEnabled = ApplicationSettings.getPref(AppConstants.REMOTE_AUTO_DIALLING, "");
                            if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty() && remoteAutoEnabled.equals("onsolicit")) {
                                stopCallAndMoveToHomescreenDialog(UearnActivity.this, "", "Do you want to end the session?").show();
                            } else {
                                launchAppButtonAction();
                            }
                        } else {
                            if (ApplicationSettings.containsPref(AppConstants.ENABLE_MESSAGE)) {
                                String enableMessageStr = ApplicationSettings.getPref(AppConstants.ENABLE_MESSAGE, "");
                                if (enableMessageStr != null && !enableMessageStr.isEmpty() && !enableMessageStr.equals("null")) {
                                    Toast.makeText(UearnActivity.this, enableMessageStr, Toast.LENGTH_SHORT).show();
                                } else {
                                    long enableECBTime = 0l;
                                    if (ApplicationSettings.containsPref(AppConstants.ENABLE_ECB)) {
                                        String enableECBTimeStr = ApplicationSettings.getPref(AppConstants.ENABLE_ECB, "");
                                        if (enableECBTimeStr != null && !enableECBTimeStr.isEmpty() && !enableECBTimeStr.equals("0")) {
                                            enableECBTime = Long.valueOf(enableECBTimeStr);
                                            long seconds = TimeUnit.MILLISECONDS.toSeconds(enableECBTime);
                                            Toast.makeText(UearnActivity.this, "This action will be enabled in " + seconds + " seconds.", Toast.LENGTH_SHORT).show();
                                        } else {
                                            Toast.makeText(UearnActivity.this, "Action is disabled, please try after sometime", Toast.LENGTH_SHORT).show();
                                        }
                                    } else {
                                        Toast.makeText(UearnActivity.this, "Action is disabled, please try after sometime", Toast.LENGTH_SHORT).show();
                                    }
                                }
                            } else {
                                long enableECBTime = 0l;
                                if (ApplicationSettings.containsPref(AppConstants.ENABLE_ECB)) {
                                    String enableECBTimeStr = ApplicationSettings.getPref(AppConstants.ENABLE_ECB, "");
                                    if (enableECBTimeStr != null && !enableECBTimeStr.isEmpty() && !enableECBTimeStr.equals("0")) {
                                        enableECBTime = Long.valueOf(enableECBTimeStr);
                                        long seconds = TimeUnit.MILLISECONDS.toSeconds(enableECBTime);
                                        Toast.makeText(UearnActivity.this, "This action will be enabled in " + seconds + " seconds.", Toast.LENGTH_SHORT).show();
                                    } else {
                                        Toast.makeText(UearnActivity.this, "Action is disabled, please try after sometime", Toast.LENGTH_SHORT).show();
                                    }
                                } else {
                                    Toast.makeText(UearnActivity.this, "Action is disabled, please try after sometime", Toast.LENGTH_SHORT).show();
                                }
                            }
                        }
                    } else {
                        if (!enableESBTimerStarted) {
                            enableESBTimerStarted = true;
                            long enableECBTime = 0l;
                            if (ApplicationSettings.containsPref(AppConstants.ENABLE_ECB)) {
                                String enableECBTimeStr = ApplicationSettings.getPref(AppConstants.ENABLE_ECB, "");
                                if (enableECBTimeStr != null && !enableECBTimeStr.isEmpty()) {
                                    enableECBTime = Long.valueOf(enableECBTimeStr);
                                }
                            } else {
                                enableESBTimerCompleted = true;
                                enableESBTimerStarted = false;
                            }

                            new Handler().postDelayed(new Runnable() {
                                public void run() {
                                    enableESBTimerCompleted = true;
                                    enableESBTimerStarted = false;
                                }
                            }, enableECBTime);
                        }
                    }
                    if (enableESBTimerCompleted) {
                        enableESBTimerCompleted = false;
                        SmarterSMBApplication.launchAppButtonClicked = true;
                        String remoteAutoEnabled = ApplicationSettings.getPref(AppConstants.REMOTE_AUTO_DIALLING, "");
                        if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty() && remoteAutoEnabled.equals("onsolicit")) {
                            stopCallAndMoveToHomescreenDialog(UearnActivity.this, "", "Do you want to end the session?").show();
                        } else {
                            launchAppButtonAction();
                        }
                    } else {
                        if (ApplicationSettings.containsPref(AppConstants.ENABLE_ECB)) {
                            String enableECBTimeStr = ApplicationSettings.getPref(AppConstants.ENABLE_ECB, "");
                            if (enableECBTimeStr != null && !enableECBTimeStr.isEmpty() && !enableECBTimeStr.equals("0")) {
                                if (ApplicationSettings.containsPref(AppConstants.ENABLE_MESSAGE)) {
                                    String enableMessageStr = ApplicationSettings.getPref(AppConstants.ENABLE_MESSAGE, "");
                                    if (enableMessageStr != null && !enableMessageStr.isEmpty() && !enableMessageStr.equals("null")) {
                                        Toast.makeText(UearnActivity.this, enableMessageStr, Toast.LENGTH_SHORT).show();
                                    } else {
                                        long enableECBTime = 0l;
                                        if (ApplicationSettings.containsPref(AppConstants.ENABLE_ECB)) {
                                            enableECBTimeStr = ApplicationSettings.getPref(AppConstants.ENABLE_ECB, "");
                                            if (enableECBTimeStr != null && !enableECBTimeStr.isEmpty() && !enableECBTimeStr.equals("0")) {
                                                enableECBTime = Long.valueOf(enableECBTimeStr);
                                                long seconds = TimeUnit.MILLISECONDS.toSeconds(enableECBTime);
                                                Toast.makeText(UearnActivity.this, "This action will be enabled in " + seconds + " seconds.", Toast.LENGTH_SHORT).show();
                                            } else {
                                                Toast.makeText(UearnActivity.this, "Action is disabled, please try after sometime", Toast.LENGTH_SHORT).show();
                                            }
                                        } else {
                                            Toast.makeText(UearnActivity.this, "Action is disabled, please try after sometime", Toast.LENGTH_SHORT).show();
                                        }
                                    }
                                } else {
                                    long enableECBTime = 0l;
                                    if (ApplicationSettings.containsPref(AppConstants.ENABLE_ECB)) {
                                        enableECBTimeStr = ApplicationSettings.getPref(AppConstants.ENABLE_ECB, "");
                                        if (enableECBTimeStr != null && !enableECBTimeStr.isEmpty() && !enableECBTimeStr.equals("0")) {
                                            enableECBTime = Long.valueOf(enableECBTimeStr);
                                            long seconds = TimeUnit.MILLISECONDS.toSeconds(enableECBTime);
                                            Toast.makeText(UearnActivity.this, "This action will be enabled in " + seconds + " seconds.", Toast.LENGTH_SHORT).show();
                                        } else {
                                            Toast.makeText(UearnActivity.this, "Action is disabled, please try after sometime", Toast.LENGTH_SHORT).show();
                                        }
                                    } else {
                                        Toast.makeText(UearnActivity.this, "Action is disabled, please try after sometime", Toast.LENGTH_SHORT).show();
                                    }
                                }
                            } else {
                                SmarterSMBApplication.launchAppButtonClicked = true;
                                String remoteAutoEnabled = ApplicationSettings.getPref(AppConstants.REMOTE_AUTO_DIALLING, "");
                                if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty() && remoteAutoEnabled.equals("onsolicit")) {
                                    stopCallAndMoveToHomescreenDialog(UearnActivity.this, "", "Do you want to end the session?").show();
                                } else {
                                    launchAppButtonAction();
                                }
                            }
                        } else {
                            SmarterSMBApplication.launchAppButtonClicked = true;
                            String remoteAutoEnabled = ApplicationSettings.getPref(AppConstants.REMOTE_AUTO_DIALLING, "");
                            if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty() && remoteAutoEnabled.equals("onsolicit")) {
                                stopCallAndMoveToHomescreenDialog(UearnActivity.this, "", "Do you want to end the session?").show();
                            } else {
                                launchAppButtonAction();
                            }
                        }
                    }
                }
            } else if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
                boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
                if (ibControl) {
                    if (SmarterSMBApplication.currentAppState != null && !SmarterSMBApplication.currentAppState.isEmpty() && SmarterSMBApplication.currentAppState.equalsIgnoreCase("Connected")) {
                        //Log.e("ResetHome", "launchAppButton SmarterSMBApplication.currentAppState" +SmarterSMBApplication.currentAppState);
                        Toast.makeText(UearnActivity.this, "Action is disabled, please try after sometime", Toast.LENGTH_SHORT).show();
                        return;
                    } else {
                        SmarterSMBApplication.launchAppButtonClicked = true;
                        String remoteAutoEnabled = ApplicationSettings.getPref(AppConstants.REMOTE_AUTO_DIALLING, "");
                        if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty() && remoteAutoEnabled.equals("onsolicit")) {
                            stopCallAndMoveToHomescreenDialog(UearnActivity.this, "", "Do you want to end the session?").show();
                        } else {
                            launchAppButtonAction();
                        }
                    }
                }
            } else {
                try {
                    boolean truePredictive = ApplicationSettings.getPref(AppConstants.TRUE_PREDICTIVE, false);
                    if (truePredictive) {
                        if (SmarterSMBApplication.incomingCallAcceptedByAgent && SmarterSMBApplication.currentAppState != null && !SmarterSMBApplication.currentAppState.isEmpty() && SmarterSMBApplication.currentAppState.equalsIgnoreCase("Connected")) {
                            if (ApplicationSettings.containsPref(AppConstants.ABORT_CALL_SESSION)) {
                                boolean abortCallSession = ApplicationSettings.getPref(AppConstants.ABORT_CALL_SESSION, false);
                                if (abortCallSession) {
                                    SmarterSMBApplication.abortCallSessionScenario = true;
                                    String remoteAutoEnabled = ApplicationSettings.getPref(AppConstants.REMOTE_AUTO_DIALLING, "");
                                    if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty() && remoteAutoEnabled.equals("onsolicit")) {
                                        stopCallAndMoveToHomescreenDialog(UearnActivity.this, "", "Do you want to end the session?").show();
                                    } else {
                                        clearEndSessionContext();
                                        showACPScreen();
                                        endSessionButtonAction();
                                    }
                                } else {
                                    if (ApplicationSettings.containsPref(AppConstants.ENABLE_MESSAGE)) {
                                        String enableMessageStr = ApplicationSettings.getPref(AppConstants.ENABLE_MESSAGE, "");
                                        if (enableMessageStr != null && !enableMessageStr.isEmpty() && !enableMessageStr.equals("null")) {
                                            Toast.makeText(UearnActivity.this, enableMessageStr, Toast.LENGTH_SHORT).show();
                                        } else {
                                            Toast.makeText(UearnActivity.this, "As incoming call was answered this action is disabled", Toast.LENGTH_SHORT).show();
                                        }
                                    } else {
                                        Toast.makeText(UearnActivity.this, "As incoming call was answered this action is disabled", Toast.LENGTH_SHORT).show();
                                    }
                                }
                            } else {
                                if (ApplicationSettings.containsPref(AppConstants.ENABLE_MESSAGE)) {
                                    String enableMessageStr = ApplicationSettings.getPref(AppConstants.ENABLE_MESSAGE, "");
                                    if (enableMessageStr != null && !enableMessageStr.isEmpty() && !enableMessageStr.equals("null")) {
                                        Toast.makeText(UearnActivity.this, enableMessageStr, Toast.LENGTH_SHORT).show();
                                    } else {
                                        Toast.makeText(UearnActivity.this, "As incoming call was answered this action is disabled", Toast.LENGTH_SHORT).show();
                                    }
                                } else {
                                    Toast.makeText(UearnActivity.this, "As incoming call was answered this action is disabled", Toast.LENGTH_SHORT).show();
                                }
                            }
                        } else {
                            SmarterSMBApplication.launchAppButtonClicked = true;
                            String remoteAutoEnabled = ApplicationSettings.getPref(AppConstants.REMOTE_AUTO_DIALLING, "");
                            if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty() && remoteAutoEnabled.equals("onsolicit")) {
                                stopCallAndMoveToHomescreenDialog(UearnActivity.this, "", "Do you want to end the session?").show();
                            } else {
                                launchAppButtonAction();
                            }
                        }
                    } else if (SmarterSMBApplication.incomingCallAcceptedByAgent || SmarterSMBApplication.currentAppState != null && !SmarterSMBApplication.currentAppState.isEmpty() && SmarterSMBApplication.currentAppState.equalsIgnoreCase("Connected")) {
                        if (ApplicationSettings.containsPref(AppConstants.ABORT_CALL_SESSION)) {
                            boolean abortCallSession = ApplicationSettings.getPref(AppConstants.ABORT_CALL_SESSION, false);
                            if (abortCallSession) {
                                SmarterSMBApplication.abortCallSessionScenario = true;
                                String remoteAutoEnabled = ApplicationSettings.getPref(AppConstants.REMOTE_AUTO_DIALLING, "");
                                if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty() && remoteAutoEnabled.equals("onsolicit")) {
                                    stopCallAndMoveToHomescreenDialog(UearnActivity.this, "", "Do you want to end the session?").show();
                                } else {
                                    clearEndSessionContext();
                                    showACPScreen();
                                    endSessionButtonAction();
                                }
                            } else {
                                if (ApplicationSettings.containsPref(AppConstants.ENABLE_MESSAGE)) {
                                    String enableMessageStr = ApplicationSettings.getPref(AppConstants.ENABLE_MESSAGE, "");
                                    if (enableMessageStr != null && !enableMessageStr.isEmpty() && !enableMessageStr.equals("null")) {
                                        Toast.makeText(UearnActivity.this, enableMessageStr, Toast.LENGTH_SHORT).show();
                                    } else {
                                        Toast.makeText(UearnActivity.this, "As incoming call was answered this action is disabled", Toast.LENGTH_SHORT).show();
                                    }
                                } else {
                                    Toast.makeText(UearnActivity.this, "As incoming call was answered this action is disabled", Toast.LENGTH_SHORT).show();
                                }
                            }
                        } else {
                            if (ApplicationSettings.containsPref(AppConstants.ENABLE_MESSAGE)) {
                                String enableMessageStr = ApplicationSettings.getPref(AppConstants.ENABLE_MESSAGE, "");
                                if (enableMessageStr != null && !enableMessageStr.isEmpty() && !enableMessageStr.equals("null")) {
                                    Toast.makeText(UearnActivity.this, enableMessageStr, Toast.LENGTH_SHORT).show();
                                } else {
                                    Toast.makeText(UearnActivity.this, "As incoming call was answered this action is disabled", Toast.LENGTH_SHORT).show();
                                }
                            } else {
                                Toast.makeText(UearnActivity.this, "As incoming call was answered this action is disabled", Toast.LENGTH_SHORT).show();
                            }
                        }
                    } else {
                        SmarterSMBApplication.launchAppButtonClicked = true;
                        String remoteAutoEnabled = ApplicationSettings.getPref(AppConstants.REMOTE_AUTO_DIALLING, "");
                        if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty() && remoteAutoEnabled.equals("onsolicit")) {
                            stopCallAndMoveToHomescreenDialog(UearnActivity.this, "", "Do you want to end the session?").show();
                        } else {
                            launchAppButtonAction();
                        }
                    }
                } catch (Exception e) {
                    int version_code = CommonUtils.getVersionCode(this);
                    String message = "<br/><br/>eMail : " + ApplicationSettings.getPref(AppConstants.USERINFO_EMAIL, "") + "<br/>ID : " +
                            ApplicationSettings.getPref(AppConstants.USERINFO_ID, "") + "<br/><br/>App Version: " + version_code + "<br/><br/>UearnActivity - Error launchAppButton onClick(): " + e.getMessage();
                    ServiceApplicationUsage.callErrorLog(message);
                }
            }
        } else if (id == R.id.questionnaire_date || id == R.id.followup_date || id == R.id.tv_custom_date) {
            btnTen.setBackgroundResource(R.drawable.editext_background);
            btnThirty.setBackgroundResource(R.drawable.editext_background);
            btnSixty.setBackgroundResource(R.drawable.editext_background);
            questionnaire_btnTen.setBackgroundResource(R.drawable.call_flow_button);
            questionnaire_btnThirty.setBackgroundResource(R.drawable.call_flow_button);
            questionnaire_btnSixty.setBackgroundResource(R.drawable.call_flow_button);
            quesButtonTenTextView.setTextColor(getResources().getColor(R.color.ques_text_color));
            quesButtonThirtyTextView.setTextColor(getResources().getColor(R.color.ques_text_color));
            quesButtonSixtyTextView.setTextColor(getResources().getColor(R.color.ques_text_color));
            Calendar calendar = Calendar.getInstance();
            int year = calendar.get(Calendar.YEAR);
            int month = calendar.get(Calendar.MONTH);
            int day = calendar.get(Calendar.DAY_OF_MONTH);

            DatePickerDialog datePickerDialog = new DatePickerDialog(this, R.style.MaterialPickerTheme, new DatePickerDialog.OnDateSetListener() {
                @Override
                public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {

                    mCalendar = Calendar.getInstance();
                    mCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
                    mCalendar.set(Calendar.MONTH, month);
                    mCalendar.set(Calendar.YEAR, year);
                    SimpleDateFormat fmt = new SimpleDateFormat("EEE, d MMM yy");

                    final_start_year = year;
                    final_start_month = month;
                    final_start_dayOfMonth = dayOfMonth;
                    final_end_year = year;
                    final_end_month = month;
                    final_end_dayOfMonth = dayOfMonth;

                    Calendar currentSettings = Calendar.getInstance();

                    Date currentDate = new Date();
                    String curentDate = DateFormat.format("yyyy/MM/dd", currentDate).toString();

                    String currentYearMonth = DateFormat.format("yyyy/MM", currentDate).toString();
                    String dateString = DateFormat.format("dd", currentDate).toString();
                    String currentDay = "", settingDay = "";
                    if (dateString != null && !dateString.isEmpty()) {
                        int date = Integer.parseInt(dateString);
                        date = date + 1;
                        currentDay = String.valueOf(date);
                    }

                    String settingDate = DateFormat.format("yyyy/MM/dd", mCalendar.getTime()).toString();
                    String settingYearMonth = DateFormat.format("yyyy/MM", mCalendar.getTime()).toString();

                    String time = DateFormat.format("dd", mCalendar.getTime()).toString();
                    if (time != null && !time.isEmpty()) {
                        settingDay = String.valueOf(Integer.parseInt(time));
                    }

                    if (curentDate != null && curentDate.equalsIgnoreCase(settingDate)) {
                        questDate.setText("Today");
                        followupDate.setText("Today");
                        mCustomDate.setText("Today");
                    } else if ((currentYearMonth != null && currentYearMonth.equalsIgnoreCase(settingYearMonth)) && settingDate != null && (currentDay.equalsIgnoreCase(settingDay))) {
                        questDate.setText("Tomorrow");
                        followupDate.setText("Tomorrow");
                        mCustomDate.setText("Tomorrow");
                    } else {
                        questDate.setText(fmt.format(mCalendar.getTime()));
                        followupDate.setText(fmt.format(mCalendar.getTime()));
                        mCustomDate.setText(fmt.format(mCalendar.getTime()));
                    }
                    int calculateMinuteAccordingly = mCalendar.get(Calendar.MINUTE);
                    int calculateHourAccordingly = mCalendar.get(Calendar.HOUR_OF_DAY);

                    final_start_min = calculateMinuteAccordingly;
                    final_start_hour = calculateHourAccordingly;

                    if (calculateMinuteAccordingly + 15 >= 60) {
                        final_end_min = calculateMinuteAccordingly + 15 - 60;
                        final_end_hour = calculateHourAccordingly + 1;
                    } else {
                        final_end_min = calculateMinuteAccordingly + 15;
                        final_end_hour = calculateHourAccordingly;
                    }

                    if ((final_start_year == 0) && (final_start_month == 0) && (final_start_dayOfMonth == 0) && (final_start_hour == 0) && (final_start_min == 0)) {
                        mCalendar = Calendar.getInstance();
                    } else {
                        mCalendar = new GregorianCalendar(final_start_year, final_start_month, final_start_dayOfMonth, final_start_hour, final_start_min);
                    }

                    if (mCalendar != null) {
                        if (mCalendar.getTime() != null) {
                            selectedDateTime = String.valueOf(mCalendar.getTime());
                        }
                    } else {
                        selectedDateTime = "";
                    }
                }
            }, year, month, day);
            datePickerDialog.getDatePicker().setMinDate(System.currentTimeMillis() - 1000);
            datePickerDialog.show();
        } else if (id == R.id.councelingfollowup_date) {
            int day;
            int year;
            Calendar calendar;
            int month;
            DatePickerDialog datePickerDialog;
            calendar = Calendar.getInstance();
            year = calendar.get(Calendar.YEAR);
            month = calendar.get(Calendar.MONTH);
            day = calendar.get(Calendar.DAY_OF_MONTH);

            datePickerDialog = new DatePickerDialog(this, R.style.MaterialPickerTheme, new DatePickerDialog.OnDateSetListener() {
                @Override
                public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {

                    mCalendar = Calendar.getInstance();
                    mCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
                    mCalendar.set(Calendar.MONTH, month);
                    mCalendar.set(Calendar.YEAR, year);
                    SimpleDateFormat fmt = new SimpleDateFormat("EEE, d MMM yy");

                    final_start_year = year;
                    final_start_month = month;
                    final_start_dayOfMonth = dayOfMonth;
                    final_end_year = year;
                    final_end_month = month;
                    final_end_dayOfMonth = dayOfMonth;

                    Calendar currentSettings = Calendar.getInstance();

                    Date currentDate = new Date();
                    String curentDate = DateFormat.format("yyyy/MM/dd", currentDate).toString();

                    String currentYearMonth = DateFormat.format("yyyy/MM", currentDate).toString();
                    String dateString = DateFormat.format("dd", currentDate).toString();
                    String currentDay = "", settingDay = "";
                    if (dateString != null && !dateString.isEmpty()) {
                        int date = Integer.parseInt(dateString);
                        date = date + 1;
                        currentDay = String.valueOf(date);
                    }

                    String settingDate = DateFormat.format("yyyy/MM/dd", mCalendar.getTime()).toString();
                    String settingYearMonth = DateFormat.format("yyyy/MM", mCalendar.getTime()).toString();

                    String time = DateFormat.format("dd", mCalendar.getTime()).toString();
                    if (time != null && !time.isEmpty()) {
                        settingDay = String.valueOf(Integer.parseInt(time));
                    }

                    if (curentDate != null && curentDate.equalsIgnoreCase(settingDate)) {
                        councelingfollowup_date.setText("Today");
                    } else if ((currentYearMonth != null && currentYearMonth.equalsIgnoreCase(settingYearMonth)) && settingDate != null && (currentDay.equalsIgnoreCase(settingDay))) {
                        councelingfollowup_date.setText("Tomorrow");
                    } else {
                        councelingfollowup_date.setText(fmt.format(mCalendar.getTime()));
                    }

                    int calculateMinuteAccordingly = mCalendar.get(Calendar.MINUTE);
                    int calculateHourAccordingly = mCalendar.get(Calendar.HOUR_OF_DAY);

                    final_start_min = calculateMinuteAccordingly;
                    final_start_hour = calculateHourAccordingly;

                    if (calculateMinuteAccordingly + 15 >= 60) {
                        final_end_min = calculateMinuteAccordingly + 15 - 60;
                        final_end_hour = calculateHourAccordingly + 1;
                    } else {
                        final_end_min = calculateMinuteAccordingly + 15;
                        final_end_hour = calculateHourAccordingly;
                    }

                }
            }, year, month, day);
            datePickerDialog.getDatePicker().setMinDate(System.currentTimeMillis() - 1000);
            datePickerDialog.show();
        } else if (id == R.id.call_back_date) {
            int day;
            int year;
            Calendar calendar;
            int month;
            DatePickerDialog datePickerDialog;
            calendar = Calendar.getInstance();
            year = calendar.get(Calendar.YEAR);
            month = calendar.get(Calendar.MONTH);
            day = calendar.get(Calendar.DAY_OF_MONTH);

            datePickerDialog = new DatePickerDialog(this, R.style.MaterialPickerTheme, new DatePickerDialog.OnDateSetListener() {
                @Override
                public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {

                    mCalendar = Calendar.getInstance();
                    mCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
                    mCalendar.set(Calendar.MONTH, month);
                    mCalendar.set(Calendar.YEAR, year);
                    SimpleDateFormat fmt = new SimpleDateFormat("EEE, d MMM yy");

                    final_start_year = year;
                    final_start_month = month;
                    final_start_dayOfMonth = dayOfMonth;
                    final_end_year = year;
                    final_end_month = month;
                    final_end_dayOfMonth = dayOfMonth;

                    Calendar currentSettings = Calendar.getInstance();

                    Date currentDate = new Date();
                    String curentDate = DateFormat.format("yyyy/MM/dd", currentDate).toString();

                    String currentYearMonth = DateFormat.format("yyyy/MM", currentDate).toString();
                    String dateString = DateFormat.format("dd", currentDate).toString();
                    String currentDay = "", settingDay = "";
                    if (dateString != null && !dateString.isEmpty()) {
                        int date = Integer.parseInt(dateString);
                        date = date + 1;
                        currentDay = String.valueOf(date);
                    }

                    String settingDate = DateFormat.format("yyyy/MM/dd", mCalendar.getTime()).toString();
                    String settingYearMonth = DateFormat.format("yyyy/MM", mCalendar.getTime()).toString();

                    String time = DateFormat.format("dd", mCalendar.getTime()).toString();
                    if (time != null && !time.isEmpty()) {
                        settingDay = String.valueOf(Integer.parseInt(time));
                    }

                    if (curentDate != null && curentDate.equalsIgnoreCase(settingDate)) {
                        callBackDate.setText("Today");
                    } else if ((currentYearMonth != null && currentYearMonth.equalsIgnoreCase(settingYearMonth)) && settingDate != null && (currentDay.equalsIgnoreCase(settingDay))) {
                        callBackDate.setText("Tomorrow");
                    } else {
                        callBackDate.setText(fmt.format(mCalendar.getTime()));
                    }

                    int calculateMinuteAccordingly = mCalendar.get(Calendar.MINUTE);
                    int calculateHourAccordingly = mCalendar.get(Calendar.HOUR_OF_DAY);

                    final_start_min = calculateMinuteAccordingly;
                    final_start_hour = calculateHourAccordingly;

                    if (calculateMinuteAccordingly + 15 >= 60) {
                        final_end_min = calculateMinuteAccordingly + 15 - 60;
                        final_end_hour = calculateHourAccordingly + 1;
                    } else {
                        final_end_min = calculateMinuteAccordingly + 15;
                        final_end_hour = calculateHourAccordingly;
                    }

                }
            }, year, month, day);
            datePickerDialog.getDatePicker().setMinDate(System.currentTimeMillis() - 1000);
            datePickerDialog.show();
        } else if (id == R.id.call_back_time) {
            final Calendar questionnaireTime1 = Calendar.getInstance();
            int hour = questionnaireTime1.get(Calendar.HOUR_OF_DAY);
            int minute = questionnaireTime1.get(Calendar.MINUTE);
            TimePickerDialog timePicker = new TimePickerDialog(this, R.style.MaterialPickerTheme, new TimePickerDialog.OnTimeSetListener() {
                @Override
                public void onTimeSet(TimePicker timePicker, int selectedHour, int selectedMinute) {

                    mCalendar = Calendar.getInstance();

                    String meridian = "";
                    // Prathik issue
                    Calendar datetime = null;
                    if (callBackDate != null) {
                        if (callBackDate.getText().toString() != null && callBackDate.getText().toString().equalsIgnoreCase("today")) {
                            datetime = Calendar.getInstance();

                            int getYear = datetime.get(Calendar.YEAR);
                            int getMonth = datetime.get(Calendar.MONTH);
                            int getDay = datetime.get(Calendar.DAY_OF_MONTH);

                            final_start_year = getYear;
                            final_start_month = getMonth;
                            final_start_dayOfMonth = getDay;

                            mCalendar.set(Calendar.DAY_OF_MONTH, getDay);
                            mCalendar.set(Calendar.MONTH, getMonth);
                            mCalendar.set(Calendar.YEAR, getYear);
                        } else {
                            datetime = Calendar.getInstance();
                        }
                    } else {
                        datetime = Calendar.getInstance();
                    }
                    datetime.set(Calendar.HOUR_OF_DAY, selectedHour);
                    datetime.set(Calendar.MINUTE, selectedMinute);

                    switch (datetime.get(Calendar.AM_PM)) {
                        case Calendar.AM:
                            meridian = "AM";
                            break;
                        case Calendar.PM:
                            meridian = "PM";
                            break;
                    }

                    final_start_min = selectedMinute;
                    final_start_hour = selectedHour;

                    int endHourOfDay = 0, endMinute;
                    endMinute = selectedMinute + 60;
                    if (endMinute >= 60) {
                        endHourOfDay = endHourOfDay + 1;
                        endMinute = selectedMinute % 60;
                    }
                    endHourOfDay = endHourOfDay + selectedHour;
                    if (selectedHour >= 24) {
                        endHourOfDay = endHourOfDay % 24;
                    }
                    mCalendar.set(Calendar.HOUR_OF_DAY, selectedHour);
                    mCalendar.set(Calendar.MINUTE, selectedMinute);

                    int end = 0;
                    int modifiedEndMinute = endMinute;
                    int modifiedEndHour = endHourOfDay;
                    switch (end) {
                        case 0:
                            if (modifiedEndMinute + 15 > 60) {
                                modifiedEndMinute = (modifiedEndMinute + 15) - modifiedEndMinute;

                                if (modifiedEndHour >= 24) {
                                    modifiedEndHour = 0;
                                } else {
                                    modifiedEndHour++;
                                }
                            } else {
                                modifiedEndMinute += 15;
                            }
                            break;
                        case 1:
                            if (modifiedEndMinute + 30 > 60) {
                                modifiedEndMinute = (modifiedEndMinute + 30) - modifiedEndMinute;
                                if (modifiedEndHour >= 24) {
                                    modifiedEndHour = 0;
                                } else {
                                    modifiedEndHour++;
                                }
                            } else {
                                modifiedEndMinute += 30;
                            }
                            break;
                        case 2:
                            if (modifiedEndMinute != 60) {
                                modifiedEndMinute = (modifiedEndMinute + 60) - modifiedEndMinute;
                            }

                            if (modifiedEndHour >= 24) {
                                modifiedEndHour = 0;
                            } else {
                                modifiedEndHour++;
                            }
                            break;
                    }

                    final_end_hour = modifiedEndHour;
                    final_end_min = modifiedEndMinute;

                    if (selectedHour > 12) {
                        selectedHour -= 12;
                    }

                    if (selectedMinute < 10) {
                        callBackTime.setText("" + selectedHour + ":0" + selectedMinute + " " + meridian);
                    } else {
                        callBackTime.setText("" + selectedHour + ":" + selectedMinute + " " + meridian);
                    }
                }
            }, hour, minute, false);
            timePicker.show();
        } else if (id == R.id.councelingfollowup_time) {
            int minute;
            TimePickerDialog timePicker;
            int hour;
            final Calendar councelingfollowupTime1 = Calendar.getInstance();
            hour = councelingfollowupTime1.get(Calendar.HOUR_OF_DAY);
            minute = councelingfollowupTime1.get(Calendar.MINUTE);
            timePicker = new TimePickerDialog(this, R.style.MaterialPickerTheme, new TimePickerDialog.OnTimeSetListener() {
                @Override
                public void onTimeSet(TimePicker timePicker, int selectedHour, int selectedMinute) {
                    mCalendar = Calendar.getInstance();
                    String meridian = "";
                    // Prathik issue
                    Calendar datetime = null;
                    if (councelingfollowup_date != null) {
                        if (councelingfollowup_date.getText().toString() != null && councelingfollowup_date.getText().toString().equalsIgnoreCase("today")) {
                            datetime = Calendar.getInstance();

                            int getYear = datetime.get(Calendar.YEAR);
                            int getMonth = datetime.get(Calendar.MONTH);
                            int getDay = datetime.get(Calendar.DAY_OF_MONTH);

                            final_start_year = getYear;
                            final_start_month = getMonth;
                            final_start_dayOfMonth = getDay;

                            mCalendar.set(Calendar.DAY_OF_MONTH, getDay);
                            mCalendar.set(Calendar.MONTH, getMonth);
                            mCalendar.set(Calendar.YEAR, getYear);
                        } else {
                            datetime = Calendar.getInstance();
                        }
                    } else {
                        datetime = Calendar.getInstance();
                    }
                    datetime.set(Calendar.HOUR_OF_DAY, selectedHour);
                    datetime.set(Calendar.MINUTE, selectedMinute);

                    switch (datetime.get(Calendar.AM_PM)) {
                        case Calendar.AM:
                            meridian = "AM";
                            break;
                        case Calendar.PM:
                            meridian = "PM";
                            break;
                    }

                    final_start_min = selectedMinute;
                    final_start_hour = selectedHour;

                    int endHourOfDay = 0, endMinute;
                    endMinute = selectedMinute + 60;
                    if (endMinute >= 60) {
                        endHourOfDay = endHourOfDay + 1;
                        endMinute = selectedMinute % 60;
                    }
                    endHourOfDay = endHourOfDay + selectedHour;
                    if (selectedHour >= 24) {
                        endHourOfDay = endHourOfDay % 24;
                    }
                    mCalendar.set(Calendar.HOUR_OF_DAY, selectedHour);
                    mCalendar.set(Calendar.MINUTE, selectedMinute);

                    int end = 0;
                    int modifiedEndMinute = endMinute;
                    int modifiedEndHour = endHourOfDay;
                    switch (end) {
                        case 0:
                            if (modifiedEndMinute + 15 > 60) {
                                modifiedEndMinute = (modifiedEndMinute + 15) - modifiedEndMinute;

                                if (modifiedEndHour >= 24) {
                                    modifiedEndHour = 0;
                                } else {
                                    modifiedEndHour++;
                                }
                            } else {
                                modifiedEndMinute += 15;
                            }
                            break;
                        case 1:
                            if (modifiedEndMinute + 30 > 60) {
                                modifiedEndMinute = (modifiedEndMinute + 30) - modifiedEndMinute;
                                if (modifiedEndHour >= 24) {
                                    modifiedEndHour = 0;
                                } else {
                                    modifiedEndHour++;
                                }
                            } else {
                                modifiedEndMinute += 30;
                            }
                            break;
                        case 2:
                            if (modifiedEndMinute != 60) {
                                modifiedEndMinute = (modifiedEndMinute + 60) - modifiedEndMinute;
                            }

                            if (modifiedEndHour >= 24) {
                                modifiedEndHour = 0;
                            } else {
                                modifiedEndHour++;
                            }
                            break;
                    }

                    final_end_hour = modifiedEndHour;
                    final_end_min = modifiedEndMinute;

                    if (selectedHour > 12) {
                        selectedHour -= 12;
                    }

                    if (selectedMinute < 10) {
                        councelingfollowup_time.setText("" + selectedHour + ":0" + selectedMinute + " " + meridian);
                    } else {
                        councelingfollowup_time.setText("" + selectedHour + ":" + selectedMinute + " " + meridian);
                    }
                }
            }, hour, minute, false);
            timePicker.show();
        } else if (id == R.id.sm_call_button) {
            String number = et_sm_number.getText().toString();
            et_sm_number.setCursorVisible(false);
            if (number == null || number.isEmpty()) {
                et_sm_number.setText("Number cannot be empty");
            } else {
                et_sm_number.setText("Dialing.." + number);
                adhocCallFromHome(number);
                sm_call_button.setEnabled(false);
            }

            //chatMakingCall = true;
                /*CommonUtils.chatMakeCall(this, number, 0, "",
                        "", "", "",
                        "", "");*/
        } else if (id == R.id.questionnaire_time || id == R.id.followup_time || id == R.id.tv_custom_time) {
            int minute;
            TimePickerDialog timePicker;
            int hour;
            btnTen.setBackgroundResource(R.drawable.editext_background);
            btnThirty.setBackgroundResource(R.drawable.editext_background);
            btnSixty.setBackgroundResource(R.drawable.editext_background);
            questionnaire_btnTen.setBackgroundResource(R.drawable.call_flow_button);
            questionnaire_btnThirty.setBackgroundResource(R.drawable.call_flow_button);
            questionnaire_btnSixty.setBackgroundResource(R.drawable.call_flow_button);
            quesButtonTenTextView.setTextColor(getResources().getColor(R.color.ques_text_color));
            quesButtonThirtyTextView.setTextColor(getResources().getColor(R.color.ques_text_color));
            quesButtonSixtyTextView.setTextColor(getResources().getColor(R.color.ques_text_color));

            final Calendar questionnaireTime = Calendar.getInstance();
            hour = questionnaireTime.get(Calendar.HOUR_OF_DAY);
            minute = questionnaireTime.get(Calendar.MINUTE);
            timePicker = new TimePickerDialog(this, R.style.MaterialPickerTheme, new TimePickerDialog.OnTimeSetListener() {
                @Override
                public void onTimeSet(TimePicker timePicker, int selectedHour, int selectedMinute) {

                    mCalendar = Calendar.getInstance();

                    String meridian = "";
                    // Prathik issue
                    Calendar datetime = null;
                    if (questDate != null) {
                        if (questDate.getText().toString() != null && questDate.getText().toString().equalsIgnoreCase("today")) {
                            datetime = Calendar.getInstance();

                            int getYear = datetime.get(Calendar.YEAR);
                            int getMonth = datetime.get(Calendar.MONTH);
                            int getDay = datetime.get(Calendar.DAY_OF_MONTH);

                            final_start_year = getYear;
                            final_start_month = getMonth;
                            final_start_dayOfMonth = getDay;

                            mCalendar.set(Calendar.DAY_OF_MONTH, getDay);
                            mCalendar.set(Calendar.MONTH, getMonth);
                            mCalendar.set(Calendar.YEAR, getYear);
                        } else {
                            datetime = Calendar.getInstance();
                        }
                    } else if (followupDate != null) {
                        if (followupDate.getText().toString() != null && followupDate.getText().toString().equalsIgnoreCase("today")) {
                            datetime = Calendar.getInstance();

                            int getYear = datetime.get(Calendar.YEAR);
                            int getMonth = datetime.get(Calendar.MONTH);
                            int getDay = datetime.get(Calendar.DAY_OF_MONTH);

                            final_start_year = getYear;
                            final_start_month = getMonth;
                            final_start_dayOfMonth = getDay;

                            mCalendar.set(Calendar.DAY_OF_MONTH, getDay);
                            mCalendar.set(Calendar.MONTH, getMonth);
                            mCalendar.set(Calendar.YEAR, getYear);
                        } else {
                            datetime = Calendar.getInstance();
                        }
                    } else if (mCustomDate != null) {
                        if (mCustomDate.getText().toString() != null && mCustomDate.getText().toString().equalsIgnoreCase("today")) {
                            datetime = Calendar.getInstance();

                            int getYear = datetime.get(Calendar.YEAR);
                            int getMonth = datetime.get(Calendar.MONTH);
                            int getDay = datetime.get(Calendar.DAY_OF_MONTH);

                            final_start_year = getYear;
                            final_start_month = getMonth;
                            final_start_dayOfMonth = getDay;

                            mCalendar.set(Calendar.DAY_OF_MONTH, getDay);
                            mCalendar.set(Calendar.MONTH, getMonth);
                            mCalendar.set(Calendar.YEAR, getYear);
                        } else {
                            datetime = Calendar.getInstance();
                        }
                    } else {
                        datetime = Calendar.getInstance();
                    }

                    datetime.set(Calendar.HOUR_OF_DAY, selectedHour);
                    datetime.set(Calendar.MINUTE, selectedMinute);

                    switch (datetime.get(Calendar.AM_PM)) {
                        case Calendar.AM:
                            meridian = "AM";
                            break;
                        case Calendar.PM:
                            meridian = "PM";
                            break;
                    }

                    final_start_min = selectedMinute;
                    final_start_hour = selectedHour;

                    int endHourOfDay = 0, endMinute;
                    endMinute = selectedMinute + 60;
                    if (endMinute >= 60) {
                        endHourOfDay = endHourOfDay + 1;
                        endMinute = selectedMinute % 60;
                    }
                    endHourOfDay = endHourOfDay + selectedHour;
                    if (selectedHour >= 24) {
                        endHourOfDay = endHourOfDay % 24;
                    }


                    mCalendar.set(Calendar.HOUR_OF_DAY, selectedHour);
                    mCalendar.set(Calendar.MINUTE, selectedMinute);
                    int end = 0;
                    int modifiedEndMinute = endMinute;
                    int modifiedEndHour = endHourOfDay;
                    switch (end) {
                        case 0:
                            if (modifiedEndMinute + 15 > 60) {
                                modifiedEndMinute = (modifiedEndMinute + 15) - modifiedEndMinute;

                                if (modifiedEndHour >= 24) {
                                    modifiedEndHour = 0;
                                } else {
                                    modifiedEndHour++;
                                }
                            } else {
                                modifiedEndMinute += 15;
                            }
                            break;
                        case 1:
                            if (modifiedEndMinute + 30 > 60) {
                                modifiedEndMinute = (modifiedEndMinute + 30) - modifiedEndMinute;
                                if (modifiedEndHour >= 24) {
                                    modifiedEndHour = 0;
                                } else {
                                    modifiedEndHour++;
                                }
                            } else {
                                modifiedEndMinute += 30;
                            }
                            break;
                        case 2:
                            if (modifiedEndMinute != 60) {
                                modifiedEndMinute = (modifiedEndMinute + 60) - modifiedEndMinute;
                            }

                            if (modifiedEndHour >= 24) {
                                modifiedEndHour = 0;
                            } else {
                                modifiedEndHour++;
                            }
                            break;
                    }

                    final_end_hour = modifiedEndHour;
                    final_end_min = modifiedEndMinute;

                    if (selectedHour > 12) {
                        selectedHour -= 12;
                    }

                    if (selectedMinute < 10) {
                        questTime.setText("" + selectedHour + ":0" + selectedMinute + " " + meridian);
                        followupTime.setText("" + selectedHour + ":0" + selectedMinute + " " + meridian);
                        mCustomTime.setText("" + selectedHour + ":0" + selectedMinute + " " + meridian);
                    } else {
                        questTime.setText("" + selectedHour + ":" + selectedMinute + " " + meridian);
                        followupTime.setText("" + selectedHour + ":" + selectedMinute + " " + meridian);
                        mCustomTime.setText("" + selectedHour + ":" + selectedMinute + " " + meridian);
                    }
                    if ((final_start_year == 0) && (final_start_month == 0) && (final_start_dayOfMonth == 0) && (final_start_hour == 0) && (final_start_min == 0)) {
                        mCalendar = Calendar.getInstance();
                    } else {
                        mCalendar = new GregorianCalendar(final_start_year, final_start_month, final_start_dayOfMonth, final_start_hour, final_start_min);
                    }

                    if (mCalendar != null) {
                        if (mCalendar.getTime() != null) {
                            selectedDateTime = String.valueOf(mCalendar.getTime());
                        }
                    } else {
                        selectedDateTime = "";
                    }
                }
            }, hour, minute, false);
            timePicker.show();
        } else {
            String questionsAct;
            if (view instanceof Button) {
                resetPreviousButtonSelection();
                Button button = (Button) findViewById(view.getId());
                paymentModeFromButton = button.getText().toString();
                currentSelectedButton = button.getText().toString();
                button.setTextColor(getResources().getColor(R.color.white));
                button.setBackground(getResources().getDrawable(R.drawable.call_flow_button_red));
                selectedButtonList.add(view.getId());
            } else {
                questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
                if (questionsAct != null && !questionsAct.isEmpty()) {
                    formButtonLayout.setVisibility(View.GONE);
                    create_followup_card.setVisibility(View.GONE);
                    uView.setVisibility(View.VISIBLE);
                    cView.setVisibility(View.GONE);
                    rView.setVisibility(View.GONE);
                    redialView.setVisibility(View.GONE);
                    ServiceHandler.processCompleted = false;
                } else {
                    callbackCheck = false;
                    checkRNR = false;
                    changeLayoutColor(111);
                    uView.setVisibility(View.VISIBLE);
                    cView.setVisibility(View.GONE);
                    rView.setVisibility(View.GONE);
                    redialView.setVisibility(View.GONE);
                    if (followUpButtonClicked) {
                        create_followup_card.setVisibility(View.VISIBLE);
                        llCallAgain.setVisibility(View.VISIBLE);
                        orText.setVisibility(View.VISIBLE);
                        remarksCard.setVisibility(View.VISIBLE);
                    } else {
                        create_followup_card.setVisibility(View.GONE);
                        llCallAgain.setVisibility(View.GONE);
                        orText.setVisibility(View.GONE);
                        remarksCard.setVisibility(View.GONE);
                    }
                    checkViewFocus();
                }
            }
        }
    }

    private void defaultRNRLayout() {
        String connectedNumber = ApplicationSettings.getPref(AppConstants.CONNECTED_CUSTOMER, "");
        if (connectedNumber != null && !connectedNumber.isEmpty()) {
            return;
        }

        ServiceHandler.callDisconnected = true;
        checkRNR = true;
        remarksCard.setVisibility(View.GONE);
        create_followup_card.setVisibility(View.GONE);
        llCallAgain.setVisibility(View.GONE);

        if (UearnHome.autoDial) {
            startAutodialler = true;
        }

        if (callEndedFromDuringCall) {
            submitLayout.setVisibility(View.VISIBLE);
        }

        SmarterSMBApplication.currentAppState = "ACP";

        rnrMainLinearLayout.setBackgroundResource(R.drawable.card_border_layout);
        redialMainLinearLayout.setBackgroundResource(R.color.card_background_color);
        updateMainLinearLayout.setBackgroundResource(R.color.card_background_color);
        callbackMainLinearLayout.setBackgroundResource(R.color.card_background_color);

        leadSheetAttached = false;
        callbackCheck = false;
        uView.setVisibility(View.GONE);
        cView.setVisibility(View.GONE);
        rView.setVisibility(View.VISIBLE);
        statusGetInfoRelativeLayout.setVisibility(View.GONE);
        getCustomInfoLayout.setVisibility(View.GONE);
        redialView.setVisibility(View.GONE);
        remarksCard.setVisibility(View.GONE);

        if (UearnHome.manualDialing)
            UearnActivity.redialScenarioCompleted = false;
        else
            UearnActivity.redialScenarioCompleted = !UearnHome.dialingFromList;

        ApplicationSettings.putPref(AFTER_CALL_NAME, "");

        onBackPressed = false;

        if (NotificationData.substatus1 != null) {
            subStatus1 = NotificationData.substatus1;
        }
        if (NotificationData.substatus2 != null) {
            subStatus2 = NotificationData.substatus2;
        }
        if (NotificationData.statusString != null) {
            status = NotificationData.statusString;
        }
        duraionOfACall = "0";
        getRNRCount();
        rnrLayout();
        checkSalesList();
        String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
        if (questionsAct != null && !questionsAct.isEmpty()) {
            uView.setVisibility(View.VISIBLE);
            cView.setVisibility(View.GONE);
            rView.setVisibility(View.VISIBLE);
            uView.setVisibility(View.GONE);
            mmtAcpBottomLayout.setVisibility(View.GONE);
            acpBottomLayout.setVisibility(View.VISIBLE);
            redialView.setVisibility(View.GONE);
            if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty()) {
                flp_layout.setWeightSum(3);
            }
            ServiceHandler.processCompleted = false;
        }
        layout5.setVisibility(View.GONE);
        create_followup_card.setVisibility(View.GONE);
        llCallAgain.setVisibility(View.GONE);
        cView.setVisibility(View.GONE);
    }

    private void rnrUpdateACPLayout() {
        String connectedNumber = ApplicationSettings.getPref(AppConstants.CONNECTED_CUSTOMER, "");
        if (connectedNumber != null && !connectedNumber.isEmpty()) {
            return;
        }

        ServiceHandler.callDisconnected = true;
        checkRNR = true;
        remarksCard.setVisibility(View.GONE);
        create_followup_card.setVisibility(View.GONE);
        llCallAgain.setVisibility(View.GONE);

        if (UearnHome.autoDial) {
            startAutodialler = true;
        }

        if (callEndedFromDuringCall) {
            submitLayout.setVisibility(View.VISIBLE);
        }

        SmarterSMBApplication.currentAppState = "ACP";

        rnrMainLinearLayout.setBackgroundResource(R.color.card_background_color);
        redialMainLinearLayout.setBackgroundResource(R.color.card_background_color);
        updateMainLinearLayout.setBackgroundResource(R.drawable.card_border_layout);
        callbackMainLinearLayout.setBackgroundResource(R.color.card_background_color);

        leadSheetAttached = false;
        callbackCheck = false;
        uView.setVisibility(View.VISIBLE);
        cView.setVisibility(View.GONE);
        rView.setVisibility(View.GONE);
        statusGetInfoRelativeLayout.setVisibility(View.GONE);
        getCustomInfoLayout.setVisibility(View.GONE);
        redialView.setVisibility(View.GONE);
        remarksCard.setVisibility(View.GONE);

        if (UearnHome.manualDialing)
            UearnActivity.redialScenarioCompleted = false;
        else
            UearnActivity.redialScenarioCompleted = !UearnHome.dialingFromList;

        ApplicationSettings.putPref(AFTER_CALL_NAME, "");

        onBackPressed = false;

        if (NotificationData.substatus1 != null) {
            subStatus1 = NotificationData.substatus1;
        }
        if (NotificationData.substatus2 != null) {
            subStatus2 = NotificationData.substatus2;
        }
        if (NotificationData.statusString != null) {
            status = NotificationData.statusString;
        }
        duraionOfACall = "0";
        getRNRCount();
        rnrLayout();
        checkSalesList();
        String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
        if (questionsAct != null && !questionsAct.isEmpty()) {
            uView.setVisibility(View.VISIBLE);
            cView.setVisibility(View.GONE);
            rView.setVisibility(View.GONE);
            uView.setVisibility(View.GONE);
            mmtAcpBottomLayout.setVisibility(View.GONE);
            acpBottomLayout.setVisibility(View.VISIBLE);
            redialView.setVisibility(View.GONE);
            if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty()) {
                flp_layout.setWeightSum(3);
            }
            ServiceHandler.processCompleted = false;
        }
        layout5.setVisibility(View.GONE);
        create_followup_card.setVisibility(View.GONE);
        llCallAgain.setVisibility(View.GONE);
        cView.setVisibility(View.GONE);
    }

    private Dialog stopCallAndMoveToHomescreenDialog(final Activity activity, String title, String message) {

        final Dialog exitDialog = buildTwoButtonDialog(activity, title, message);
        exitDialog.setCanceledOnTouchOutside(false);

        exitDialog.getWindow().getDecorView().setSystemUiVisibility(
                View.SYSTEM_UI_FLAG_IMMERSIVE
                        | View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                        | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                        | View.SYSTEM_UI_FLAG_FULLSCREEN);

        TextView btnNo = exitDialog.findViewById(R.id.btn_no);
        btnNo.setText("CANCEL");
        btnNo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                SmarterSMBApplication.launchAppButtonClicked = false;
                if (exitDialog != null) {
                    exitDialog.dismiss();
                }
            }
        });

        TextView btnYes = exitDialog.findViewById(R.id.btn_yes);
        btnYes.setText("YES");
        btnYes.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (exitDialog != null) {
                    exitDialog.cancel();
                }
                if(SmarterSMBApplication.abortCallSessionScenario){
                    SmarterSMBApplication.abortCallSessionScenario = false;
                    clearEndSessionContext();
                    showACPScreen();
                    endSessionButtonAction();
                } else {
                    launchAppButtonAction();
                }

            }
        });
        return exitDialog;
    }

    private void clearEndSessionContext() {
        customkvsLayout.setVisibility(View.GONE);
        formButtonLayout.setVisibility(View.GONE);
        layout5.setVisibility(View.GONE);
    }

    private void launchAppButtonAction() {

        SmarterSMBApplication.launchAppButtonClicked = false;
        SmarterSMBApplication.incomingCallRejectedByAgent = true;
        SmarterSMBApplication.endTheSession = true;
        SmarterSMBApplication.enableECBAndESB = false;
        SmarterSMBApplication.autoCallAnswered = false;

        if (CommonUtils.allowASF()) {
            SmarterSMBApplication.takingBreakInPD = true;
        }

        if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
            boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
            if (ibControl) {
                SmarterSMBApplication.autoCallAnswered = false;
            }
        }

        if (ApplicationSettings.containsPref(AppConstants.CALL_WAITING)) {
            boolean callWaiting = ApplicationSettings.getPref(AppConstants.CALL_WAITING, false);
            if (callWaiting) {

            } else {
                SmarterSMBApplication.isRemoteDialledStart = false;
            }
        } else {
            SmarterSMBApplication.isRemoteDialledStart = false;
        }

        if (!SmarterSMBApplication.incomingCallAcceptedByAgent) {
            endCallButtonLayout.setVisibility(View.GONE);
            statusGetInfoRelativeLayout.setVisibility(View.GONE);
        }
        if (SmarterSMBApplication.callStateIsDisconnected) {
            navigateToUearnHome();
        } else {
            if (ApplicationSettings.containsPref(AppConstants.FK_CONTROL)) {
                boolean fkControl = ApplicationSettings.getPref(AppConstants.FK_CONTROL, false);
                if (fkControl) {
                    if (SmarterSMBApplication.incomingCallAcceptedByAgent) {
                        callEndedFromDuringCall = true;
                        showACPScreen();
                    } else {
                        navigateToUearnHome();
                    }
                }
            } else if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
                boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
                if (ibControl) {
                    if (SmarterSMBApplication.incomingCallAcceptedByAgent) {
                        callEndedFromDuringCall = true;
                        showACPScreen();
                    } else {
                        navigateToUearnHome();
                    }
                }
            } else {
                if (SmarterSMBApplication.oneCallIsActive) {
                    endActiveCall();
                }
                navigateToUearnHome();
            }
        }
    }

    public Dialog buildTwoButtonDialog(Activity activity, String title, String message) {
        final Dialog twoButtonDialog = new Dialog(activity);
        twoButtonDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        twoButtonDialog.setContentView(R.layout.uearn_activity_common_two_button);
        twoButtonDialog.getWindow().setLayout(WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.WRAP_CONTENT);
        TextView tvTitle = twoButtonDialog.findViewById(R.id.tvDialogTitle);
        tvTitle.setText(title);
        TextView tvMessage = twoButtonDialog.findViewById(R.id.tvDialogMessage);
        tvMessage.setText(message);
        return twoButtonDialog;
    }

    private void endCallButtonAction() {
        SmarterSMBApplication.callEndedFromDuringCall = true;
        long callEndTime = System.currentTimeMillis();
        ApplicationSettings.putPref(AppConstants.CALL_END_TIME, callEndTime);
        boolean truePredictive = ApplicationSettings.getPref(AppConstants.TRUE_PREDICTIVE, false);
        if (truePredictive) {
            callEndedFromDuringCall = true;
            SmarterSMBApplication.agentDisconnectScenario = true;
            SmarterSMBApplication.customerDisconnectScenario = false;
            SmarterSMBApplication.legADisconnectScenario = false;
            SmarterSMBApplication.navigateToACP = false;
            if (UearnHome.dialingFromList || UearnHome.manualDialing) {
                ApplicationSettings.putPref(AppConstants.QUESTIONS_COUNT, 0);
                ApplicationSettings.putPref(AppConstants.ROOT_ARRAY_DATA_LENGTH, 0);
                String qanda = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");
                if (qanda != null && !qanda.isEmpty() && !qanda.equals("null")) {
                    if (APP_IN_BACKGROUND) {
                        APP_IN_BACKGROUND = false;
                    }
                }
                killCall(this);
            } else {
                NotificationData.source = "Agent disconnected";
                if (NotificationData.dialledCustomerNumber != null && !NotificationData.dialledCustomerNumber.isEmpty()) {
                    if (SmarterSMBApplication.isCurrentQuesMandatory  && NotificationData.isSocketResponse && SmarterSMBApplication.currentAppState.equalsIgnoreCase("Connected")) {
                        SmarterSMBApplication.callEndedFromDuringCall = false;
                        Toast.makeText(this, "Please complete the questionnaire", Toast.LENGTH_SHORT).show();
                    } else {
                        new CallDisconnectInfo().execute();
                    }
                } else {
                    if (SmarterSMBApplication.callStateIsDisconnected) {

                    } else {
                        new CallDisconnectInfo().execute();
                    }
                }
                ApplicationSettings.putPref(AppConstants.CUSTOMER_DISCONNECT, NotificationData.dialledCustomerNumber);
                if (NotificationData.dialledCustomerNumber != null && !NotificationData.dialledCustomerNumber.isEmpty()) {
                    stopRecording(NotificationData.dialledCustomerNumber);
                } else {
                    if (SmarterSMBApplication.callingFollowUps) {
                        Cursor flpMissedCusrosr = getFlpMissedCursor();
                        if (flpMissedCusrosr != null && flpMissedCusrosr.getCount() > 0) {
                            SmarterSMBApplication.sendCallDisconnectStartFollowUpRequest = true;
                        }
                        if (!ServiceHandler.callDisconnected) {
                            endCallButtonLayout.setVisibility(View.GONE);
                            statusGetInfoRelativeLayout.setVisibility(View.GONE);
                            SmarterSMBApplication.endTheSession = true;
                            navigateToUearnHome();
                        } else {
                            this.finish();
                        }
                    } else {
                        if (!NotificationData.isSocketResponse) {
                            Cursor flpMissedCusrosr = getFlpMissedCursor();
                            if (flpMissedCusrosr != null && flpMissedCusrosr.getCount() > 0) {
                                SmarterSMBApplication.sendCallDisconnectStartFollowUpRequest = true;
                            }
                            if (!ServiceHandler.callDisconnected) {
                                endCallButtonLayout.setVisibility(View.GONE);
                                statusGetInfoRelativeLayout.setVisibility(View.GONE);
                                if (SmarterSMBApplication.callStateIsDisconnected) {
                                    SmarterSMBApplication.callStateIsDisconnected = false;
                                    if (SmarterSMBApplication.isDiallingFollowUpC2C || SmarterSMBApplication.remoteEnabledRedialScenario || SmarterSMBApplication.followupsInPredictive) {
                                        endCallButtonLayout.setVisibility(View.GONE);
                                        statusGetInfoRelativeLayout.setVisibility(View.GONE);
                                        layout5.setVisibility(View.GONE);
                                        ServiceHandler.callDisconnected = true;
                                        ServiceHandler.processCompleted = true;
                                        SmarterSMBApplication.navigateToACP = true;
                                        Intent currentIntent = new Intent("android.intent.action.MAIN");
                                        currentIntent.setComponent(getIntent().getComponent());
                                        currentIntent.addCategory("android.intent.category.LAUNCHER");
                                        currentIntent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
                                        startActivity(currentIntent);
                                    } else {
                                        SmarterSMBApplication.endTheSession = true;
                                        navigateToUearnHome();
                                    }
                                } else {
                                    if (SmarterSMBApplication.outgoingCallNotInStartMode) {
                                        String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
                                        if (questionsAct != null && !questionsAct.isEmpty()) {
                                            callEndedFromDuringCall = true;
                                        }
                                        endCallButtonLayout.setVisibility(View.GONE);
                                        nextButtonClicked = false;
                                        if (!NotificationData.isSocketResponse) {
                                            callbacklayoutview.setEnabled(false);
                                        }
                                        if (getCustomInfoLayout != null)
                                            getCustomInfoLayout.setVisibility(View.GONE);
                                        killCall(this);
                                        if (questionsAct != null && !questionsAct.isEmpty()) {
                                            if (ServiceHandler.callDisconnected) {
                                                NotificationData.legAConnect = false;
                                                SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
                                                String dbId = sharedPref.getString("dbid", "0");
                                                if (!dbId.isEmpty()) {
                                                    dbid = Long.valueOf(dbId);
                                                    Intent intent = getIntent();
                                                    finish();
                                                    if (!SmarterSMBApplication.showSingleAcp) {
                                                        SmarterSMBApplication.showSingleAcp = true;
                                                        startActivity(intent);
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        ServiceHandler.callDisconnected = true;
                                        ServiceHandler.processCompleted = true;
                                        SmarterSMBApplication.navigateToACP = true;
                                        Intent intent = getIntent();
                                        goToHomeScreen();
                                        intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
                                        overridePendingTransition(0, 0);
                                        startActivity(intent);
                                        overridePendingTransition(0, 0);
                                    }
                                }
                            } else {
                                truePredictive = ApplicationSettings.getPref(AppConstants.TRUE_PREDICTIVE, false);
                                if (truePredictive) {
                                    navigateToUearnHome();
                                } else {
                                    this.finish();
                                }
                            }
                        } else {
                            ServiceHandler.callDisconnected = true;
                            ServiceHandler.processCompleted = true;
                            SmarterSMBApplication.navigateToACP = true;
                            Intent intent = getIntent();
                            goToHomeScreen();
                            intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
                            overridePendingTransition(0, 0);
                            startActivity(intent);
                            overridePendingTransition(0, 0);
                        }
                    }
                }
            }
        } else {
            if (NotificationData.dialledCustomerNumber != null && !NotificationData.dialledCustomerNumber.isEmpty()) {

                if (SmarterSMBApplication.isCurrentQuesMandatory  && NotificationData.isSocketResponse && SmarterSMBApplication.currentAppState.equalsIgnoreCase("Connected")) {
                    SmarterSMBApplication.callEndedFromDuringCall = false;
                    Toast.makeText(this, "Please complete the questionnaire", Toast.LENGTH_SHORT).show();
                } else {
                    immediateQuestionnaireSubmit();
                    connectedAndRNRScenarioSD();
                }
            } else if (SmarterSMBApplication.outgoingCallNotInStartMode) {
                if (NotificationData.outboundDialledCustomerNumber != null && !NotificationData.outboundDialledCustomerNumber.isEmpty()) {
                    if (SmarterSMBApplication.isCurrentQuesMandatory  && NotificationData.isSocketResponse && SmarterSMBApplication.currentAppState.equalsIgnoreCase("Connected")) {
                        SmarterSMBApplication.callEndedFromDuringCall = false;
                        Toast.makeText(this, "Please complete the questionnaire", Toast.LENGTH_SHORT).show();
                    } else {
                        immediateQuestionnaireSubmit();
                        connectedAndRNRScenarioSD();
                    }
                } else {
                    connectedAndRNRScenarioSD();
                }
            } else {
                connectedAndRNRScenarioSD();
            }
        }
    }

    private void endSessionButtonAction() {
        SmarterSMBApplication.callEndedFromDuringCall = true;
        long callEndTime = System.currentTimeMillis();
        ApplicationSettings.putPref(AppConstants.CALL_END_TIME, callEndTime);
        boolean truePredictive = ApplicationSettings.getPref(AppConstants.TRUE_PREDICTIVE, false);
        if (truePredictive) {
            callEndedFromDuringCall = true;
            SmarterSMBApplication.agentDisconnectScenario = true;
            SmarterSMBApplication.customerDisconnectScenario = false;
            SmarterSMBApplication.legADisconnectScenario = false;
            SmarterSMBApplication.navigateToACP = false;
            if (UearnHome.dialingFromList || UearnHome.manualDialing) {
                ApplicationSettings.putPref(AppConstants.QUESTIONS_COUNT, 0);
                ApplicationSettings.putPref(AppConstants.ROOT_ARRAY_DATA_LENGTH, 0);
                String qanda = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");
                if (qanda != null && !qanda.isEmpty() && !qanda.equals("null")) {
                    if (APP_IN_BACKGROUND) {
                        APP_IN_BACKGROUND = false;
                    }
                }
                killCall(this);
            } else {
                NotificationData.source = "Agent disconnected";
                if (NotificationData.dialledCustomerNumber != null && !NotificationData.dialledCustomerNumber.isEmpty()) {
                    new CallDisconnectInfo().execute();
                } else {
                    if (SmarterSMBApplication.callStateIsDisconnected) {

                    } else {
                        new CallDisconnectInfo().execute();
                    }
                }
                ApplicationSettings.putPref(AppConstants.CUSTOMER_DISCONNECT, NotificationData.dialledCustomerNumber);
                if (NotificationData.dialledCustomerNumber != null && !NotificationData.dialledCustomerNumber.isEmpty()) {
                    stopRecording(NotificationData.dialledCustomerNumber);
                } else {
                    if (SmarterSMBApplication.callingFollowUps) {
                        Cursor flpMissedCusrosr = getFlpMissedCursor();
                        if (flpMissedCusrosr != null && flpMissedCusrosr.getCount() > 0) {
                            SmarterSMBApplication.sendCallDisconnectStartFollowUpRequest = true;
                        }
                        if (!ServiceHandler.callDisconnected) {
                            endCallButtonLayout.setVisibility(View.GONE);
                            statusGetInfoRelativeLayout.setVisibility(View.GONE);
                            SmarterSMBApplication.endTheSession = true;
                            navigateToUearnHome();
                        } else {
                            this.finish();
                        }
                    } else {
                        if (!NotificationData.isSocketResponse) {
                            Cursor flpMissedCusrosr = getFlpMissedCursor();
                            if (flpMissedCusrosr != null && flpMissedCusrosr.getCount() > 0) {
                                SmarterSMBApplication.sendCallDisconnectStartFollowUpRequest = true;
                            }
                            if (!ServiceHandler.callDisconnected) {
                                endCallButtonLayout.setVisibility(View.GONE);
                                statusGetInfoRelativeLayout.setVisibility(View.GONE);
                                if (SmarterSMBApplication.callStateIsDisconnected) {
                                    SmarterSMBApplication.callStateIsDisconnected = false;
                                    if (SmarterSMBApplication.isDiallingFollowUpC2C || SmarterSMBApplication.remoteEnabledRedialScenario || SmarterSMBApplication.followupsInPredictive) {
                                        endCallButtonLayout.setVisibility(View.GONE);
                                        statusGetInfoRelativeLayout.setVisibility(View.GONE);
                                        layout5.setVisibility(View.GONE);
                                        ServiceHandler.callDisconnected = true;
                                        ServiceHandler.processCompleted = true;
                                        SmarterSMBApplication.navigateToACP = true;
                                        Intent currentIntent = new Intent("android.intent.action.MAIN");
                                        currentIntent.setComponent(getIntent().getComponent());
                                        currentIntent.addCategory("android.intent.category.LAUNCHER");
                                        currentIntent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
                                        startActivity(currentIntent);
                                    } else {
                                        SmarterSMBApplication.endTheSession = true;
                                        navigateToUearnHome();
                                    }
                                } else {
                                    if (SmarterSMBApplication.outgoingCallNotInStartMode) {
                                        String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
                                        if (questionsAct != null && !questionsAct.isEmpty()) {
                                            callEndedFromDuringCall = true;
                                        }
                                        endCallButtonLayout.setVisibility(View.GONE);
                                        nextButtonClicked = false;
                                        if (!NotificationData.isSocketResponse) {
                                            callbacklayoutview.setEnabled(false);
                                        }
                                        if (getCustomInfoLayout != null)
                                            getCustomInfoLayout.setVisibility(View.GONE);
                                        killCall(this);
                                        if (questionsAct != null && !questionsAct.isEmpty()) {
                                            if (ServiceHandler.callDisconnected) {
                                                NotificationData.legAConnect = false;
                                                SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
                                                String dbId = sharedPref.getString("dbid", "0");
                                                if (!dbId.isEmpty()) {
                                                    dbid = Long.valueOf(dbId);
                                                    Intent intent = getIntent();
                                                    finish();
                                                    if (!SmarterSMBApplication.showSingleAcp) {
                                                        SmarterSMBApplication.showSingleAcp = true;
                                                        startActivity(intent);
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        ServiceHandler.callDisconnected = true;
                                        ServiceHandler.processCompleted = true;
                                        SmarterSMBApplication.navigateToACP = true;
                                        Intent intent = getIntent();
                                        goToHomeScreen();
                                        intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
                                        overridePendingTransition(0, 0);
                                        startActivity(intent);
                                        overridePendingTransition(0, 0);
                                    }
                                }
                            } else {
                                truePredictive = ApplicationSettings.getPref(AppConstants.TRUE_PREDICTIVE, false);
                                if (truePredictive) {
                                    navigateToUearnHome();
                                } else {
                                    this.finish();
                                }
                            }
                        } else {
                            ServiceHandler.callDisconnected = true;
                            ServiceHandler.processCompleted = true;
                            SmarterSMBApplication.navigateToACP = true;
                            Intent intent = getIntent();
                            goToHomeScreen();
                            intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
                            overridePendingTransition(0, 0);
                            startActivity(intent);
                            overridePendingTransition(0, 0);
                        }
                    }
                }
            }
        } else {
            if (NotificationData.dialledCustomerNumber != null && !NotificationData.dialledCustomerNumber.isEmpty()) {
                immediateQuestionnaireSubmit();
                connectedAndRNRScenarioSD();
            } else if (SmarterSMBApplication.outgoingCallNotInStartMode) {
                if (NotificationData.outboundDialledCustomerNumber != null && !NotificationData.outboundDialledCustomerNumber.isEmpty()) {
                    immediateQuestionnaireSubmit();
                    connectedAndRNRScenarioSD();
                } else {
                    connectedAndRNRScenarioSD();
                }
            } else {
                connectedAndRNRScenarioSD();
            }
        }
    }

    private void startTimer() {
        long duration = 0;

        if (!callEndDuration.isEmpty()) {
            if (callEndDuration != null && !callEndDuration.isEmpty()) {
                duration = Integer.parseInt(callEndDuration) * 1000;
                waitTimer = new CountDownTimer(duration, 1000) {
                    public void onTick(long millisUntilFinished) {

                    }

                    public void onFinish() {
                        if (waitTimer != null) {
                            waitTimer.cancel();
                            waitTimer = null;
                        }
                        SmarterSMBApplication.timerStarted = false;
                        ServiceHandler.incomingCallAnswered = false;
                    }
                }.start();
            }
        }
    }

    private void resetPreviousButtonSelection() {
        if (selectedButtonList != null && selectedButtonList.size() > 0) {
            Button button = (Button) findViewById(selectedButtonList.get(0));
            button.setBackground(getResources().getDrawable(R.drawable.call_flow_button));
            button.setTextColor(getResources().getColor(R.color.ques_text_color));
            selectedButtonList = new ArrayList<Integer>(1);
        }
    }

    private boolean checkValidation() {
        if (currentObject != null && !currentObject.isEmpty() && currentObject.equalsIgnoreCase("FT")) {
            String freeText = customerExperience.getText().toString();
            if (freeText == null || freeText.isEmpty() || isWhitespace(freeText)) {
                Toast.makeText(UearnActivity.this, "Mandatory field cannot be empty", Toast.LENGTH_SHORT).show();
                return false;
            }
        } else if (currentObject != null && !currentObject.isEmpty() && currentObject.equalsIgnoreCase("FN")) {
            String freeNum = freeNumber.getText().toString();
            if (freeNum == null || freeNum.isEmpty()) {
                Toast.makeText(UearnActivity.this, "Mandatory field cannot be empty", Toast.LENGTH_SHORT).show();
                return false;
            }
        } else if (currentObject != null && !currentObject.isEmpty() && currentObject.equalsIgnoreCase("YN")) {
            if (!yesnobuttonClicked) {
                Toast.makeText(UearnActivity.this, "Please select any one option", Toast.LENGTH_SHORT).show();
                return false;
            }
        } else if (currentObject != null && !currentObject.isEmpty() && currentObject.equalsIgnoreCase("CB")) {
            if (checkBoxScenario) {
                if (noOfCheckboxChecked < max_yes) {
                    Toast.makeText(UearnActivity.this, "Please choose any one option", Toast.LENGTH_SHORT).show();
                    return false;
                }
            }
        } else if (currentObject != null && !currentObject.isEmpty() && currentObject.equalsIgnoreCase("DD")) {
            if (!dropDownHasItem) {
                Toast.makeText(UearnActivity.this, "Please choose any one option", Toast.LENGTH_SHORT).show();
                return false;
            }
        } else if (currentObject != null && !currentObject.isEmpty() && currentObject.equalsIgnoreCase("SDD")) {
            if (searchableDropDownValueFromList == null || searchableDropDownValueFromList.isEmpty()) {
                Toast.makeText(UearnActivity.this, "Please choose any one option", Toast.LENGTH_SHORT).show();
                return false;
            }
        } else if (currentObject != null && !currentObject.isEmpty() && currentObject.equalsIgnoreCase("MSDD")) {
            if (multiSelectionDropDownValueFromList == null || multiSelectionDropDownValueFromList.isEmpty()) {
//                if(multiSelectionDropDownValueCaptured){
//                    multiSelectionDropDownValueCaptured = false;
//                    return true;
//                } else {
                Toast.makeText(UearnActivity.this, "Please choose any one option", Toast.LENGTH_SHORT).show();
                return false;
//                }
            }
        } else if (currentObject != null && !currentObject.isEmpty() && currentObject.equalsIgnoreCase("DATETIME")) {
            String dateText = questDate.getText().toString();
            String timeText = questTime.getText().toString();
            if (dateText != null && !dateText.isEmpty() && dateText.equals("Select Date")) {
                Toast.makeText(UearnActivity.this, "Mandatory field cannot be empty", Toast.LENGTH_SHORT).show();
                return false;
            }
            if (timeText != null && !timeText.isEmpty() && timeText.equals("Select Time")) {
                Toast.makeText(UearnActivity.this, "Mandatory field cannot be empty", Toast.LENGTH_SHORT).show();
                return false;
            }
        }
        return true;
    }

    public boolean isWhitespace(String str) {
        if (str == null) {
            return false;
        }
        int sz = str.length();
        for (int i = 0; i < sz; i++) {
            if ((Character.isWhitespace(str.charAt(i)) == false)) {
                return false;
            }
        }
        return true;
    }

    private void createCheckbox(String key, HashMap<String, Boolean> currentSelectedCheckboxHashMap) {

        checkBoxScenario = true;
        checkboxValues = new ArrayList<>();
        checkedDataHashMap = new HashMap<>();

        if (checkboxHash.containsKey(key)) {

            String checkboxData = checkboxHash.get(key).toString();
            if (checkboxData != null && !checkboxData.isEmpty()) {
                if (checkboxData.contains("[")) {
                    checkboxData = checkboxData.replace("[", "");
                }
                if (checkboxData.contains("]")) {
                    checkboxData = checkboxData.replace("]", "");
                }
            }
            String[] checkboxArray = checkboxData.split(",");
            for (int i = 0; i < checkboxArray.length; i++) {
                if (checkboxArray[i].contains("'")) {
                    checkboxArray[i] = checkboxArray[i].substring(1, checkboxArray[i].length() - 1);
                    if (checkboxArray[i].contains("'")) {
                        checkboxArray[i] = checkboxArray[i].substring(1, checkboxArray[i].length());
                    }
                    checkboxValues.add(checkboxArray[i]);
                    checkedDataHashMap.put(checkboxArray[i], false);
                }
            }
        }

        ListView listView = findViewById(R.id.llChb);
        listView.setOnTouchListener(new View.OnTouchListener() {
            // Setting on Touch Listener for handling the touch inside ScrollView
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                // Disallow the touch request for parent scroll on touch of child view
                v.getParent().requestDisallowInterceptTouchEvent(true);
                return false;
            }
        });
        CheckboxAdapter adapter = new CheckboxAdapter(this, R.layout.checkbox_list, checkboxValues, currentSelectedCheckboxHashMap);
        adapter.delegate = UearnActivity.this;
        listView.setAdapter(adapter);
    }

    private void decisionMakingNotMatchingScenario() {
        Set<Map.Entry<String, String>> questionAnswerHashEntrySet = questionAnswerHash.entrySet();
        ArrayList<Map.Entry<String, String>> questionAnswerHashArrayList = new ArrayList<Map.Entry<String, String>>(questionAnswerHashEntrySet);

        int questionAnswerHashPosition = -1;
        for (int i = 0; i < questionAnswerHashArrayList.size(); i++) {
            if (questionAnswerHashArrayList.get(i).getKey().equals(rootQ)) {
                questionAnswerHashPosition = i;
                break;
            }
        }

        ArrayList<Map.Entry<String, String>> questionAnswerHashSubArrayList = new ArrayList<Map.Entry<String, String>>(questionAnswerHashArrayList.subList(0, questionAnswerHashPosition));
        questionAnswerHash = new LinkedHashMap();
        if(questionAnswerHashSubArrayList != null && questionAnswerHashSubArrayList.size() > 0) {
            for (int k = 0; k < questionAnswerHashSubArrayList.size(); k++) {
                questionAnswerHash.put(questionAnswerHashSubArrayList.get(k).getKey(), questionAnswerHashSubArrayList.get(k).getValue());
            }
        }

        Set<Map.Entry<String, String>> tempQnAHashEntrySet= tempQnAHash.entrySet();
        ArrayList<Map.Entry<String, String>> tempQnAHashArrayList = new ArrayList<Map.Entry<String, String>>(tempQnAHashEntrySet);

        int tempQnAHashPosition = -1;
        for (int i = 0; i < tempQnAHashArrayList.size(); i++) {
            if (tempQnAHashArrayList.get(i).getKey().equals(rootQ)) {
                tempQnAHashPosition = i;
                break;
            }
        }

        ArrayList<Map.Entry<String, String>> tempQnAHashSubArrayList = new ArrayList<Map.Entry<String, String>>(tempQnAHashArrayList.subList(0, tempQnAHashPosition));
        tempQnAHash = new LinkedHashMap();
        tempQuesList = new ArrayList<>();
        if(tempQnAHashSubArrayList != null && tempQnAHashSubArrayList.size() > 0) {
            for (int k = 0; k < tempQnAHashSubArrayList.size(); k++) {
                tempQnAHash.put(tempQnAHashSubArrayList.get(k).getKey(), tempQnAHashSubArrayList.get(k).getValue());
                tempQuesList.add(k, tempQnAHashSubArrayList.get(k).getKey());
            }
        }

        resetAllUIComponents();

        if(tempQuesList != null && !tempQuesList.contains(rootQ)) {
            tempQuesList.add(tempQuesList.size(), rootQ);
        }
        tempQnAHash.put(rootQ, rootR);
        questionCount = 0;

        try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                String currentQues = String.valueOf(nestedQuesHash.get(rootQ));
                rootArrayData = new JSONArray(currentQues);
                questionCount = (int) indexQuesHash.get(rootQ);
            }
        } catch(Exception e){
           e.printStackTrace();
        }
    }

    private void nextButtonAction() {
        nextButtonClicked = true;
        previousButtonClicked = false;
        //followupTime.setText("Select Time");
        //followupDate.setText("Select Date");
        lastUpdateFromCustomerTv.setVisibility(View.GONE);
        rootA = "";
        if (mandatory != null && !mandatory.isEmpty() && mandatory.equalsIgnoreCase("y")) {
            if (!checkValidation()) {
                return;
            }
        }

        if (ApplicationSettings.containsPref(AppConstants.UPDATE_CUSTOM_KVS)) {
            boolean updateCustomKVS = ApplicationSettings.getPref(AppConstants.UPDATE_CUSTOM_KVS, false);
            if (updateCustomKVS) {
                updateCustomKVS();
            }
        }

        if(SmarterSMBApplication.isDecisionMakingQues){
            if(SmarterSMBApplication.currentSelectedValue != null && !SmarterSMBApplication.currentSelectedValue.isEmpty() && !SmarterSMBApplication.currentSelectedValue.equals("null")){
                if(currentObject != null && !currentObject.isEmpty() && currentObject.equals("DD")){
                    if(currentSelectedScenario != null && !currentSelectedScenario.isEmpty() && currentSelectedScenario.equalsIgnoreCase(SmarterSMBApplication.currentSelectedValue)){
                        rootArrayData = rootArrayDataOrg;
                    } else {
                        decisionMakingNotMatchingScenario();
                    }
                } else if(currentObject != null && !currentObject.isEmpty() && currentObject.equals("RB")){
                    if(currentSelectedRadioButton != null && !currentSelectedRadioButton.isEmpty() && currentSelectedRadioButton.equalsIgnoreCase(SmarterSMBApplication.currentSelectedValue)){
                        rootArrayData = rootArrayDataOrg;
                    } else {
                        decisionMakingNotMatchingScenario();
                    }
                }
            }
        }

        JSONObject jsonobject = null;
        runOnUiThread(new Runnable() {
            public void run() {
                updateHash();
            }
        });
        resetYesNoButton();

        if(next_action != null && !next_action.isEmpty()){

            if(next_action.startsWith("http")){

            } else {
                next_action = Urls.SERVER_ADDRESS + next_action;
            }
            sendInCallActivityToServer(next_action);
        }

        if (checkBoxScenario) {
            if (noOfCheckboxChecked < max_yes) {
                thankYouLayout();
                return;
            }

            if (cb_action != null && !cb_action.isEmpty()) {
                if (currentSelectedCheckBoxValue != null && !currentSelectedCheckBoxValue.isEmpty() && currentSelectedCheckBoxValue.equalsIgnoreCase("Online")) {
                    JSONObject jsonObj = null;
                    try {
                        jsonObj = new JSONObject(cb_action);
                        processNextAction(jsonObj);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    noOfCheckboxChecked = 0;
                    checkBoxScenario = false;
                    return;
                }
            }

            if (max_yes_action != null && !max_yes_action.isEmpty()) {
                if (noneOfTheAboveChecked == 0) {
                    JSONObject jsonObj = null;
                    try {
                        jsonObj = new JSONObject(max_yes_action);
                        processNextAction(jsonObj);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    noOfCheckboxChecked = 0;
                    checkBoxScenario = false;
                    return;
                } else {
                    thankYouLayout();
                    noOfCheckboxChecked = 0;
                    noneOfTheAboveChecked = 0;
                    checkBoxScenario = false;
                }
                return;
            }
        }

        if (currentSelectedScenario != null && !currentSelectedScenario.isEmpty()) {
            try {
                if (rootArrayData != null) {
                    currentQuestionnaire = rootArrayData.toString();
                    nestedQuesHash.put(rootQ, rootArrayData.toString());
                    indexQuesHash.put(rootQ, questionCount);
                    jsonobject = rootArrayData.getJSONObject(questionCount);

                    if (jsonobject.has(currentSelectedScenario)) {
                        rootArrayData = jsonobject.getJSONArray(currentSelectedScenario);
//                        currentQuestionnaire = jsonobject.toString();
                        if(decisionArrayList != null && !decisionArrayList.contains(currentQuestionnaire)) {
                            decisionArrayList.add(currentQuestionnaire);
                        }
                        questionCount = 0;
                        if (rootArrayData.length() != questionCount) {
                            jsonobject = rootArrayData.getJSONObject(questionCount);
                            if (jsonobject != null) {
                                if (jsonobject.has("q")) {
                                    rootQ = jsonobject.getString("q");
                                }
                                if (jsonobject.has("at")) {
                                    rootR = jsonobject.getString("at");
                                    currentObject = rootR;
                                }

                                if (jsonobject.has("a")) {
                                    rootA = jsonobject.getString("a");
                                }

                                if (jsonobject.has("last-updated")) {
                                    rootLastUpdate = jsonobject.getString("last-updated");
                                }

                                if (jsonobject.has("value")) {
                                    rootValue = jsonobject.getString("value");
                                }

                                if (jsonobject.has("mandatory")) {
                                    mandatory = jsonobject.getString("mandatory");
                                    if (mandatory != null && !mandatory.isEmpty() && mandatory.equalsIgnoreCase("y")) {
                                        SmarterSMBApplication.isCurrentQuesMandatory = true;
                                    } else {
                                        SmarterSMBApplication.isCurrentQuesMandatory = false;
                                    }
                                } else {
                                    SmarterSMBApplication.isCurrentQuesMandatory = false;
                                }

                                if (jsonobject.has("decision")) {
                                    decision = jsonobject.getString("decision");
                                    if (decision != null && !decision.isEmpty() && decision.equalsIgnoreCase("y")) {
                                        SmarterSMBApplication.isDecisionMakingQues = true;
                                        String currentSelectedVal = String.valueOf(questionAnswerHash.get(rootQ));
                                        if(currentSelectedVal != null && !currentSelectedVal.isEmpty()){
                                            SmarterSMBApplication.currentSelectedValue = currentSelectedVal;
                                        }
                                    } else {
                                        SmarterSMBApplication.isDecisionMakingQues = false;
                                    }
                                } else {
                                    SmarterSMBApplication.isDecisionMakingQues = false;
                                }

                                if (jsonobject.has("action_type")) {
                                    actionType = jsonobject.getString("action_type");
                                    actionTypeHash.put(rootQ, actionType);
                                }

                                if (jsonobject.has("title")) {
                                    titleText = jsonobject.getString("title");
                                }

                                if (jsonobject.has("hint")) {
                                    hintText = jsonobject.getString("hint");
                                }
                                if (jsonobject.has("dd_data")) {
                                    dropDownData = jsonobject.getString("dd_data");
                                    if (dropDownData != null && dropDownData.length() > 0) {
                                        dropDownHash.put(rootQ, dropDownData);
                                    }
                                }

                                if (jsonobject.has("sdd_data")) {
                                    searchableDropDownData = jsonobject.getString("sdd_data");
                                    if (searchableDropDownData != null && searchableDropDownData.length() > 0) {
                                        searchableDropDownHash.put(rootQ, searchableDropDownData);
                                    }
                                }
                                if (jsonobject.has("msdd_data")) {
                                    multiSelectionDropDownData = jsonobject.getString("msdd_data");
                                    if (multiSelectionDropDownData != null && multiSelectionDropDownData.length() > 0) {
                                        multiSelectionDropDownHash.put(rootQ, multiSelectionDropDownData);
                                    }
                                }

                                if (jsonobject.has("cb_data")) {
                                    checkboxData = jsonobject.getString("cb_data");
                                    if (checkboxData != null && checkboxData.length() > 0) {
                                        checkboxHash = new LinkedHashMap();
                                        checkboxHash.put(rootQ, checkboxData);
                                    }
                                }

                                if (jsonobject.has("bt_data")) {
                                    buttonData = jsonobject.getString("bt_data");
                                    if (buttonData != null && buttonData.length() > 0) {
                                        buttonHash.put(rootQ, buttonData);
                                    }
                                }

                                if (jsonobject.has("rb_data")) {
                                    radiobuttonData = jsonobject.getString("rb_data");
                                    if (radiobuttonData != null && radiobuttonData.length() > 0) {
                                        radiobuttonHash.put(rootQ, radiobuttonData);
                                    }
                                }

                                if (jsonobject.has("status")) {
                                    status = jsonobject.getString("status");
                                    mmtStatus = status;
                                    ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                                }

                                if (jsonobject.has("min_value")) {
                                    min = Integer.parseInt(jsonobject.getString("min_value"));
                                }
                                if (jsonobject.has("max_value")) {
                                    max = Integer.parseInt(jsonobject.getString("max_value"));
                                }

                                if (jsonobject.has("max_yes")) {
                                    max_yes = Integer.parseInt(jsonobject.getString("max_yes"));
                                }

                                if (jsonobject.has("max_yes_action")) {
                                    max_yes_action = jsonobject.getString("max_yes_action");
                                }

                                if (jsonobject.has("cb_action")) {
                                    cb_action = jsonobject.getString("cb_action");
                                }

                                if (jsonobject.has("next_action")) {
                                    JSONObject nextActionObj = jsonobject.getJSONObject("next_action");
                                    if(nextActionObj != null &&  nextActionObj.has("post_url")){
                                        next_action = String.valueOf(nextActionObj.get("post_url"));
                                    }
                                } else {
                                    next_action = "";
                                }
                            }
                            questionnaireHash.put(rootQ, rootR);
                            if(tempQuesList != null && !tempQuesList.contains(rootQ)) {
                                tempQuesList.add(questionCount, rootQ);
                            }
                            tempQnAHash.put(rootQ, rootR);
                            if (titleText != null && !titleText.isEmpty()) {
                                titleQHash.put(rootQ, titleText);
                            }

                            if (rootR.equalsIgnoreCase("RT")) {
                                ratingsLayout();
                            } else if (rootR.equalsIgnoreCase("FT") || rootR.equalsIgnoreCase("EMAIL") || rootR.equalsIgnoreCase("BLANK")) {
                                freeTextLayout();
                                if(rootR.equalsIgnoreCase("FT")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "FT");
                                } else if(rootR.equalsIgnoreCase("EMAIL")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "EMAIL");
                                } else if(rootR.equalsIgnoreCase("BLANK")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "BLANK");
                                }
                            } else if (rootR.equalsIgnoreCase("CALLPM")){
                                callManagerLayout();
                            } else if (rootR.equalsIgnoreCase("DD")) {
                                dropDownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "DD");
                            } else if (rootR != null && rootR.equalsIgnoreCase("CB")) {
                                checkBoxLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "CB");
                            } else if (rootR.equalsIgnoreCase("BT")) {
                                buttonLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "BT");
                            } else if (rootR.equalsIgnoreCase("RB")) {
                                radiobuttonLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "RB");
                            } else if (rootR.equalsIgnoreCase("NP")) {
                                numberpickerLayout();
                            } else if (rootR.equalsIgnoreCase("YN")) {
                                yesNoLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "YN");
                            } else if (rootR.equalsIgnoreCase("DATETIME") || rootR.equalsIgnoreCase("DATE")) {
                                dateTimeLayout();
                            } else if (rootR.equalsIgnoreCase("FLP")) {
                                followUpLayout();
                            } else if (rootR.equalsIgnoreCase("FN") || rootR.equalsIgnoreCase("SMS")) {
                                freeNumberLayout();
                                if(rootR.equalsIgnoreCase("FN")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "FN");
                                } else if(rootR.equalsIgnoreCase("SMS")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "SMS");
                                }
                            } else if (rootR.equalsIgnoreCase("SDD")) {
                                searchableDropdownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "SDD");
                            } else if (rootR.equalsIgnoreCase("MSDD")) {
                                multiSelectionDropdownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "MSDD");
                            } else if (rootR.equalsIgnoreCase("ATTACHMENT")) {
                                attachmentLayout();
                            }
                        } else {
                            thankYouLayout();
                        }
                    } else {
                        questionCount++;
                        if (rootArrayData.length() != questionCount) {
                            jsonobject = rootArrayData.getJSONObject(questionCount);
                            currentQuestionnaire = rootArrayData.toString();

                            if (jsonobject != null) {
                                if (jsonobject.has("q")) {
                                    rootQ = jsonobject.getString("q");
                                    nestedQuesHash.put(rootQ, rootArrayData.toString());
                                    indexQuesHash.put(rootQ, questionCount);
                                }
                                if (jsonobject.has("at")) {
                                    rootR = jsonobject.getString("at");
                                    currentObject = rootR;
                                }

                                if (jsonobject.has("a")) {
                                    rootA = jsonobject.getString("a");
                                }

                                if (jsonobject.has("last-updated")) {
                                    rootLastUpdate = jsonobject.getString("last-updated");
                                }

                                if (jsonobject.has("value")) {
                                    rootValue = jsonobject.getString("value");
                                }

                                if (jsonobject.has("mandatory")) {
                                    mandatory = jsonobject.getString("mandatory");
                                    if (mandatory != null && !mandatory.isEmpty() && mandatory.equalsIgnoreCase("y")) {
                                        SmarterSMBApplication.isCurrentQuesMandatory = true;
                                    } else {
                                        SmarterSMBApplication.isCurrentQuesMandatory = false;
                                    }
                                } else {
                                    SmarterSMBApplication.isCurrentQuesMandatory = false;
                                }

                                if (jsonobject.has("decision")) {
                                    decision = jsonobject.getString("decision");
                                    if (decision != null && !decision.isEmpty() && decision.equalsIgnoreCase("y")) {
                                        SmarterSMBApplication.isDecisionMakingQues = true;
                                        String currentSelectedVal = String.valueOf(questionAnswerHash.get(rootQ));
                                        if(currentSelectedVal != null && !currentSelectedVal.isEmpty()){
                                            SmarterSMBApplication.currentSelectedValue = currentSelectedVal;
                                        }
                                    } else {
                                        SmarterSMBApplication.isDecisionMakingQues = false;
                                    }
                                } else {
                                    SmarterSMBApplication.isDecisionMakingQues = false;
                                }

                                if (jsonobject.has("action_type")) {
                                    actionType = jsonobject.getString("action_type");
                                    actionTypeHash.put(rootQ, actionType);
                                }

                                if (jsonobject.has("title")) {
                                    titleText = jsonobject.getString("title");
                                }

                                if (jsonobject.has("hint")) {
                                    hintText = jsonobject.getString("hint");
                                }
                                if (jsonobject.has("dd_data")) {
                                    dropDownData = jsonobject.getString("dd_data");
                                    if (dropDownData != null && dropDownData.length() > 0) {
                                        dropDownHash.put(rootQ, dropDownData);
                                    }
                                }

                                if (jsonobject.has("sdd_data")) {
                                    searchableDropDownData = jsonobject.getString("sdd_data");
                                    if (searchableDropDownData != null && searchableDropDownData.length() > 0) {
                                        searchableDropDownHash.put(rootQ, searchableDropDownData);
                                    }
                                }
                                if (jsonobject.has("msdd_data")) {
                                    multiSelectionDropDownData = jsonobject.getString("msdd_data");
                                    if (multiSelectionDropDownData != null && multiSelectionDropDownData.length() > 0) {
                                        multiSelectionDropDownHash.put(rootQ, multiSelectionDropDownData);
                                    }
                                }

                                if (jsonobject.has("cb_data")) {
                                    checkboxData = jsonobject.getString("cb_data");
                                    if (checkboxData != null && checkboxData.length() > 0) {
                                        checkboxHash = new LinkedHashMap();
                                        checkboxHash.put(rootQ, checkboxData);
                                    }
                                }

                                if (jsonobject.has("bt_data")) {
                                    buttonData = jsonobject.getString("bt_data");
                                    if (buttonData != null && buttonData.length() > 0) {
                                        buttonHash.put(rootQ, buttonData);
                                    }
                                }

                                if (jsonobject.has("rb_data")) {
                                    radiobuttonData = jsonobject.getString("rb_data");
                                    if (radiobuttonData != null && radiobuttonData.length() > 0) {
                                        radiobuttonHash.put(rootQ, radiobuttonData);
                                    }
                                }

                                if (jsonobject.has("status")) {
                                    status = jsonobject.getString("status");
                                    mmtStatus = status;
                                    ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                                }

                                if (jsonobject.has("min_value")) {
                                    min = Integer.parseInt(jsonobject.getString("min_value"));
                                }
                                if (jsonobject.has("max_value")) {
                                    max = Integer.parseInt(jsonobject.getString("max_value"));
                                }

                                if (jsonobject.has("max_yes")) {
                                    max_yes = Integer.parseInt(jsonobject.getString("max_yes"));
                                }

                                if (jsonobject.has("max_yes_action")) {
                                    max_yes_action = jsonobject.getString("max_yes_action");
                                }

                                if (jsonobject.has("cb_action")) {
                                    cb_action = jsonobject.getString("cb_action");
                                }

                                if (jsonobject.has("next_action")) {
                                    JSONObject nextActionObj = jsonobject.getJSONObject("next_action");
                                    if(nextActionObj != null &&  nextActionObj.has("post_url")){
                                        next_action = String.valueOf(nextActionObj.get("post_url"));
                                    }
                                } else {
                                    next_action = "";
                                }
                            }
                            questionnaireHash.put(rootQ, rootR);
                            if(tempQuesList != null && !tempQuesList.contains(rootQ)) {
                                tempQuesList.add(questionCount, rootQ);
                            }
                            tempQnAHash.put(rootQ, rootR);
                            if (titleText != null && !titleText.isEmpty()) {
                                titleQHash.put(rootQ, titleText);
                            }

                            if (rootR.equalsIgnoreCase("RT")) {
                                ratingsLayout();
                            } else if (rootR.equalsIgnoreCase("FT") || rootR.equalsIgnoreCase("EMAIL") || rootR.equalsIgnoreCase("BLANK")) {
                                freeTextLayout();
                                if(rootR.equalsIgnoreCase("FT")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "FT");
                                } else if(rootR.equalsIgnoreCase("EMAIL")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "EMAIL");
                                } else if(rootR.equalsIgnoreCase("BLANK")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "BLANK");
                                }
                            } else if (rootR.equalsIgnoreCase("CALLPM")){
                                callManagerLayout();
                            } else if (rootR.equalsIgnoreCase("DD")) {
                                dropDownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "DD");
                            } else if (rootR != null && rootR.equalsIgnoreCase("CB")) {
                                checkBoxLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "CB");
                            } else if (rootR.equalsIgnoreCase("BT")) {
                                buttonLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "BT");
                            } else if (rootR.equalsIgnoreCase("RB")) {
                                radiobuttonLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "RB");
                            } else if (rootR.equalsIgnoreCase("NP")) {
                                numberpickerLayout();
                            } else if (rootR.equalsIgnoreCase("YN")) {
                                yesNoLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "YN");
                            } else if (rootR.equalsIgnoreCase("DATETIME") || rootR.equalsIgnoreCase("DATE")) {
                                dateTimeLayout();
                            } else if (rootR.equalsIgnoreCase("FLP")) {
                                followUpLayout();
                            } else if (rootR.equalsIgnoreCase("FN") || rootR.equalsIgnoreCase("SMS")) {
                                freeNumberLayout();
                                if(rootR.equalsIgnoreCase("FN")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "FN");
                                } else if(rootR.equalsIgnoreCase("SMS")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "SMS");
                                }
                            } else if (rootR.equalsIgnoreCase("SDD")) {
                                searchableDropdownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "SDD");
                            } else if (rootR.equalsIgnoreCase("MSDD")) {
                                multiSelectionDropdownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "MSDD");
                            } else if (rootR.equalsIgnoreCase("ATTACHMENT")) {
                                attachmentLayout();
                            }
                        } else {
                            thankYouLayout();
                        }
                    }
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
            if(previousButtonClicked) {

            } else {
                currentSelectedScenario = "";
            }
        } else if (currentSelectedButton != null && !currentSelectedButton.isEmpty()) {
            try {
                if (rootArrayData != null) {
                    currentQuestionnaire = rootArrayData.toString();
                    nestedQuesHash.put(rootQ, rootArrayData.toString());
                    indexQuesHash.put(rootQ, questionCount);
                    jsonobject = rootArrayData.getJSONObject(questionCount);

                    if (jsonobject.has(currentSelectedButton)) {
                        rootArrayData = jsonobject.getJSONArray(currentSelectedButton);
//                        currentQuestionnaire = jsonobject.toString();
                        if(decisionArrayList != null && !decisionArrayList.contains(currentQuestionnaire)) {
                            decisionArrayList.add(currentQuestionnaire);
                        }
                        questionCount = 0;
                        if (rootArrayData.length() != questionCount) {
                            jsonobject = rootArrayData.getJSONObject(questionCount);

                            if (jsonobject != null) {
                                if (jsonobject.has("q")) {
                                    rootQ = jsonobject.getString("q");
                                }
                                if (jsonobject.has("at")) {
                                    rootR = jsonobject.getString("at");
                                    currentObject = rootR;
                                }

                                if (jsonobject.has("a")) {
                                    rootA = jsonobject.getString("a");
                                }

                                if (jsonobject.has("last-updated")) {
                                    rootLastUpdate = jsonobject.getString("last-updated");
                                }

                                if (jsonobject.has("value")) {
                                    rootValue = jsonobject.getString("value");
                                }

                                if (jsonobject.has("mandatory")) {
                                    mandatory = jsonobject.getString("mandatory");
                                    if (mandatory != null && !mandatory.isEmpty() && mandatory.equalsIgnoreCase("y")) {
                                        SmarterSMBApplication.isCurrentQuesMandatory = true;
                                    } else {
                                        SmarterSMBApplication.isCurrentQuesMandatory = false;
                                    }
                                } else {
                                    SmarterSMBApplication.isCurrentQuesMandatory = false;
                                }

                                if (jsonobject.has("decision")) {
                                    decision = jsonobject.getString("decision");
                                    if (decision != null && !decision.isEmpty() && decision.equalsIgnoreCase("y")) {
                                        SmarterSMBApplication.isDecisionMakingQues = true;
                                        String currentSelectedVal = String.valueOf(questionAnswerHash.get(rootQ));
                                        if(currentSelectedVal != null && !currentSelectedVal.isEmpty()){
                                            SmarterSMBApplication.currentSelectedValue = currentSelectedVal;
                                        }
                                    } else {
                                        SmarterSMBApplication.isDecisionMakingQues = false;
                                    }
                                } else {
                                    SmarterSMBApplication.isDecisionMakingQues = false;
                                }

                                if (jsonobject.has("action_type")) {
                                    actionType = jsonobject.getString("action_type");
                                    actionTypeHash.put(rootQ, actionType);
                                }

                                if (jsonobject.has("title")) {
                                    titleText = jsonobject.getString("title");
                                }

                                if (jsonobject.has("hint")) {
                                    hintText = jsonobject.getString("hint");
                                }
                                if (jsonobject.has("dd_data")) {
                                    dropDownData = jsonobject.getString("dd_data");
                                    if (dropDownData != null && dropDownData.length() > 0) {
                                        dropDownHash.put(rootQ, dropDownData);
                                    }
                                }

                                if (jsonobject.has("sdd_data")) {
                                    searchableDropDownData = jsonobject.getString("sdd_data");
                                    if (searchableDropDownData != null && searchableDropDownData.length() > 0) {
                                        searchableDropDownHash.put(rootQ, searchableDropDownData);
                                    }
                                }
                                if (jsonobject.has("msdd_data")) {
                                    multiSelectionDropDownData = jsonobject.getString("msdd_data");
                                    if (multiSelectionDropDownData != null && multiSelectionDropDownData.length() > 0) {
                                        multiSelectionDropDownHash.put(rootQ, multiSelectionDropDownData);
                                    }
                                }

                                if (jsonobject.has("cb_data")) {
                                    checkboxData = jsonobject.getString("cb_data");
                                    if (checkboxData != null && checkboxData.length() > 0) {
                                        checkboxHash = new LinkedHashMap();
                                        checkboxHash.put(rootQ, checkboxData);
                                    }
                                }

                                if (jsonobject.has("bt_data")) {
                                    buttonData = jsonobject.getString("bt_data");
                                    if (buttonData != null && buttonData.length() > 0) {
                                        buttonHash.put(rootQ, buttonData);
                                    }
                                }

                                if (jsonobject.has("rb_data")) {
                                    radiobuttonData = jsonobject.getString("rb_data");
                                    if (radiobuttonData != null && radiobuttonData.length() > 0) {
                                        radiobuttonHash.put(rootQ, radiobuttonData);
                                    }
                                }

                                if (jsonobject.has("status")) {
                                    status = jsonobject.getString("status");
                                    mmtStatus = status;
                                    ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                                }

                                if (jsonobject.has("min_value")) {
                                    min = Integer.parseInt(jsonobject.getString("min_value"));
                                }
                                if (jsonobject.has("max_value")) {
                                    max = Integer.parseInt(jsonobject.getString("max_value"));
                                }

                                if (jsonobject.has("max_yes")) {
                                    max_yes = Integer.parseInt(jsonobject.getString("max_yes"));
                                }

                                if (jsonobject.has("max_yes_action")) {
                                    max_yes_action = jsonobject.getString("max_yes_action");
                                }

                                if (jsonobject.has("cb_action")) {
                                    cb_action = jsonobject.getString("cb_action");
                                }

                                if (jsonobject.has("next_action")) {
                                    JSONObject nextActionObj = jsonobject.getJSONObject("next_action");
                                    if(nextActionObj != null &&  nextActionObj.has("post_url")){
                                        next_action = String.valueOf(nextActionObj.get("post_url"));
                                    }
                                } else {
                                    next_action = "";
                                }
                            }
                            questionnaireHash.put(rootQ, rootR);
                            if(tempQuesList != null && !tempQuesList.contains(rootQ)) {
                                tempQuesList.add(questionCount, rootQ);
                            }
                            tempQnAHash.put(rootQ, rootR);
                            if (titleText != null && !titleText.isEmpty()) {
                                titleQHash.put(rootQ, titleText);
                            }

                            if (rootR.equalsIgnoreCase("RT")) {
                                ratingsLayout();
                            } else if (rootR.equalsIgnoreCase("FT") || rootR.equalsIgnoreCase("EMAIL") || rootR.equalsIgnoreCase("BLANK")) {
                                freeTextLayout();
                                if(rootR.equalsIgnoreCase("FT")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "FT");
                                } else if(rootR.equalsIgnoreCase("EMAIL")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "EMAIL");
                                } else if(rootR.equalsIgnoreCase("BLANK")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "BLANK");
                                }
                            } else if (rootR.equalsIgnoreCase("CALLPM")){
                                callManagerLayout();
                            } else if (rootR.equalsIgnoreCase("DD")) {
                                dropDownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "DD");
                            } else if (rootR != null && rootR.equalsIgnoreCase("CB")) {
                                checkBoxLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "CB");
                            } else if (rootR.equalsIgnoreCase("BT")) {
                                buttonLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "BT");
                            } else if (rootR.equalsIgnoreCase("RB")) {
                                radiobuttonLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "RB");
                            } else if (rootR.equalsIgnoreCase("NP")) {
                                numberpickerLayout();
                            } else if (rootR.equalsIgnoreCase("YN")) {
                                yesNoLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "YN");
                            } else if (rootR.equalsIgnoreCase("DATETIME") || rootR.equalsIgnoreCase("DATE")) {
                                dateTimeLayout();
                            } else if (rootR.equalsIgnoreCase("FLP")) {
                                followUpLayout();
                            } else if (rootR.equalsIgnoreCase("FN") || rootR.equalsIgnoreCase("SMS")) {
                                freeNumberLayout();
                                if(rootR.equalsIgnoreCase("FN")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "FN");
                                } else if(rootR.equalsIgnoreCase("SMS")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "SMS");
                                }
                            } else if (rootR.equalsIgnoreCase("SDD")) {
                                searchableDropdownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "SDD");
                            } else if (rootR.equalsIgnoreCase("MSDD")) {
                                multiSelectionDropdownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "MSDD");
                            } else if (rootR.equalsIgnoreCase("ATTACHMENT")) {
                                attachmentLayout();
                            }
                        } else {
                            thankYouLayout();
                        }
                    } else {
                        questionCount++;
                        if (rootArrayData.length() != questionCount) {
                            jsonobject = rootArrayData.getJSONObject(questionCount);
                            currentQuestionnaire = rootArrayData.toString();

                            if (jsonobject != null) {
                                if (jsonobject.has("q")) {
                                    rootQ = jsonobject.getString("q");
                                    nestedQuesHash.put(rootQ, rootArrayData.toString());
                                    indexQuesHash.put(rootQ, questionCount);
                                }
                                if (jsonobject.has("at")) {
                                    rootR = jsonobject.getString("at");
                                    currentObject = rootR;
                                }

                                if (jsonobject.has("a")) {
                                    rootA = jsonobject.getString("a");
                                }

                                if (jsonobject.has("last-updated")) {
                                    rootLastUpdate = jsonobject.getString("last-updated");
                                }

                                if (jsonobject.has("value")) {
                                    rootValue = jsonobject.getString("value");
                                }

                                if (jsonobject.has("mandatory")) {
                                    mandatory = jsonobject.getString("mandatory");
                                    if (mandatory != null && !mandatory.isEmpty() && mandatory.equalsIgnoreCase("y")) {
                                        SmarterSMBApplication.isCurrentQuesMandatory = true;
                                    } else {
                                        SmarterSMBApplication.isCurrentQuesMandatory = false;
                                    }
                                } else {
                                    SmarterSMBApplication.isCurrentQuesMandatory = false;
                                }

                                if (jsonobject.has("decision")) {
                                    decision = jsonobject.getString("decision");
                                    if (decision != null && !decision.isEmpty() && decision.equalsIgnoreCase("y")) {
                                        SmarterSMBApplication.isDecisionMakingQues = true;
                                        String currentSelectedVal = String.valueOf(questionAnswerHash.get(rootQ));
                                        if(currentSelectedVal != null && !currentSelectedVal.isEmpty()){
                                            SmarterSMBApplication.currentSelectedValue = currentSelectedVal;
                                        }
                                    } else {
                                        SmarterSMBApplication.isDecisionMakingQues = false;
                                    }
                                } else {
                                    SmarterSMBApplication.isDecisionMakingQues = false;
                                }

                                if (jsonobject.has("action_type")) {
                                    actionType = jsonobject.getString("action_type");
                                    actionTypeHash.put(rootQ, actionType);
                                }

                                if (jsonobject.has("title")) {
                                    titleText = jsonobject.getString("title");
                                }

                                if (jsonobject.has("hint")) {
                                    hintText = jsonobject.getString("hint");
                                }
                                if (jsonobject.has("dd_data")) {
                                    dropDownData = jsonobject.getString("dd_data");
                                    if (dropDownData != null && dropDownData.length() > 0) {
                                        dropDownHash.put(rootQ, dropDownData);
                                    }
                                }

                                if (jsonobject.has("sdd_data")) {
                                    searchableDropDownData = jsonobject.getString("sdd_data");
                                    if (searchableDropDownData != null && searchableDropDownData.length() > 0) {
                                        searchableDropDownHash.put(rootQ, searchableDropDownData);
                                    }
                                }
                                if (jsonobject.has("msdd_data")) {
                                    multiSelectionDropDownData = jsonobject.getString("msdd_data");
                                    if (multiSelectionDropDownData != null && multiSelectionDropDownData.length() > 0) {
                                        multiSelectionDropDownHash.put(rootQ, multiSelectionDropDownData);
                                    }
                                }

                                if (jsonobject.has("cb_data")) {
                                    checkboxData = jsonobject.getString("cb_data");
                                    if (checkboxData != null && checkboxData.length() > 0) {
                                        checkboxHash = new LinkedHashMap();
                                        checkboxHash.put(rootQ, checkboxData);
                                    }
                                }

                                if (jsonobject.has("bt_data")) {
                                    buttonData = jsonobject.getString("bt_data");
                                    if (buttonData != null && buttonData.length() > 0) {
                                        buttonHash.put(rootQ, buttonData);
                                    }
                                }

                                if (jsonobject.has("rb_data")) {
                                    radiobuttonData = jsonobject.getString("rb_data");
                                    if (radiobuttonData != null && radiobuttonData.length() > 0) {
                                        radiobuttonHash.put(rootQ, radiobuttonData);
                                    }
                                }

                                if (jsonobject.has("status")) {
                                    status = jsonobject.getString("status");
                                    mmtStatus = status;
                                    ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                                }

                                if (jsonobject.has("min_value")) {
                                    min = Integer.parseInt(jsonobject.getString("min_value"));
                                }
                                if (jsonobject.has("max_value")) {
                                    max = Integer.parseInt(jsonobject.getString("max_value"));
                                }

                                if (jsonobject.has("max_yes")) {
                                    max_yes = Integer.parseInt(jsonobject.getString("max_yes"));
                                }

                                if (jsonobject.has("max_yes_action")) {
                                    max_yes_action = jsonobject.getString("max_yes_action");
                                }

                                if (jsonobject.has("cb_action")) {
                                    cb_action = jsonobject.getString("cb_action");
                                }

                                if (jsonobject.has("next_action")) {
                                    JSONObject nextActionObj = jsonobject.getJSONObject("next_action");
                                    if(nextActionObj != null &&  nextActionObj.has("post_url")){
                                        next_action = String.valueOf(nextActionObj.get("post_url"));
                                    }
                                } else {
                                    next_action = "";
                                }
                            }
                            questionnaireHash.put(rootQ, rootR);
                            if(tempQuesList != null && !tempQuesList.contains(rootQ)) {
                                tempQuesList.add(questionCount, rootQ);
                            }
                            tempQnAHash.put(rootQ, rootR);
                            if (titleText != null && !titleText.isEmpty()) {
                                titleQHash.put(rootQ, titleText);
                            }

                            if (rootR.equalsIgnoreCase("RT")) {
                                ratingsLayout();
                            } else if (rootR.equalsIgnoreCase("FT") || rootR.equalsIgnoreCase("EMAIL") || rootR.equalsIgnoreCase("BLANK")) {
                                freeTextLayout();
                                if(rootR.equalsIgnoreCase("FT")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "FT");
                                } else if(rootR.equalsIgnoreCase("EMAIL")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "EMAIL");
                                } else if(rootR.equalsIgnoreCase("BLANK")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "BLANK");
                                }
                            } else if (rootR.equalsIgnoreCase("CALLPM")){
                                callManagerLayout();
                            } else if (rootR.equalsIgnoreCase("DD")) {
                                dropDownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "DD");
                            } else if (rootR != null && rootR.equalsIgnoreCase("CB")) {
                                checkBoxLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "CB");
                            } else if (rootR.equalsIgnoreCase("BT")) {
                                buttonLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "BT");
                            } else if (rootR.equalsIgnoreCase("RB")) {
                                radiobuttonLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "RB");
                            } else if (rootR.equalsIgnoreCase("NP")) {
                                numberpickerLayout();
                            } else if (rootR.equalsIgnoreCase("YN")) {
                                yesNoLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "YN");
                            } else if (rootR.equalsIgnoreCase("DATETIME") || rootR.equalsIgnoreCase("DATE")) {
                                dateTimeLayout();
                            } else if (rootR.equalsIgnoreCase("FLP")) {
                                followUpLayout();
                            } else if (rootR.equalsIgnoreCase("FN") || rootR.equalsIgnoreCase("SMS")) {
                                freeNumberLayout();
                                if(rootR.equalsIgnoreCase("FN")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "FN");
                                } else if(rootR.equalsIgnoreCase("SMS")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "SMS");
                                }
                            } else if (rootR.equalsIgnoreCase("SDD")) {
                                searchableDropdownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "SDD");
                            } else if (rootR.equalsIgnoreCase("MSDD")) {
                                multiSelectionDropdownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "MSDD");
                            } else if (rootR.equalsIgnoreCase("ATTACHMENT")) {
                                attachmentLayout();
                            }
                        } else {
                            thankYouLayout();
                        }
                    }
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
            if(previousButtonClicked) {

            } else {
                currentSelectedButton = "";
            }
        } else if (currentSelectedRadioButton != null && !currentSelectedRadioButton.isEmpty()) {
            try {
                if (rootArrayData != null) {
                    currentQuestionnaire = rootArrayData.toString();
                    nestedQuesHash.put(rootQ, rootArrayData.toString());
                    indexQuesHash.put(rootQ, questionCount);
                    jsonobject = rootArrayData.getJSONObject(questionCount);

                    if (jsonobject.has(currentSelectedRadioButton)) {
                        rootArrayData = jsonobject.getJSONArray(currentSelectedRadioButton);
//                        currentQuestionnaire = jsonobject.toString();
                        if(decisionArrayList != null && !decisionArrayList.contains(currentQuestionnaire)) {
                            decisionArrayList.add(currentQuestionnaire);
                        }
                        questionCount = 0;
                        if (rootArrayData.length() != questionCount) {
                            jsonobject = rootArrayData.getJSONObject(questionCount);

                            if (jsonobject != null) {
                                if (jsonobject.has("q")) {
                                    rootQ = jsonobject.getString("q");
                                }
                                if (jsonobject.has("at")) {
                                    rootR = jsonobject.getString("at");
                                    currentObject = rootR;
                                }

                                if (jsonobject.has("a")) {
                                    rootA = jsonobject.getString("a");
                                }

                                if (jsonobject.has("last-updated")) {
                                    rootLastUpdate = jsonobject.getString("last-updated");
                                }

                                if (jsonobject.has("value")) {
                                    rootValue = jsonobject.getString("value");
                                }

                                if (jsonobject.has("mandatory")) {
                                    mandatory = jsonobject.getString("mandatory");
                                    if (mandatory != null && !mandatory.isEmpty() && mandatory.equalsIgnoreCase("y")) {
                                        SmarterSMBApplication.isCurrentQuesMandatory = true;
                                    } else {
                                        SmarterSMBApplication.isCurrentQuesMandatory = false;
                                    }
                                } else {
                                    SmarterSMBApplication.isCurrentQuesMandatory = false;
                                }

                                if (jsonobject.has("decision")) {
                                    decision = jsonobject.getString("decision");
                                    if (decision != null && !decision.isEmpty() && decision.equalsIgnoreCase("y")) {
                                        SmarterSMBApplication.isDecisionMakingQues = true;
                                        String currentSelectedVal = String.valueOf(questionAnswerHash.get(rootQ));
                                        if(currentSelectedVal != null && !currentSelectedVal.isEmpty()){
                                            SmarterSMBApplication.currentSelectedValue = currentSelectedVal;
                                        }
                                    } else {
                                        SmarterSMBApplication.isDecisionMakingQues = false;
                                    }
                                } else {
                                    SmarterSMBApplication.isDecisionMakingQues = false;
                                }

                                if (jsonobject.has("action_type")) {
                                    actionType = jsonobject.getString("action_type");
                                    actionTypeHash.put(rootQ, actionType);
                                }

                                if (jsonobject.has("title")) {
                                    titleText = jsonobject.getString("title");
                                }

                                if (jsonobject.has("hint")) {
                                    hintText = jsonobject.getString("hint");
                                }
                                if (jsonobject.has("dd_data")) {
                                    dropDownData = jsonobject.getString("dd_data");
                                    if (dropDownData != null && dropDownData.length() > 0) {
                                        dropDownHash.put(rootQ, dropDownData);
                                    }
                                }

                                if (jsonobject.has("sdd_data")) {
                                    searchableDropDownData = jsonobject.getString("sdd_data");
                                    if (searchableDropDownData != null && searchableDropDownData.length() > 0) {
                                        searchableDropDownHash.put(rootQ, searchableDropDownData);
                                    }
                                }
                                if (jsonobject.has("msdd_data")) {
                                    multiSelectionDropDownData = jsonobject.getString("msdd_data");
                                    if (multiSelectionDropDownData != null && multiSelectionDropDownData.length() > 0) {
                                        multiSelectionDropDownHash.put(rootQ, multiSelectionDropDownData);
                                    }
                                }

                                if (jsonobject.has("cb_data")) {
                                    checkboxData = jsonobject.getString("cb_data");
                                    if (checkboxData != null && checkboxData.length() > 0) {
                                        checkboxHash = new LinkedHashMap();
                                        checkboxHash.put(rootQ, checkboxData);
                                    }
                                }

                                if (jsonobject.has("bt_data")) {
                                    buttonData = jsonobject.getString("bt_data");
                                    if (buttonData != null && buttonData.length() > 0) {
                                        buttonHash.put(rootQ, buttonData);
                                    }
                                }

                                if (jsonobject.has("rb_data")) {
                                    radiobuttonData = jsonobject.getString("rb_data");
                                    if (radiobuttonData != null && radiobuttonData.length() > 0) {
                                        radiobuttonHash.put(rootQ, radiobuttonData);
                                    }
                                }

                                if (jsonobject.has("status")) {
                                    status = jsonobject.getString("status");
                                    mmtStatus = status;
                                    ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                                }

                                if (jsonobject.has("min_value")) {
                                    min = Integer.parseInt(jsonobject.getString("min_value"));
                                }
                                if (jsonobject.has("max_value")) {
                                    max = Integer.parseInt(jsonobject.getString("max_value"));
                                }

                                if (jsonobject.has("max_yes")) {
                                    max_yes = Integer.parseInt(jsonobject.getString("max_yes"));
                                }

                                if (jsonobject.has("max_yes_action")) {
                                    max_yes_action = jsonobject.getString("max_yes_action");
                                }

                                if (jsonobject.has("cb_action")) {
                                    cb_action = jsonobject.getString("cb_action");
                                }

                                if (jsonobject.has("next_action")) {
                                    JSONObject nextActionObj = jsonobject.getJSONObject("next_action");
                                    if(nextActionObj != null &&  nextActionObj.has("post_url")){
                                        next_action = String.valueOf(nextActionObj.get("post_url"));
                                    }
                                } else {
                                    next_action = "";
                                }
                            }
                            questionnaireHash.put(rootQ, rootR);
                            if(tempQuesList != null && !tempQuesList.contains(rootQ)) {
                                tempQuesList.add(questionCount, rootQ);
                            }
                            tempQnAHash.put(rootQ, rootR);
                            if (titleText != null && !titleText.isEmpty()) {
                                titleQHash.put(rootQ, titleText);
                            }

                            if (rootR.equalsIgnoreCase("RT")) {
                                ratingsLayout();
                            } else if (rootR.equalsIgnoreCase("FT") || rootR.equalsIgnoreCase("EMAIL") || rootR.equalsIgnoreCase("BLANK")) {
                                freeTextLayout();
                                if(rootR.equalsIgnoreCase("FT")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "FT");
                                } else if(rootR.equalsIgnoreCase("EMAIL")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "EMAIL");
                                } else if(rootR.equalsIgnoreCase("BLANK")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "BLANK");
                                }
                            } else if (rootR.equalsIgnoreCase("CALLPM")){
                                callManagerLayout();
                            } else if (rootR.equalsIgnoreCase("DD")) {
                                dropDownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "DD");
                            } else if (rootR != null && rootR.equalsIgnoreCase("CB")) {
                                checkBoxLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "CB");
                            } else if (rootR.equalsIgnoreCase("BT")) {
                                buttonLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "BT");
                            } else if (rootR.equalsIgnoreCase("RB")) {
                                radiobuttonLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "RB");
                            } else if (rootR.equalsIgnoreCase("NP")) {
                                numberpickerLayout();
                            } else if (rootR.equalsIgnoreCase("YN")) {
                                yesNoLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "YN");
                            } else if (rootR.equalsIgnoreCase("DATETIME") || rootR.equalsIgnoreCase("DATE")) {
                                dateTimeLayout();
                            } else if (rootR.equalsIgnoreCase("FLP")) {
                                followUpLayout();
                            } else if (rootR.equalsIgnoreCase("FN") || rootR.equalsIgnoreCase("SMS")) {
                                freeNumberLayout();
                                if(rootR.equalsIgnoreCase("FN")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "FN");
                                } else if(rootR.equalsIgnoreCase("SMS")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "SMS");
                                }
                            } else if (rootR.equalsIgnoreCase("SDD")) {
                                searchableDropdownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "SDD");
                            } else if (rootR.equalsIgnoreCase("MSDD")) {
                                multiSelectionDropdownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "MSDD");
                            } else if (rootR.equalsIgnoreCase("ATTACHMENT")) {
                                attachmentLayout();
                            }
                        } else {
                            thankYouLayout();
                        }
                    } else {
                        questionCount++;
                        if (rootArrayData.length() != questionCount) {
                            jsonobject = rootArrayData.getJSONObject(questionCount);
                            currentQuestionnaire = rootArrayData.toString();

                            if (jsonobject != null) {
                                if (jsonobject.has("q")) {
                                    rootQ = jsonobject.getString("q");
                                    nestedQuesHash.put(rootQ, rootArrayData.toString());
                                    indexQuesHash.put(rootQ, questionCount);
                                }
                                if (jsonobject.has("at")) {
                                    rootR = jsonobject.getString("at");
                                    currentObject = rootR;
                                }

                                if (jsonobject.has("a")) {
                                    rootA = jsonobject.getString("a");
                                }

                                if (jsonobject.has("last-updated")) {
                                    rootLastUpdate = jsonobject.getString("last-updated");
                                }

                                if (jsonobject.has("value")) {
                                    rootValue = jsonobject.getString("value");
                                }

                                if (jsonobject.has("mandatory")) {
                                    mandatory = jsonobject.getString("mandatory");
                                    if (mandatory != null && !mandatory.isEmpty() && mandatory.equalsIgnoreCase("y")) {
                                        SmarterSMBApplication.isCurrentQuesMandatory = true;
                                    } else {
                                        SmarterSMBApplication.isCurrentQuesMandatory = false;
                                    }
                                } else {
                                    SmarterSMBApplication.isCurrentQuesMandatory = false;
                                }

                                if (jsonobject.has("decision")) {
                                    decision = jsonobject.getString("decision");
                                    if (decision != null && !decision.isEmpty() && decision.equalsIgnoreCase("y")) {
                                        SmarterSMBApplication.isDecisionMakingQues = true;
                                        String currentSelectedVal = String.valueOf(questionAnswerHash.get(rootQ));
                                        if(currentSelectedVal != null && !currentSelectedVal.isEmpty()){
                                            SmarterSMBApplication.currentSelectedValue = currentSelectedVal;
                                        }
                                    } else {
                                        SmarterSMBApplication.isDecisionMakingQues = false;
                                    }
                                } else {
                                    SmarterSMBApplication.isDecisionMakingQues = false;
                                }

                                if (jsonobject.has("action_type")) {
                                    actionType = jsonobject.getString("action_type");
                                    actionTypeHash.put(rootQ, actionType);
                                }

                                if (jsonobject.has("title")) {
                                    titleText = jsonobject.getString("title");
                                }

                                if (jsonobject.has("hint")) {
                                    hintText = jsonobject.getString("hint");
                                }
                                if (jsonobject.has("dd_data")) {
                                    dropDownData = jsonobject.getString("dd_data");
                                    if (dropDownData != null && dropDownData.length() > 0) {
                                        dropDownHash.put(rootQ, dropDownData);
                                    }
                                }

                                if (jsonobject.has("sdd_data")) {
                                    searchableDropDownData = jsonobject.getString("sdd_data");
                                    if (searchableDropDownData != null && searchableDropDownData.length() > 0) {
                                        searchableDropDownHash.put(rootQ, searchableDropDownData);
                                    }
                                }
                                if (jsonobject.has("msdd_data")) {
                                    multiSelectionDropDownData = jsonobject.getString("msdd_data");
                                    if (multiSelectionDropDownData != null && multiSelectionDropDownData.length() > 0) {
                                        multiSelectionDropDownHash.put(rootQ, multiSelectionDropDownData);
                                    }
                                }

                                if (jsonobject.has("cb_data")) {
                                    checkboxData = jsonobject.getString("cb_data");
                                    if (checkboxData != null && checkboxData.length() > 0) {
                                        checkboxHash = new LinkedHashMap();
                                        checkboxHash.put(rootQ, checkboxData);
                                    }
                                }

                                if (jsonobject.has("bt_data")) {
                                    buttonData = jsonobject.getString("bt_data");
                                    if (buttonData != null && buttonData.length() > 0) {
                                        buttonHash.put(rootQ, buttonData);
                                    }
                                }

                                if (jsonobject.has("rb_data")) {
                                    radiobuttonData = jsonobject.getString("rb_data");
                                    if (radiobuttonData != null && radiobuttonData.length() > 0) {
                                        radiobuttonHash.put(rootQ, radiobuttonData);
                                    }
                                }

                                if (jsonobject.has("status")) {
                                    status = jsonobject.getString("status");
                                    mmtStatus = status;
                                    ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                                }

                                if (jsonobject.has("min_value")) {
                                    min = Integer.parseInt(jsonobject.getString("min_value"));
                                }
                                if (jsonobject.has("max_value")) {
                                    max = Integer.parseInt(jsonobject.getString("max_value"));
                                }

                                if (jsonobject.has("max_yes")) {
                                    max_yes = Integer.parseInt(jsonobject.getString("max_yes"));
                                }

                                if (jsonobject.has("max_yes_action")) {
                                    max_yes_action = jsonobject.getString("max_yes_action");
                                }

                                if (jsonobject.has("cb_action")) {
                                    cb_action = jsonobject.getString("cb_action");
                                }

                                if (jsonobject.has("next_action")) {
                                    JSONObject nextActionObj = jsonobject.getJSONObject("next_action");
                                    if(nextActionObj != null &&  nextActionObj.has("post_url")){
                                        next_action = String.valueOf(nextActionObj.get("post_url"));
                                    }
                                } else {
                                    next_action = "";
                                }
                            }
                            questionnaireHash.put(rootQ, rootR);
                            if(tempQuesList != null && !tempQuesList.contains(rootQ)) {
                                tempQuesList.add(questionCount, rootQ);
                            }
                            tempQnAHash.put(rootQ, rootR);
                            if (titleText != null && !titleText.isEmpty()) {
                                titleQHash.put(rootQ, titleText);
                            }

                            if (rootR.equalsIgnoreCase("RT")) {
                                ratingsLayout();
                            } else if (rootR.equalsIgnoreCase("FT") || rootR.equalsIgnoreCase("EMAIL") || rootR.equalsIgnoreCase("BLANK")) {
                                freeTextLayout();
                                if(rootR.equalsIgnoreCase("FT")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "FT");
                                } else if(rootR.equalsIgnoreCase("EMAIL")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "EMAIL");
                                } else if(rootR.equalsIgnoreCase("BLANK")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "BLANK");
                                }
                            } else if (rootR.equalsIgnoreCase("CALLPM")){
                                callManagerLayout();
                            } else if (rootR.equalsIgnoreCase("DD")) {
                                dropDownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "DD");
                            } else if (rootR != null && rootR.equalsIgnoreCase("CB")) {
                                checkBoxLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "CB");
                            } else if (rootR.equalsIgnoreCase("BT")) {
                                buttonLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "BT");
                            } else if (rootR.equalsIgnoreCase("RB")) {
                                radiobuttonLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "RB");
                            } else if (rootR.equalsIgnoreCase("NP")) {
                                numberpickerLayout();
                            } else if (rootR.equalsIgnoreCase("YN")) {
                                yesNoLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "YN");
                            } else if (rootR.equalsIgnoreCase("DATETIME") || rootR.equalsIgnoreCase("DATE")) {
                                dateTimeLayout();
                            } else if (rootR.equalsIgnoreCase("FLP")) {
                                followUpLayout();
                            } else if (rootR.equalsIgnoreCase("FN") || rootR.equalsIgnoreCase("SMS")) {
                                freeNumberLayout();
                                if(rootR.equalsIgnoreCase("FN")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "FN");
                                } else if(rootR.equalsIgnoreCase("SMS")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "SMS");
                                }
                            } else if (rootR.equalsIgnoreCase("SDD")) {
                                searchableDropdownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "SDD");
                            } else if (rootR.equalsIgnoreCase("MSDD")) {
                                multiSelectionDropdownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "MSDD");
                            } else if (rootR.equalsIgnoreCase("ATTACHMENT")) {
                                attachmentLayout();
                            }
                        } else {
                            thankYouLayout();
                        }
                    }
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
            if(previousButtonClicked) {

            } else {
                currentSelectedRadioButton = "";
            }
        } else if (currentRatings != null && !currentRatings.isEmpty() && !currentRatings.equals("0")) {
            try {
                if (rootArrayData != null) {
                    nestedQuesHash.put(rootQ, rootArrayData.toString());
                    indexQuesHash.put(rootQ, questionCount);
                    String key = "";
                    jsonobject = rootArrayData.getJSONObject(questionCount);

                    if (jsonobject.has(currentRatings)) {
                        questionCount = 0;
                        if (jsonobject != null) {
                            Iterator<String> keys = jsonobject.keys();
                            while (keys.hasNext()) {
                                key = keys.next();
                                if (key.equals(currentRatings)) {
                                    key = currentRatings;
                                    break;
                                }
                            }
                            jsonobject.get(key);
                            if (jsonobject != null) {
                                if (jsonobject.getJSONObject(key).has("q")) {
                                    rootQ = jsonobject.getJSONObject(key).getString("q");
                                }
                                if (jsonobject.getJSONObject(key).has("at")) {
                                    rootR = jsonobject.getJSONObject(key).getString("at");
                                    currentObject = rootR;
                                }
                                if (jsonobject.has("mandatory")) {
                                    mandatory = jsonobject.getString("mandatory");
                                    if (mandatory != null && !mandatory.isEmpty() && mandatory.equalsIgnoreCase("y")) {
                                        SmarterSMBApplication.isCurrentQuesMandatory = true;
                                    } else {
                                        SmarterSMBApplication.isCurrentQuesMandatory = false;
                                    }
                                } else {
                                    SmarterSMBApplication.isCurrentQuesMandatory = false;
                                }

                                if (jsonobject.has("decision")) {
                                    decision = jsonobject.getString("decision");
                                    if (decision != null && !decision.isEmpty() && decision.equalsIgnoreCase("y")) {
                                        SmarterSMBApplication.isDecisionMakingQues = true;
                                        String currentSelectedVal = String.valueOf(questionAnswerHash.get(rootQ));
                                        if(currentSelectedVal != null && !currentSelectedVal.isEmpty()){
                                            SmarterSMBApplication.currentSelectedValue = currentSelectedVal;
                                        }
                                    } else {
                                        SmarterSMBApplication.isDecisionMakingQues = false;
                                    }
                                } else {
                                    SmarterSMBApplication.isDecisionMakingQues = false;
                                }

                                if (jsonobject.has("action_type")) {
                                    actionType = jsonobject.getString("action_type");
                                    actionTypeHash.put(rootQ, actionType);
                                }

                                if (jsonobject.has("title")) {
                                    titleText = jsonobject.getString("title");
                                }

                                if (jsonobject.has("hint")) {
                                    hintText = jsonobject.getString("hint");
                                }
                                if (jsonobject.getJSONObject(key).has("dd_data")) {
                                    dropDownData = jsonobject.getJSONObject(key).getString("dd_data");
                                    if (dropDownData != null && dropDownData.length() > 0) {
                                        dropDownHash.put(rootQ, dropDownData);
                                    }
                                }

                                if (jsonobject.has("sdd_data")) {
                                    searchableDropDownData = jsonobject.getString("sdd_data");
                                    if (searchableDropDownData != null && searchableDropDownData.length() > 0) {
                                        searchableDropDownHash.put(rootQ, searchableDropDownData);
                                    }
                                }
                                if (jsonobject.has("msdd_data")) {
                                    multiSelectionDropDownData = jsonobject.getString("msdd_data");
                                    if (multiSelectionDropDownData != null && multiSelectionDropDownData.length() > 0) {
                                        multiSelectionDropDownHash.put(rootQ, multiSelectionDropDownData);
                                    }
                                }

                                if (jsonobject.has("cb_data")) {
                                    checkboxData = jsonobject.getString("cb_data");
                                    if (checkboxData != null && checkboxData.length() > 0) {
                                        checkboxHash = new LinkedHashMap();
                                        checkboxHash.put(rootQ, checkboxData);
                                    }
                                }

                                if (jsonobject.has("bt_data")) {
                                    buttonData = jsonobject.getString("bt_data");
                                    if (buttonData != null && buttonData.length() > 0) {
                                        buttonHash.put(rootQ, buttonData);
                                    }
                                }

                                if (jsonobject.has("rb_data")) {
                                    radiobuttonData = jsonobject.getString("rb_data");
                                    if (radiobuttonData != null && radiobuttonData.length() > 0) {
                                        radiobuttonHash.put(rootQ, radiobuttonData);
                                    }
                                }

                                if (jsonobject.has("status")) {
                                    status = jsonobject.getString("status");
                                    mmtStatus = status;
                                    ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                                }

                                if (jsonobject.has("min_value")) {
                                    min = Integer.parseInt(jsonobject.getString("min_value"));
                                }
                                if (jsonobject.has("max_value")) {
                                    max = Integer.parseInt(jsonobject.getString("max_value"));
                                }

                                if (jsonobject.has("max_yes")) {
                                    max_yes = Integer.parseInt(jsonobject.getString("max_yes"));
                                }

                                if (jsonobject.has("max_yes_action")) {
                                    max_yes_action = jsonobject.getString("max_yes_action");
                                }

                                if (jsonobject.has("cb_action")) {
                                    cb_action = jsonobject.getString("cb_action");
                                }

                                if (jsonobject.has("next_action")) {
                                    JSONObject nextActionObj = jsonobject.getJSONObject("next_action");
                                    if(nextActionObj != null &&  nextActionObj.has("post_url")){
                                        next_action = String.valueOf(nextActionObj.get("post_url"));
                                    }
                                } else {
                                    next_action = "";
                                }
                            }
                            questionnaireHash.put(rootQ, rootR);
                            if(tempQuesList != null && !tempQuesList.contains(rootQ)) {
                                tempQuesList.add(questionCount, rootQ);
                            }
                            tempQnAHash.put(rootQ, rootR);
                            if (titleText != null && !titleText.isEmpty()) {
                                titleQHash.put(rootQ, titleText);
                            }

                            if (rootR.equalsIgnoreCase("RT")) {
                                ratingsLayout();
                            } else if (rootR.equalsIgnoreCase("FT") || rootR.equalsIgnoreCase("EMAIL") || rootR.equalsIgnoreCase("BLANK")) {
                                freeTextLayout();
                                if(rootR.equalsIgnoreCase("FT")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "FT");
                                } else if(rootR.equalsIgnoreCase("EMAIL")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "EMAIL");
                                } else if(rootR.equalsIgnoreCase("BLANK")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "BLANK");
                                }
                            } else if (rootR.equalsIgnoreCase("CALLPM")){
                                callManagerLayout();
                            } else if (rootR.equalsIgnoreCase("DD")) {
                                dropDownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "DD");
                            } else if (rootR != null && rootR.equalsIgnoreCase("CB")) {
                                checkBoxLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "CB");
                            } else if (rootR.equalsIgnoreCase("BT")) {
                                buttonLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "BT");
                            } else if (rootR.equalsIgnoreCase("RB")) {
                                radiobuttonLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "RB");
                            } else if (rootR.equalsIgnoreCase("NP")) {
                                numberpickerLayout();
                            } else if (rootR.equalsIgnoreCase("YN")) {
                                yesNoLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "YN");
                            } else if (rootR.equalsIgnoreCase("DATETIME") || rootR.equalsIgnoreCase("DATE")) {
                                dateTimeLayout();
                            } else if (rootR.equalsIgnoreCase("FLP")) {
                                followUpLayout();
                            } else if (rootR.equalsIgnoreCase("FN") || rootR.equalsIgnoreCase("SMS")) {
                                freeNumberLayout();
                                if(rootR.equalsIgnoreCase("FN")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "FN");
                                } else if(rootR.equalsIgnoreCase("SMS")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "SMS");
                                }
                            } else if (rootR.equalsIgnoreCase("SDD")) {
                                searchableDropdownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "SDD");
                            } else if (rootR.equalsIgnoreCase("MSDD")) {
                                multiSelectionDropdownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "MSDD");
                            } else if (rootR.equalsIgnoreCase("ATTACHMENT")) {
                                attachmentLayout();
                            }
                        } else {
                            thankYouLayout();
                        }
                    } else {
                        questionCount++;
                        if (rootArrayData.length() != questionCount) {
                            jsonobject = rootArrayData.getJSONObject(questionCount);
                            currentQuestionnaire = rootArrayData.toString();
                            if (jsonobject != null) {
                                if (jsonobject.has("q")) {
                                    rootQ = jsonobject.getString("q");
                                    nestedQuesHash.put(rootQ, rootArrayData.toString());
                                    indexQuesHash.put(rootQ, questionCount);
                                }
                                if (jsonobject.has("at")) {
                                    rootR = jsonobject.getString("at");
                                    currentObject = rootR;
                                }

                                if (jsonobject.has("a")) {
                                    rootA = jsonobject.getString("a");
                                }

                                if (jsonobject.has("last-updated")) {
                                    rootLastUpdate = jsonobject.getString("last-updated");
                                }

                                if (jsonobject.has("value")) {
                                    rootValue = jsonobject.getString("value");
                                }

                                if (jsonobject.has("mandatory")) {
                                    mandatory = jsonobject.getString("mandatory");
                                    if (mandatory != null && !mandatory.isEmpty() && mandatory.equalsIgnoreCase("y")) {
                                        SmarterSMBApplication.isCurrentQuesMandatory = true;
                                    } else {
                                        SmarterSMBApplication.isCurrentQuesMandatory = false;
                                    }
                                } else {
                                    SmarterSMBApplication.isCurrentQuesMandatory = false;
                                }

                                if (jsonobject.has("decision")) {
                                    decision = jsonobject.getString("decision");
                                    if (decision != null && !decision.isEmpty() && decision.equalsIgnoreCase("y")) {
                                        SmarterSMBApplication.isDecisionMakingQues = true;
                                        String currentSelectedVal = String.valueOf(questionAnswerHash.get(rootQ));
                                        if(currentSelectedVal != null && !currentSelectedVal.isEmpty()){
                                            SmarterSMBApplication.currentSelectedValue = currentSelectedVal;
                                        }
                                    } else {
                                        SmarterSMBApplication.isDecisionMakingQues = false;
                                    }
                                } else {
                                    SmarterSMBApplication.isDecisionMakingQues = false;
                                }

                                if (jsonobject.has("action_type")) {
                                    actionType = jsonobject.getString("action_type");
                                    actionTypeHash.put(rootQ, actionType);
                                }

                                if (jsonobject.has("title")) {
                                    titleText = jsonobject.getString("title");
                                }

                                if (jsonobject.has("hint")) {
                                    hintText = jsonobject.getString("hint");
                                }
                                if (jsonobject.has("dd_data")) {
                                    dropDownData = jsonobject.getString("dd_data");
                                    if (dropDownData != null && dropDownData.length() > 0) {
                                        dropDownHash.put(rootQ, dropDownData);
                                    }
                                }

                                if (jsonobject.has("sdd_data")) {
                                    searchableDropDownData = jsonobject.getString("sdd_data");
                                    if (searchableDropDownData != null && searchableDropDownData.length() > 0) {
                                        searchableDropDownHash.put(rootQ, searchableDropDownData);
                                    }
                                }
                                if (jsonobject.has("msdd_data")) {
                                    multiSelectionDropDownData = jsonobject.getString("msdd_data");
                                    if (multiSelectionDropDownData != null && multiSelectionDropDownData.length() > 0) {
                                        multiSelectionDropDownHash.put(rootQ, multiSelectionDropDownData);
                                    }
                                }

                                if (jsonobject.has("cb_data")) {
                                    checkboxData = jsonobject.getString("cb_data");
                                    if (checkboxData != null && checkboxData.length() > 0) {
                                        checkboxHash = new LinkedHashMap();
                                        checkboxHash.put(rootQ, checkboxData);
                                    }
                                }

                                if (jsonobject.has("bt_data")) {
                                    buttonData = jsonobject.getString("bt_data");
                                    if (buttonData != null && buttonData.length() > 0) {
                                        buttonHash.put(rootQ, buttonData);
                                    }
                                }

                                if (jsonobject.has("rb_data")) {
                                    radiobuttonData = jsonobject.getString("rb_data");
                                    if (radiobuttonData != null && radiobuttonData.length() > 0) {
                                        radiobuttonHash.put(rootQ, radiobuttonData);
                                    }
                                }

                                if (jsonobject.has("status")) {
                                    status = jsonobject.getString("status");
                                    mmtStatus = status;
                                    ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                                }

                                if (jsonobject.has("min_value")) {
                                    min = Integer.parseInt(jsonobject.getString("min_value"));
                                }
                                if (jsonobject.has("max_value")) {
                                    max = Integer.parseInt(jsonobject.getString("max_value"));
                                }

                                if (jsonobject.has("max_yes")) {
                                    max_yes = Integer.parseInt(jsonobject.getString("max_yes"));
                                }

                                if (jsonobject.has("max_yes_action")) {
                                    max_yes_action = jsonobject.getString("max_yes_action");
                                }

                                if (jsonobject.has("cb_action")) {
                                    cb_action = jsonobject.getString("cb_action");
                                }

                                if (jsonobject.has("next_action")) {
                                    JSONObject nextActionObj = jsonobject.getJSONObject("next_action");
                                    if(nextActionObj != null &&  nextActionObj.has("post_url")){
                                        next_action = String.valueOf(nextActionObj.get("post_url"));
                                    }
                                } else {
                                    next_action = "";
                                }
                            }
                            questionnaireHash.put(rootQ, rootR);
                            if(tempQuesList != null && !tempQuesList.contains(rootQ)) {
                                tempQuesList.add(questionCount, rootQ);
                            }
                            tempQnAHash.put(rootQ, rootR);
                            if (titleText != null && !titleText.isEmpty()) {
                                titleQHash.put(rootQ, titleText);
                            }

                            if (rootR.equalsIgnoreCase("RT")) {
                                ratingsLayout();
                            } else if (rootR.equalsIgnoreCase("FT") || rootR.equalsIgnoreCase("EMAIL") || rootR.equalsIgnoreCase("BLANK")) {
                                freeTextLayout();
                                if(rootR.equalsIgnoreCase("FT")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "FT");
                                } else if(rootR.equalsIgnoreCase("EMAIL")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "EMAIL");
                                } else if(rootR.equalsIgnoreCase("BLANK")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "BLANK");
                                }
                            } else if (rootR.equalsIgnoreCase("CALLPM")){
                                callManagerLayout();
                            } else if (rootR.equalsIgnoreCase("DD")) {
                                dropDownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "DD");
                            } else if (rootR != null && rootR.equalsIgnoreCase("CB")) {
                                checkBoxLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "CB");
                            } else if (rootR.equalsIgnoreCase("BT")) {
                                buttonLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "BT");
                            } else if (rootR.equalsIgnoreCase("RB")) {
                                radiobuttonLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "RB");
                            } else if (rootR.equalsIgnoreCase("NP")) {
                                numberpickerLayout();
                            } else if (rootR.equalsIgnoreCase("YN")) {
                                yesNoLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "YN");
                            } else if (rootR.equalsIgnoreCase("DATETIME") || rootR.equalsIgnoreCase("DATE")) {
                                dateTimeLayout();
                            } else if (rootR.equalsIgnoreCase("FLP")) {
                                followUpLayout();
                            } else if (rootR.equalsIgnoreCase("FN") || rootR.equalsIgnoreCase("SMS")) {
                                freeNumberLayout();
                                if(rootR.equalsIgnoreCase("FN")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "FN");
                                } else if(rootR.equalsIgnoreCase("SMS")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "SMS");
                                }
                            } else if (rootR.equalsIgnoreCase("SDD")) {
                                searchableDropdownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "SDD");
                            } else if (rootR.equalsIgnoreCase("MSDD")) {
                                multiSelectionDropdownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "MSDD");
                            } else if (rootR.equalsIgnoreCase("ATTACHMENT")) {
                                attachmentLayout();
                            }
                        } else {
                            thankYouLayout();
                        }
                    }
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
            if(previousButtonClicked) {

            } else {
                currentRatings = "";
                customerRatings.setText("");
            }
        } else if (formStatus != null && !formStatus.isEmpty()) {
            try {
                if (rootArrayData != null) {
                    currentQuestionnaire = rootArrayData.toString();
                    nestedQuesHash.put(rootQ, rootArrayData.toString());
                    indexQuesHash.put(rootQ, questionCount);
                    jsonobject = rootArrayData.getJSONObject(questionCount);

                    formStatus = formStatus.substring(0, 1);
                    if (jsonobject.has(formStatus)) {
                        rootArrayData = jsonobject.getJSONArray(formStatus);
//                        currentQuestionnaire = jsonobject.toString();
                        if(decisionArrayList != null && !decisionArrayList.contains(currentQuestionnaire)) {
                            decisionArrayList.add(currentQuestionnaire);
                        }
                        questionCount = 0;
                        if (rootArrayData.length() != questionCount) {
                            jsonobject = rootArrayData.getJSONObject(questionCount);
                            if (jsonobject != null) {
                                if (jsonobject.has("q")) {
                                    rootQ = jsonobject.getString("q");
                                }
                                if (jsonobject.has("at")) {
                                    rootR = jsonobject.getString("at");
                                    currentObject = rootR;
                                }

                                if (jsonobject.has("a")) {
                                    rootA = jsonobject.getString("a");
                                }

                                if (jsonobject.has("last-updated")) {
                                    rootLastUpdate = jsonobject.getString("last-updated");
                                }

                                if (jsonobject.has("value")) {
                                    rootValue = jsonobject.getString("value");
                                }

                                if (jsonobject.has("mandatory")) {
                                    mandatory = jsonobject.getString("mandatory");
                                    if (mandatory != null && !mandatory.isEmpty() && mandatory.equalsIgnoreCase("y")) {
                                        SmarterSMBApplication.isCurrentQuesMandatory = true;
                                    } else {
                                        SmarterSMBApplication.isCurrentQuesMandatory = false;
                                    }
                                } else {
                                    SmarterSMBApplication.isCurrentQuesMandatory = false;
                                }

                                if (jsonobject.has("decision")) {
                                    decision = jsonobject.getString("decision");
                                    if (decision != null && !decision.isEmpty() && decision.equalsIgnoreCase("y")) {
                                        SmarterSMBApplication.isDecisionMakingQues = true;
                                        String currentSelectedVal = String.valueOf(questionAnswerHash.get(rootQ));
                                        if(currentSelectedVal != null && !currentSelectedVal.isEmpty()){
                                            SmarterSMBApplication.currentSelectedValue = currentSelectedVal;
                                        }
                                    } else {
                                        SmarterSMBApplication.isDecisionMakingQues = false;
                                    }
                                } else {
                                    SmarterSMBApplication.isDecisionMakingQues = false;
                                }

                                if (jsonobject.has("action_type")) {
                                    actionType = jsonobject.getString("action_type");
                                    actionTypeHash.put(rootQ, actionType);
                                }

                                if (jsonobject.has("title")) {
                                    titleText = jsonobject.getString("title");
                                }

                                if (jsonobject.has("hint")) {
                                    hintText = jsonobject.getString("hint");
                                }
                                if (jsonobject.has("dd_data")) {
                                    dropDownData = jsonobject.getString("dd_data");
                                    if (dropDownData != null && dropDownData.length() > 0) {
                                        dropDownHash.put(rootQ, dropDownData);
                                    }
                                }

                                if (jsonobject.has("sdd_data")) {
                                    searchableDropDownData = jsonobject.getString("sdd_data");
                                    if (searchableDropDownData != null && searchableDropDownData.length() > 0) {
                                        searchableDropDownHash.put(rootQ, searchableDropDownData);
                                    }
                                }
                                if (jsonobject.has("msdd_data")) {
                                    multiSelectionDropDownData = jsonobject.getString("msdd_data");
                                    if (multiSelectionDropDownData != null && multiSelectionDropDownData.length() > 0) {
                                        multiSelectionDropDownHash.put(rootQ, multiSelectionDropDownData);
                                    }
                                }

                                if (jsonobject.has("cb_data")) {
                                    checkboxData = jsonobject.getString("cb_data");
                                    if (checkboxData != null && checkboxData.length() > 0) {
                                        checkboxHash = new LinkedHashMap();
                                        checkboxHash.put(rootQ, checkboxData);
                                    }
                                }

                                if (jsonobject.has("bt_data")) {
                                    buttonData = jsonobject.getString("bt_data");
                                    if (buttonData != null && buttonData.length() > 0) {
                                        buttonHash.put(rootQ, buttonData);
                                    }
                                }

                                if (jsonobject.has("rb_data")) {
                                    radiobuttonData = jsonobject.getString("rb_data");
                                    if (radiobuttonData != null && radiobuttonData.length() > 0) {
                                        radiobuttonHash.put(rootQ, radiobuttonData);
                                    }
                                }

                                if (jsonobject.has("status")) {
                                    status = jsonobject.getString("status");
                                    mmtStatus = status;
                                    ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                                    if (status != null && !status.isEmpty() && (status.equalsIgnoreCase("APT CONFIRM") || status.equalsIgnoreCase("CLOSED"))) {
                                        thankYouLayout();
                                        return;
                                    }
                                }

                                if (jsonobject.has("min_value")) {
                                    min = Integer.parseInt(jsonobject.getString("min_value"));
                                }
                                if (jsonobject.has("max_value")) {
                                    max = Integer.parseInt(jsonobject.getString("max_value"));
                                }

                                if (jsonobject.has("max_yes")) {
                                    max_yes = Integer.parseInt(jsonobject.getString("max_yes"));
                                }

                                if (jsonobject.has("max_yes_action")) {
                                    max_yes_action = jsonobject.getString("max_yes_action");
                                }

                                if (jsonobject.has("cb_action")) {
                                    cb_action = jsonobject.getString("cb_action");
                                }

                                if (jsonobject.has("next_action")) {
                                    JSONObject nextActionObj = jsonobject.getJSONObject("next_action");
                                    if(nextActionObj != null &&  nextActionObj.has("post_url")){
                                        next_action = String.valueOf(nextActionObj.get("post_url"));
                                    }
                                } else {
                                    next_action = "";
                                }

                                if (formStatus != null && !formStatus.isEmpty() && formStatus.equalsIgnoreCase("Y")) {
                                    if (jsonobject.has("next_action")) {
                                        JSONObject nextActionObj = jsonobject.getJSONObject("next_action");
                                        if(nextActionObj != null &&  nextActionObj.has("post_url")){
                                            next_action = String.valueOf(nextActionObj.get("post_url"));
                                        }
                                    } else {
                                        next_action = "";
                                    }
                                } else if (formStatus != null && !formStatus.isEmpty() && formStatus.equalsIgnoreCase("N")) {
                                    if (jsonobject.has("status")) {
                                        status = jsonobject.getString("status");
                                        if (status != null && !status.isEmpty() && status.equalsIgnoreCase("ASSIGNTOL2")) {
                                            thankYouLayout();
                                            return;
                                        }
                                    }
                                }
                            }
                            questionnaireHash.put(rootQ, rootR);
                            if(tempQuesList != null && !tempQuesList.contains(rootQ)) {
                                tempQuesList.add(questionCount, rootQ);
                            }
                            tempQnAHash.put(rootQ, rootR);
                            if (titleText != null && !titleText.isEmpty()) {
                                titleQHash.put(rootQ, titleText);
                            }

                            if (rootR.equalsIgnoreCase("RT")) {
                                ratingsLayout();
                            } else if (rootR.equalsIgnoreCase("FT") || rootR.equalsIgnoreCase("EMAIL") || rootR.equalsIgnoreCase("BLANK")) {
                                freeTextLayout();
                                if(rootR.equalsIgnoreCase("FT")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "FT");
                                } else if(rootR.equalsIgnoreCase("EMAIL")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "EMAIL");
                                } else if(rootR.equalsIgnoreCase("BLANK")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "BLANK");
                                }
                            } else if (rootR.equalsIgnoreCase("CALLPM")){
                                callManagerLayout();
                            } else if (rootR.equalsIgnoreCase("DD")) {
                                dropDownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "DD");
                            } else if (rootR != null && rootR.equalsIgnoreCase("CB")) {
                                checkBoxLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "CB");
                            } else if (rootR.equalsIgnoreCase("BT")) {
                                buttonLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "BT");
                            } else if (rootR.equalsIgnoreCase("RB")) {
                                radiobuttonLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "RB");
                            } else if (rootR.equalsIgnoreCase("NP")) {
                                numberpickerLayout();
                            } else if (rootR.equalsIgnoreCase("YN")) {
                                yesNoLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "YN");
                            } else if (rootR.equalsIgnoreCase("DATETIME") || rootR.equalsIgnoreCase("DATE")) {
                                dateTimeLayout();
                            } else if (rootR.equalsIgnoreCase("FLP")) {
                                followUpLayout();
                            } else if (rootR.equalsIgnoreCase("FN") || rootR.equalsIgnoreCase("SMS")) {
                                freeNumberLayout();
                                if(rootR.equalsIgnoreCase("FN")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "FN");
                                } else if(rootR.equalsIgnoreCase("SMS")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "SMS");
                                }
                            } else if (rootR.equalsIgnoreCase("SDD")) {
                                searchableDropdownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "SDD");
                            } else if (rootR.equalsIgnoreCase("MSDD")) {
                                multiSelectionDropdownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "MSDD");
                            } else if (rootR.equalsIgnoreCase("ATTACHMENT")) {
                                attachmentLayout();
                            }
                        } else {
                            thankYouLayout();
                        }
                    } else {
                        questionCount++;
                        if (rootArrayData.length() != questionCount) {
                            jsonobject = rootArrayData.getJSONObject(questionCount);
                            currentQuestionnaire = jsonobject.toString();
                            if (jsonobject != null) {
                                if (jsonobject.has("q")) {
                                    rootQ = jsonobject.getString("q");
                                    nestedQuesHash.put(rootQ, rootArrayData.toString());
                                    indexQuesHash.put(rootQ, questionCount);
                                }
                                if (jsonobject.has("at")) {
                                    rootR = jsonobject.getString("at");
                                    currentObject = rootR;
                                }

                                if (jsonobject.has("a")) {
                                    rootA = jsonobject.getString("a");
                                }

                                if (jsonobject.has("last-updated")) {
                                    rootLastUpdate = jsonobject.getString("last-updated");
                                }

                                if (jsonobject.has("value")) {
                                    rootValue = jsonobject.getString("value");
                                }

                                if (jsonobject.has("mandatory")) {
                                    mandatory = jsonobject.getString("mandatory");
                                    if (mandatory != null && !mandatory.isEmpty() && mandatory.equalsIgnoreCase("y")) {
                                        SmarterSMBApplication.isCurrentQuesMandatory = true;
                                    } else {
                                        SmarterSMBApplication.isCurrentQuesMandatory = false;
                                    }
                                } else {
                                    SmarterSMBApplication.isCurrentQuesMandatory = false;
                                }

                                if (jsonobject.has("decision")) {
                                    decision = jsonobject.getString("decision");
                                    if (decision != null && !decision.isEmpty() && decision.equalsIgnoreCase("y")) {
                                        SmarterSMBApplication.isDecisionMakingQues = true;
                                        String currentSelectedVal = String.valueOf(questionAnswerHash.get(rootQ));
                                        if(currentSelectedVal != null && !currentSelectedVal.isEmpty()){
                                            SmarterSMBApplication.currentSelectedValue = currentSelectedVal;
                                        }
                                    } else {
                                        SmarterSMBApplication.isDecisionMakingQues = false;
                                    }
                                } else {
                                    SmarterSMBApplication.isDecisionMakingQues = false;
                                }

                                if (jsonobject.has("action_type")) {
                                    actionType = jsonobject.getString("action_type");
                                    actionTypeHash.put(rootQ, actionType);
                                }

                                if (jsonobject.has("title")) {
                                    titleText = jsonobject.getString("title");
                                }

                                if (jsonobject.has("hint")) {
                                    hintText = jsonobject.getString("hint");
                                }
                                if (jsonobject.has("dd_data")) {
                                    dropDownData = jsonobject.getString("dd_data");
                                    if (dropDownData != null && dropDownData.length() > 0) {
                                        dropDownHash.put(rootQ, dropDownData);
                                    }
                                }

                                if (jsonobject.has("sdd_data")) {
                                    searchableDropDownData = jsonobject.getString("sdd_data");
                                    if (searchableDropDownData != null && searchableDropDownData.length() > 0) {
                                        searchableDropDownHash.put(rootQ, searchableDropDownData);
                                    }
                                }
                                if (jsonobject.has("msdd_data")) {
                                    multiSelectionDropDownData = jsonobject.getString("msdd_data");
                                    if (multiSelectionDropDownData != null && multiSelectionDropDownData.length() > 0) {
                                        multiSelectionDropDownHash.put(rootQ, multiSelectionDropDownData);
                                    }
                                }

                                if (jsonobject.has("cb_data")) {
                                    checkboxData = jsonobject.getString("cb_data");
                                    if (checkboxData != null && checkboxData.length() > 0) {
                                        checkboxHash = new LinkedHashMap();
                                        checkboxHash = new LinkedHashMap();
                                        checkboxHash.put(rootQ, checkboxData);
                                    }
                                }

                                if (jsonobject.has("bt_data")) {
                                    buttonData = jsonobject.getString("bt_data");
                                    if (buttonData != null && buttonData.length() > 0) {
                                        buttonHash.put(rootQ, buttonData);
                                    }
                                }

                                if (jsonobject.has("rb_data")) {
                                    radiobuttonData = jsonobject.getString("rb_data");
                                    if (radiobuttonData != null && radiobuttonData.length() > 0) {
                                        radiobuttonHash.put(rootQ, radiobuttonData);
                                    }
                                }

                                if (jsonobject.has("status")) {
                                    status = jsonobject.getString("status");
                                    mmtStatus = status;
                                    ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                                }

                                if (jsonobject.has("min_value")) {
                                    min = Integer.parseInt(jsonobject.getString("min_value"));
                                }
                                if (jsonobject.has("max_value")) {
                                    max = Integer.parseInt(jsonobject.getString("max_value"));
                                }

                                if (jsonobject.has("max_yes")) {
                                    max_yes = Integer.parseInt(jsonobject.getString("max_yes"));
                                }

                                if (jsonobject.has("max_yes_action")) {
                                    max_yes_action = jsonobject.getString("max_yes_action");
                                }

                                if (jsonobject.has("cb_action")) {
                                    cb_action = jsonobject.getString("cb_action");
                                }

                                if (jsonobject.has("next_action")) {
                                    JSONObject nextActionObj = jsonobject.getJSONObject("next_action");
                                    if(nextActionObj != null &&  nextActionObj.has("post_url")){
                                        next_action = String.valueOf(nextActionObj.get("post_url"));
                                    }
                                } else {
                                    next_action = "";
                                }
                            }
                            questionnaireHash.put(rootQ, rootR);
                            if(tempQuesList != null && !tempQuesList.contains(rootQ)) {
                                tempQuesList.add(questionCount, rootQ);
                            }
                            tempQnAHash.put(rootQ, rootR);
                            if (titleText != null && !titleText.isEmpty()) {
                                titleQHash.put(rootQ, titleText);
                            }

                            if (rootR.equalsIgnoreCase("RT")) {
                                ratingsLayout();
                            } else if (rootR.equalsIgnoreCase("FT") || rootR.equalsIgnoreCase("EMAIL") || rootR.equalsIgnoreCase("BLANK")) {
                                freeTextLayout();
                                if(rootR.equalsIgnoreCase("FT")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "FT");
                                } else if(rootR.equalsIgnoreCase("EMAIL")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "EMAIL");
                                } else if(rootR.equalsIgnoreCase("BLANK")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "BLANK");
                                }
                            } else if (rootR.equalsIgnoreCase("CALLPM")){
                                callManagerLayout();
                            } else if (rootR.equalsIgnoreCase("DD")) {
                                dropDownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "DD");
                            } else if (rootR != null && rootR.equalsIgnoreCase("CB")) {
                                checkBoxLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "CB");
                            } else if (rootR.equalsIgnoreCase("BT")) {
                                buttonLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "BT");
                            } else if (rootR.equalsIgnoreCase("RB")) {
                                radiobuttonLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "RB");
                            } else if (rootR.equalsIgnoreCase("NP")) {
                                numberpickerLayout();
                            } else if (rootR.equalsIgnoreCase("YN")) {
                                yesNoLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "YN");
                            } else if (rootR.equalsIgnoreCase("DATETIME") || rootR.equalsIgnoreCase("DATE")) {
                                dateTimeLayout();
                            } else if (rootR.equalsIgnoreCase("FLP")) {
                                followUpLayout();
                            } else if (rootR.equalsIgnoreCase("FN") || rootR.equalsIgnoreCase("SMS")) {
                                freeNumberLayout();
                                if(rootR.equalsIgnoreCase("FN")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "FN");
                                } else if(rootR.equalsIgnoreCase("SMS")) {
                                    setSelectedAnswerForNextQuestionnaire(rootQ, "SMS");
                                }
                            } else if (rootR.equalsIgnoreCase("SDD")) {
                                searchableDropdownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "SDD");
                            } else if (rootR.equalsIgnoreCase("MSDD")) {
                                multiSelectionDropdownLayout();
                                setSelectedAnswerForNextQuestionnaire(rootQ, "MSDD");
                            } else if (rootR.equalsIgnoreCase("ATTACHMENT")) {
                                attachmentLayout();
                            }
                        } else {
                            thankYouLayout();
                        }
                    }
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
            if(previousButtonClicked) {

            } else {
                formStatus = "";
            }
        } else {
            try {
                if (rootArrayData != null) {
                    questionCount++;
                    if (rootArrayData.length() != questionCount) {
                        jsonobject = rootArrayData.getJSONObject(questionCount);
                        currentQuestionnaire = rootArrayData.toString();
                        if (jsonobject != null) {
                            if (jsonobject.has("q")) {
                                rootQ = jsonobject.getString("q");
                                nestedQuesHash.put(rootQ, rootArrayData.toString());
                                indexQuesHash.put(rootQ, questionCount);
                            }
                            if (jsonobject.has("at")) {
                                rootR = jsonobject.getString("at");
                                currentObject = rootR;
                            }

                            if (jsonobject.has("a")) {
                                rootA = jsonobject.getString("a");
                            }

                            if (jsonobject.has("last-updated")) {
                                rootLastUpdate = jsonobject.getString("last-updated");
                            }

                            if (jsonobject.has("value")) {
                                rootValue = jsonobject.getString("value");
                            }

                            if (jsonobject.has("mandatory")) {
                                mandatory = jsonobject.getString("mandatory");
                                if (mandatory != null && !mandatory.isEmpty() && mandatory.equalsIgnoreCase("y")) {
                                    SmarterSMBApplication.isCurrentQuesMandatory = true;
                                } else {
                                    SmarterSMBApplication.isCurrentQuesMandatory = false;
                                }
                            } else {
                                SmarterSMBApplication.isCurrentQuesMandatory = false;
                            }

                            if (jsonobject.has("decision")) {
                                decision = jsonobject.getString("decision");
                                if (decision != null && !decision.isEmpty() && decision.equalsIgnoreCase("y")) {
                                    SmarterSMBApplication.isDecisionMakingQues = true;
                                    String currentSelectedVal = String.valueOf(questionAnswerHash.get(rootQ));
                                    if(currentSelectedVal != null && !currentSelectedVal.isEmpty()){
                                        SmarterSMBApplication.currentSelectedValue = currentSelectedVal;
                                    }
                                } else {
                                    SmarterSMBApplication.isDecisionMakingQues = false;
                                }
                            } else {
                                SmarterSMBApplication.isDecisionMakingQues = false;
                            }

                            if (jsonobject.has("action_type")) {
                                actionType = jsonobject.getString("action_type");
                                actionTypeHash.put(rootQ, actionType);
                            }

                            if (jsonobject.has("title")) {
                                titleText = jsonobject.getString("title");
                            }

                            if (jsonobject.has("hint")) {
                                hintText = jsonobject.getString("hint");
                            }
                            if (jsonobject.has("dd_data")) {
                                dropDownData = jsonobject.getString("dd_data");
                                if (dropDownData != null && dropDownData.length() > 0) {
                                    dropDownHash.put(rootQ, dropDownData);
                                }
                            }

                            if (jsonobject.has("sdd_data")) {
                                searchableDropDownData = jsonobject.getString("sdd_data");
                                if (searchableDropDownData != null && searchableDropDownData.length() > 0) {
                                    searchableDropDownHash.put(rootQ, searchableDropDownData);
                                }
                            }
                            if (jsonobject.has("msdd_data")) {
                                multiSelectionDropDownData = jsonobject.getString("msdd_data");
                                if (multiSelectionDropDownData != null && multiSelectionDropDownData.length() > 0) {
                                    multiSelectionDropDownHash.put(rootQ, multiSelectionDropDownData);
                                }
                            }

                            if (jsonobject.has("cb_data")) {
                                checkboxData = jsonobject.getString("cb_data");
                                if (checkboxData != null && checkboxData.length() > 0) {
                                    checkboxHash = new LinkedHashMap();
                                    checkboxHash.put(rootQ, checkboxData);
                                }
                            }

                            if (jsonobject.has("bt_data")) {
                                buttonData = jsonobject.getString("bt_data");
                                if (buttonData != null && buttonData.length() > 0) {
                                    buttonHash.put(rootQ, buttonData);
                                }
                            }

                            if (jsonobject.has("rb_data")) {
                                radiobuttonData = jsonobject.getString("rb_data");
                                if (radiobuttonData != null && radiobuttonData.length() > 0) {
                                    radiobuttonHash.put(rootQ, radiobuttonData);
                                }
                            }

                            if (jsonobject.has("status")) {
                                status = jsonobject.getString("status");
                                mmtStatus = status;
                                ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                            }

                            if (jsonobject.has("min_value")) {
                                min = Integer.parseInt(jsonobject.getString("min_value"));
                            }
                            if (jsonobject.has("max_value")) {
                                max = Integer.parseInt(jsonobject.getString("max_value"));
                            }

                            if (jsonobject.has("max_yes")) {
                                max_yes = Integer.parseInt(jsonobject.getString("max_yes"));
                            }

                            if (jsonobject.has("max_yes_action")) {
                                max_yes_action = jsonobject.getString("max_yes_action");
                            }

                            if (jsonobject.has("cb_action")) {
                                cb_action = jsonobject.getString("cb_action");
                            }

                            if (jsonobject.has("next_action")) {
                                JSONObject nextActionObj = jsonobject.getJSONObject("next_action");
                                if(nextActionObj != null &&  nextActionObj.has("post_url")){
                                    next_action = String.valueOf(nextActionObj.get("post_url"));
                                }
                            } else {
                                next_action = "";
                            }

                            if (formStatus != null && !formStatus.isEmpty() && formStatus.equalsIgnoreCase("Y")) {
                                if (jsonobject.has("yes_action")) {
                                    JSONObject nextActionJSONObj = jsonobject.getJSONObject("yes_action");
                                    if (nextActionJSONObj != null) {

                                        String followUpToEmail = "";
                                        String followUpFromEmail = "";
                                        String followUpSource = "";
                                        String followUpSchedule = "";
                                        String followUpResponseStatus = "";

                                        if (nextActionJSONObj.has("followup_toemail")) {
                                            followUpToEmail = nextActionJSONObj.getString("followup_toemail");
                                        }
                                        if (nextActionJSONObj.has("followup_fromemail")) {
                                            followUpFromEmail = nextActionJSONObj.getString("followup_fromemail");
                                        }
                                        if (nextActionJSONObj.has("followup_source")) {
                                            followUpSource = nextActionJSONObj.getString("followup_source");
                                        }
                                        if (nextActionJSONObj.has("followup_schedule")) {
                                            followUpSchedule = nextActionJSONObj.getString("followup_schedule");
                                        }
                                        if (nextActionJSONObj.has("followup_responsestatus")) {
                                            followUpResponseStatus = nextActionJSONObj.getString("followup_responsestatus");
                                        }

                                        createAppointmentForIRCTC(followUpToEmail, followUpFromEmail, followUpSource, followUpSchedule, followUpResponseStatus);
                                    }
                                }
                            }
                        }
                        questionnaireHash.put(rootQ, rootR);
                        if(tempQuesList != null && !tempQuesList.contains(rootQ)) {
                            tempQuesList.add(questionCount, rootQ);
                        }
                        tempQnAHash.put(rootQ, rootR);
                        if (titleText != null && !titleText.isEmpty()) {
                            titleQHash.put(rootQ, titleText);
                        }

                        if (rootR.equalsIgnoreCase("RT")) {
                            ratingsLayout();
                        } else if (rootR.equalsIgnoreCase("FT") || rootR.equalsIgnoreCase("EMAIL") || rootR.equalsIgnoreCase("BLANK")) {
                            freeTextLayout();
                            if(rootR.equalsIgnoreCase("FT")) {
                                setSelectedAnswerForNextQuestionnaire(rootQ, "FT");
                            } else if(rootR.equalsIgnoreCase("EMAIL")) {
                                setSelectedAnswerForNextQuestionnaire(rootQ, "EMAIL");
                            } else if(rootR.equalsIgnoreCase("BLANK")) {
                                setSelectedAnswerForNextQuestionnaire(rootQ, "BLANK");
                            }
                        } else if (rootR.equalsIgnoreCase("CALLPM")){
                            callManagerLayout();
                        } else if (rootR.equalsIgnoreCase("DD")) {
                            dropDownLayout();
                            setSelectedAnswerForNextQuestionnaire(rootQ, "DD");
                        } else if (rootR != null && rootR.equalsIgnoreCase("CB")) {
                            checkBoxLayout();
                            setSelectedAnswerForNextQuestionnaire(rootQ, "CB");
                        } else if (rootR.equalsIgnoreCase("BT")) {
                            buttonLayout();
                            setSelectedAnswerForNextQuestionnaire(rootQ, "BT");
                        } else if (rootR.equalsIgnoreCase("RB")) {
                            radiobuttonLayout();
                            setSelectedAnswerForNextQuestionnaire(rootQ, "RB");
                        } else if (rootR.equalsIgnoreCase("NP")) {
                            numberpickerLayout();
                        } else if (rootR.equalsIgnoreCase("YN")) {
                            yesNoLayout();
                            setSelectedAnswerForNextQuestionnaire(rootQ, "YN");
                        } else if (rootR.equalsIgnoreCase("DATETIME") || rootR.equalsIgnoreCase("DATE")) {
                            dateTimeLayout();
                        } else if (rootR.equalsIgnoreCase("FLP")) {
                            followUpLayout();
                        } else if (rootR.equalsIgnoreCase("FN") || rootR.equalsIgnoreCase("SMS")) {
                            freeNumberLayout();
                            if(rootR.equalsIgnoreCase("FN")) {
                                setSelectedAnswerForNextQuestionnaire(rootQ, "FN");
                            } else if(rootR.equalsIgnoreCase("SMS")) {
                                setSelectedAnswerForNextQuestionnaire(rootQ, "SMS");
                            }
                        } else if (rootR.equalsIgnoreCase("SDD")) {
                            searchableDropdownLayout();
                            setSelectedAnswerForNextQuestionnaire(rootQ, "SDD");
                        } else if (rootR.equalsIgnoreCase("MSDD")) {
                            multiSelectionDropdownLayout();
                            setSelectedAnswerForNextQuestionnaire(rootQ, "MSDD");
                        } else if (rootR.equalsIgnoreCase("ATTACHMENT")) {
                            attachmentLayout();
                        }
                    } else {
                        thankYouLayout();
                    }
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
    }

    private void previousButtonAction() {
        previousButtonClicked = true;
        if (questionAnswerHash != null && !questionAnswerHash.containsKey(rootQ)) {
            if (tempQnAHash != null && tempQnAHash.size() > 0) {
                tempQnAHash.remove(rootQ);
            }
            if (tempQuesList != null && tempQuesList.size() > 0) {
                tempQuesList.remove(rootQ);
            }
        }
        JSONObject jsonobject = null;
        try {
            if (rootArrayData != null) {
                if (questionCount > 0) {
                    questionCount--;

                    if (rootArrayData.length() != questionCount) {
                        jsonobject = rootArrayData.getJSONObject(questionCount);
                        currentQuestionnaire = rootArrayData.toString();
                        if (jsonobject != null) {
                            if (jsonobject.has("q")) {
                                rootQ = jsonobject.getString("q");
                                nestedQuesHash.put(rootQ, rootArrayData.toString());
                                indexQuesHash.put(rootQ, questionCount);
                            }
                            if (jsonobject.has("at")) {
                                rootR = jsonobject.getString("at");
                                currentObject = rootR;
                            }

                            if (jsonobject.has("a")) {
                                rootA = jsonobject.getString("a");
                            }

                            if (jsonobject.has("last-updated")) {
                                rootLastUpdate = jsonobject.getString("last-updated");
                            }

                            if (jsonobject.has("value")) {
                                rootValue = jsonobject.getString("value");
                            }

                            if (jsonobject.has("mandatory")) {
                                mandatory = jsonobject.getString("mandatory");
                                if (mandatory != null && !mandatory.isEmpty() && mandatory.equalsIgnoreCase("y")) {
                                    SmarterSMBApplication.isCurrentQuesMandatory = true;
                                } else {
                                    SmarterSMBApplication.isCurrentQuesMandatory = false;
                                }
                            } else {
                                SmarterSMBApplication.isCurrentQuesMandatory = false;
                            }

                            if (jsonobject.has("decision")) {
                                decision = jsonobject.getString("decision");
                                if (decision != null && !decision.isEmpty() && decision.equalsIgnoreCase("y")) {
                                    SmarterSMBApplication.isDecisionMakingQues = true;
                                    String currentSelectedVal = String.valueOf(questionAnswerHash.get(rootQ));
                                    if(currentSelectedVal != null && !currentSelectedVal.isEmpty()){
                                        SmarterSMBApplication.currentSelectedValue = currentSelectedVal;
                                    }
                                } else {
                                    SmarterSMBApplication.isDecisionMakingQues = false;
                                }
                            } else {
                                SmarterSMBApplication.isDecisionMakingQues = false;
                            }

                            if (jsonobject.has("action_type")) {
                                actionType = jsonobject.getString("action_type");
                                actionTypeHash.put(rootQ, actionType);
                            }

                            if (jsonobject.has("title")) {
                                titleText = jsonobject.getString("title");
                            }

                            if (jsonobject.has("hint")) {
                                hintText = jsonobject.getString("hint");
                            }
                            if (jsonobject.has("dd_data")) {
                                dropDownData = jsonobject.getString("dd_data");
                                if (dropDownData != null && dropDownData.length() > 0) {
                                    dropDownHash.put(rootQ, dropDownData);
                                }
                            }

                            if (jsonobject.has("sdd_data")) {
                                searchableDropDownData = jsonobject.getString("sdd_data");
                                if (searchableDropDownData != null && searchableDropDownData.length() > 0) {
                                    searchableDropDownHash.put(rootQ, searchableDropDownData);
                                }
                            }
                            if (jsonobject.has("msdd_data")) {
                                multiSelectionDropDownData = jsonobject.getString("msdd_data");
                                if (multiSelectionDropDownData != null && multiSelectionDropDownData.length() > 0) {
                                    multiSelectionDropDownHash.put(rootQ, multiSelectionDropDownData);
                                }
                            }

                            if (jsonobject.has("cb_data")) {
                                checkboxData = jsonobject.getString("cb_data");
                                if (checkboxData != null && checkboxData.length() > 0) {
                                    checkboxHash = new LinkedHashMap();
                                    checkboxHash.put(rootQ, checkboxData);
                                }
                            }

                            if (jsonobject.has("bt_data")) {
                                buttonData = jsonobject.getString("bt_data");
                                if (buttonData != null && buttonData.length() > 0) {
                                    buttonHash.put(rootQ, buttonData);
                                }
                            }

                            if (jsonobject.has("rb_data")) {
                                radiobuttonData = jsonobject.getString("rb_data");
                                if (radiobuttonData != null && radiobuttonData.length() > 0) {
                                    radiobuttonHash.put(rootQ, radiobuttonData);
                                }
                            }

                            if (jsonobject.has("status")) {
                                status = jsonobject.getString("status");
                                mmtStatus = status;
                                ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                            }

                            if (jsonobject.has("min_value")) {
                                min = Integer.parseInt(jsonobject.getString("min_value"));
                            }
                            if (jsonobject.has("max_value")) {
                                max = Integer.parseInt(jsonobject.getString("max_value"));
                            }

                            if (jsonobject.has("max_yes")) {
                                max_yes = Integer.parseInt(jsonobject.getString("max_yes"));
                            }

                            if (jsonobject.has("max_yes_action")) {
                                max_yes_action = jsonobject.getString("max_yes_action");
                            }

                            if (jsonobject.has("cb_action")) {
                                cb_action = jsonobject.getString("cb_action");
                            }

                            if (jsonobject.has("next_action")) {
                                JSONObject nextActionObj = jsonobject.getJSONObject("next_action");
                                if(nextActionObj != null &&  nextActionObj.has("post_url")){
                                    next_action = String.valueOf(nextActionObj.get("post_url"));
                                }
                            } else {
                                next_action = "";
                            }

                            if (formStatus != null && !formStatus.isEmpty() && formStatus.equalsIgnoreCase("Y")) {
                                if (jsonobject.has("yes_action")) {
                                    JSONObject nextActionJSONObj = jsonobject.getJSONObject("yes_action");
                                    if (nextActionJSONObj != null) {

                                        String followUpToEmail = "";
                                        String followUpFromEmail = "";
                                        String followUpSource = "";
                                        String followUpSchedule = "";
                                        String followUpResponseStatus = "";

                                        if (nextActionJSONObj.has("followup_toemail")) {
                                            followUpToEmail = nextActionJSONObj.getString("followup_toemail");
                                        }
                                        if (nextActionJSONObj.has("followup_fromemail")) {
                                            followUpFromEmail = nextActionJSONObj.getString("followup_fromemail");
                                        }
                                        if (nextActionJSONObj.has("followup_source")) {
                                            followUpSource = nextActionJSONObj.getString("followup_source");
                                        }
                                        if (nextActionJSONObj.has("followup_schedule")) {
                                            followUpSchedule = nextActionJSONObj.getString("followup_schedule");
                                        }
                                        if (nextActionJSONObj.has("followup_responsestatus")) {
                                            followUpResponseStatus = nextActionJSONObj.getString("followup_responsestatus");
                                        }

                                        createAppointmentForIRCTC(followUpToEmail, followUpFromEmail, followUpSource, followUpSchedule, followUpResponseStatus);
                                    }
                                }
                            }
                        }
                        questionnaireHash.put(rootQ, rootR);
                        if(tempQuesList != null && !tempQuesList.contains(rootQ)) {
                            tempQuesList.add(questionCount, rootQ);
                        }
                        tempQnAHash.put(rootQ, rootR);
                        if (titleText != null && !titleText.isEmpty()) {
                            titleQHash.put(rootQ, titleText);
                        }

                        if (rootR.equalsIgnoreCase("RT")) {
                            ratingsLayout();
                        } else if (rootR.equalsIgnoreCase("FT") || rootR.equalsIgnoreCase("EMAIL") || rootR.equalsIgnoreCase("BLANK")) {
                            freeTextLayout();
                            if(rootR.equalsIgnoreCase("FT")) {
                                setSelectedAnswerForPreviousQuestionnaire(rootQ, "FT");
                            } else if(rootR.equalsIgnoreCase("EMAIL")) {
                                setSelectedAnswerForPreviousQuestionnaire(rootQ, "EMAIL");
                            } else if(rootR.equalsIgnoreCase("BLANK")) {
                                setSelectedAnswerForPreviousQuestionnaire(rootQ, "BLANK");
                            }
                        } else if (rootR.equalsIgnoreCase("CALLPM")) {
                            callManagerLayout();
                        } else if (rootR.equalsIgnoreCase("DD")) {
                            dropDownLayout();
                            setSelectedAnswerForPreviousQuestionnaire(rootQ, "DD");
                        } else if (rootR != null && rootR.equalsIgnoreCase("CB")) {
                            checkBoxLayout();
                            setSelectedAnswerForPreviousQuestionnaire(rootQ, "CB");
                        } else if (rootR.equalsIgnoreCase("BT")) {
                            buttonLayout();
                            setSelectedAnswerForPreviousQuestionnaire(rootQ, "BT");
                        } else if (rootR.equalsIgnoreCase("RB")) {
                            radiobuttonLayout();
                            setSelectedAnswerForPreviousQuestionnaire(rootQ, "RB");
                        } else if (rootR.equalsIgnoreCase("NP")) {
                            numberpickerLayout();
                        } else if (rootR.equalsIgnoreCase("YN")) {
                            yesNoLayout();
                            setSelectedAnswerForPreviousQuestionnaire(rootQ, "YN");
                        } else if (rootR.equalsIgnoreCase("DATETIME") || rootR.equalsIgnoreCase("DATE")) {
                            dateTimeLayout();
                        } else if (rootR.equalsIgnoreCase("FLP")) {
                            followUpLayout();
                        } else if (rootR.equalsIgnoreCase("FN") || rootR.equalsIgnoreCase("SMS")) {
                            freeNumberLayout();
                            if(rootR.equalsIgnoreCase("FN")) {
                                setSelectedAnswerForPreviousQuestionnaire(rootQ, "FN");
                            } else if(rootR.equalsIgnoreCase("SMS")) {
                                setSelectedAnswerForPreviousQuestionnaire(rootQ, "SMS");
                            }
                        } else if (rootR.equalsIgnoreCase("SDD")) {
                            searchableDropdownLayout();
                            setSelectedAnswerForPreviousQuestionnaire(rootQ, "SDD");
                        } else if (rootR.equalsIgnoreCase("MSDD")) {
                            multiSelectionDropdownLayout();
                            setSelectedAnswerForPreviousQuestionnaire(rootQ, "MSDD");
                        } else if (rootR.equalsIgnoreCase("ATTACHMENT")) {
                            attachmentLayout();
                        }
                    } else {
                        thankYouLayout();
                    }
                } else if (decisionArrayList != null && decisionArrayList.size() > 0) {
                    int position = decisionArrayList.size() - 1;

                    if (position < 0) {
                        position = 0;
                    }

                    String data = decisionArrayList.get(position);
                    if(data != null && !data.isEmpty() && data.startsWith("[")) {
                        rootArrayData = new JSONArray(data);
                    }

                    decisionArrayList.remove(position);

                    if (position > 0) {
                        position = position - 1;
                    } else if (position == 0) {
                        rootArrayData = rootArrayDataOrg;
                    }

                    if(data != null && !data.isEmpty() && data.startsWith("[")) {
                        jsonobject = rootArrayData.getJSONObject(position);
                    } else if(data != null && !data.isEmpty() && data.startsWith("{")) {
                        jsonobject = new JSONObject(data);
                    }

                    if (jsonobject != null) {
                        if (jsonobject.has("q")) {
                            rootQ = jsonobject.getString("q");
                        }
                        if (jsonobject.has("at")) {
                            rootR = jsonobject.getString("at");
                            currentObject = rootR;
                        }

                        if (jsonobject.has("a")) {
                            rootA = jsonobject.getString("a");
                        }

                        if (jsonobject.has("last-updated")) {
                            rootLastUpdate = jsonobject.getString("last-updated");
                        }

                        if (jsonobject.has("value")) {
                            rootValue = jsonobject.getString("value");
                        }

                        if (jsonobject.has("mandatory")) {
                            mandatory = jsonobject.getString("mandatory");
                            if (mandatory != null && !mandatory.isEmpty() && mandatory.equalsIgnoreCase("y")) {
                                SmarterSMBApplication.isCurrentQuesMandatory = true;
                            } else {
                                SmarterSMBApplication.isCurrentQuesMandatory = false;
                            }
                        } else {
                            SmarterSMBApplication.isCurrentQuesMandatory = false;
                        }

                        if (jsonobject.has("decision")) {
                            decision = jsonobject.getString("decision");
                            if (decision != null && !decision.isEmpty() && decision.equalsIgnoreCase("y")) {
                                SmarterSMBApplication.isDecisionMakingQues = true;
                                String currentSelectedVal = String.valueOf(questionAnswerHash.get(rootQ));
                                if(currentSelectedVal != null && !currentSelectedVal.isEmpty()){
                                    SmarterSMBApplication.currentSelectedValue = currentSelectedVal;
                                }
                            } else {
                                SmarterSMBApplication.isDecisionMakingQues = false;
                            }
                        } else {
                            SmarterSMBApplication.isDecisionMakingQues = false;
                        }

                        if (jsonobject.has("action_type")) {
                            actionType = jsonobject.getString("action_type");
                            actionTypeHash.put(rootQ, actionType);
                        }

                        if (jsonobject.has("title")) {
                            titleText = jsonobject.getString("title");
                        }

                        if (jsonobject.has("hint")) {
                            hintText = jsonobject.getString("hint");
                        }
                        if (jsonobject.has("dd_data")) {
                            dropDownData = jsonobject.getString("dd_data");
                            if (dropDownData != null && dropDownData.length() > 0) {
                                dropDownHash.put(rootQ, dropDownData);
                            }
                        }

                        if (jsonobject.has("sdd_data")) {
                            searchableDropDownData = jsonobject.getString("sdd_data");
                            if (searchableDropDownData != null && searchableDropDownData.length() > 0) {
                                searchableDropDownHash.put(rootQ, searchableDropDownData);
                            }
                        }
                        if (jsonobject.has("msdd_data")) {
                            multiSelectionDropDownData = jsonobject.getString("msdd_data");
                            if (multiSelectionDropDownData != null && multiSelectionDropDownData.length() > 0) {
                                multiSelectionDropDownHash.put(rootQ, multiSelectionDropDownData);
                            }
                        }

                        if (jsonobject.has("cb_data")) {
                            checkboxData = jsonobject.getString("cb_data");
                            if (checkboxData != null && checkboxData.length() > 0) {
                                checkboxHash = new LinkedHashMap();
                                checkboxHash.put(rootQ, checkboxData);
                            }
                        }

                        if (jsonobject.has("bt_data")) {
                            buttonData = jsonobject.getString("bt_data");
                            if (buttonData != null && buttonData.length() > 0) {
                                buttonHash.put(rootQ, buttonData);
                            }
                        }

                        if (jsonobject.has("rb_data")) {
                            radiobuttonData = jsonobject.getString("rb_data");
                            if (radiobuttonData != null && radiobuttonData.length() > 0) {
                                radiobuttonHash.put(rootQ, radiobuttonData);
                            }
                        }

                        if (jsonobject.has("status")) {
                            status = jsonobject.getString("status");
                            mmtStatus = status;
                            ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                        }

                        if (jsonobject.has("min_value")) {
                            min = Integer.parseInt(jsonobject.getString("min_value"));
                        }
                        if (jsonobject.has("max_value")) {
                            max = Integer.parseInt(jsonobject.getString("max_value"));
                        }

                        if (jsonobject.has("max_yes")) {
                            max_yes = Integer.parseInt(jsonobject.getString("max_yes"));
                        }

                        if (jsonobject.has("max_yes_action")) {
                            max_yes_action = jsonobject.getString("max_yes_action");
                        }

                        if (jsonobject.has("cb_action")) {
                            cb_action = jsonobject.getString("cb_action");
                        }

                        if (jsonobject.has("next_action")) {
                            JSONObject nextActionObj = jsonobject.getJSONObject("next_action");
                            if(nextActionObj != null &&  nextActionObj.has("post_url")){
                                next_action = String.valueOf(nextActionObj.get("post_url"));
                            }
                        } else {
                            next_action = "";
                        }

                        if (formStatus != null && !formStatus.isEmpty() && formStatus.equalsIgnoreCase("Y")) {
                            if (jsonobject.has("yes_action")) {
                                JSONObject nextActionJSONObj = jsonobject.getJSONObject("yes_action");
                                if (nextActionJSONObj != null) {

                                    String followUpToEmail = "";
                                    String followUpFromEmail = "";
                                    String followUpSource = "";
                                    String followUpSchedule = "";
                                    String followUpResponseStatus = "";

                                    if (nextActionJSONObj.has("followup_toemail")) {
                                        followUpToEmail = nextActionJSONObj.getString("followup_toemail");
                                    }
                                    if (nextActionJSONObj.has("followup_fromemail")) {
                                        followUpFromEmail = nextActionJSONObj.getString("followup_fromemail");
                                    }
                                    if (nextActionJSONObj.has("followup_source")) {
                                        followUpSource = nextActionJSONObj.getString("followup_source");
                                    }
                                    if (nextActionJSONObj.has("followup_schedule")) {
                                        followUpSchedule = nextActionJSONObj.getString("followup_schedule");
                                    }
                                    if (nextActionJSONObj.has("followup_responsestatus")) {
                                        followUpResponseStatus = nextActionJSONObj.getString("followup_responsestatus");
                                    }

                                    createAppointmentForIRCTC(followUpToEmail, followUpFromEmail, followUpSource, followUpSchedule, followUpResponseStatus);
                                }
                            }
                        }
                    }
                    questionnaireHash.put(rootQ, rootR);
                    if(tempQuesList != null && !tempQuesList.contains(rootQ)) {
                        tempQuesList.add(questionCount, rootQ);
                    }
                    tempQnAHash.put(rootQ, rootR);
                    if (titleText != null && !titleText.isEmpty()) {
                        titleQHash.put(rootQ, titleText);
                    }

                    if (rootR.equalsIgnoreCase("RT")) {
                        ratingsLayout();
                    } else if (rootR.equalsIgnoreCase("FT") || rootR.equalsIgnoreCase("EMAIL") || rootR.equalsIgnoreCase("BLANK")) {
                        freeTextLayout();
                        if (rootR.equalsIgnoreCase("FT")) {
                            setSelectedAnswerForPreviousQuestionnaire(rootQ, "FT");
                        } else if (rootR.equalsIgnoreCase("EMAIL")) {
                            setSelectedAnswerForPreviousQuestionnaire(rootQ, "EMAIL");
                        } else if (rootR.equalsIgnoreCase("BLANK")) {
                            setSelectedAnswerForPreviousQuestionnaire(rootQ, "BLANK");
                        }
                    } else if (rootR.equalsIgnoreCase("CALLPM")) {
                        callManagerLayout();
                    } else if (rootR.equalsIgnoreCase("DD")) {
                        dropDownLayout();
                        setSelectedAnswerForPreviousQuestionnaire(rootQ, "DD");
                    } else if (rootR != null && rootR.equalsIgnoreCase("CB")) {
                        checkBoxLayout();
                        setSelectedAnswerForPreviousQuestionnaire(rootQ, "CB");
                    } else if (rootR.equalsIgnoreCase("BT")) {
                        buttonLayout();
                        setSelectedAnswerForPreviousQuestionnaire(rootQ, "BT");
                    } else if (rootR.equalsIgnoreCase("RB")) {
                        radiobuttonLayout();
                        setSelectedAnswerForPreviousQuestionnaire(rootQ, "RB");
                    } else if (rootR.equalsIgnoreCase("NP")) {
                        numberpickerLayout();
                    } else if (rootR.equalsIgnoreCase("YN")) {
                        yesNoLayout();
                        setSelectedAnswerForPreviousQuestionnaire(rootQ, "YN");
                    } else if (rootR.equalsIgnoreCase("DATETIME") || rootR.equalsIgnoreCase("DATE")) {
                        dateTimeLayout();
                    } else if (rootR.equalsIgnoreCase("FLP")) {
                        followUpLayout();
                    } else if (rootR.equalsIgnoreCase("FN") || rootR.equalsIgnoreCase("SMS")) {
                        freeNumberLayout();
                        if (rootR.equalsIgnoreCase("FN")) {
                            setSelectedAnswerForPreviousQuestionnaire(rootQ, "FN");
                        } else if (rootR.equalsIgnoreCase("SMS")) {
                            setSelectedAnswerForPreviousQuestionnaire(rootQ, "SMS");
                        }
                    } else if (rootR.equalsIgnoreCase("SDD")) {
                        searchableDropdownLayout();
                        setSelectedAnswerForPreviousQuestionnaire(rootQ, "SDD");
                    } else if (rootR.equalsIgnoreCase("MSDD")) {
                        multiSelectionDropdownLayout();
                        setSelectedAnswerForPreviousQuestionnaire(rootQ, "MSDD");
                    } else if (rootR.equalsIgnoreCase("ATTACHMENT")) {
                        attachmentLayout();
                    }
                } else {
                    rootArrayData = rootArrayDataOrg;
                    jsonobject = rootArrayData.getJSONObject(0);

                    if (jsonobject != null) {
                        if (jsonobject.has("q")) {
                            rootQ = jsonobject.getString("q");
                        }
                        if (jsonobject.has("at")) {
                            rootR = jsonobject.getString("at");
                            currentObject = rootR;
                        }

                        if (jsonobject.has("a")) {
                            rootA = jsonobject.getString("a");
                        }

                        if (jsonobject.has("last-updated")) {
                            rootLastUpdate = jsonobject.getString("last-updated");
                        }

                        if (jsonobject.has("value")) {
                            rootValue = jsonobject.getString("value");
                        }

                        if (jsonobject.has("mandatory")) {
                            mandatory = jsonobject.getString("mandatory");
                            if (mandatory != null && !mandatory.isEmpty() && mandatory.equalsIgnoreCase("y")) {
                                SmarterSMBApplication.isCurrentQuesMandatory = true;
                            } else {
                                SmarterSMBApplication.isCurrentQuesMandatory = false;
                            }
                        } else {
                            SmarterSMBApplication.isCurrentQuesMandatory = false;
                        }

                        if (jsonobject.has("decision")) {
                            decision = jsonobject.getString("decision");
                            if (decision != null && !decision.isEmpty() && decision.equalsIgnoreCase("y")) {
                                SmarterSMBApplication.isDecisionMakingQues = true;
                                String currentSelectedVal = String.valueOf(questionAnswerHash.get(rootQ));
                                if(currentSelectedVal != null && !currentSelectedVal.isEmpty()){
                                    SmarterSMBApplication.currentSelectedValue = currentSelectedVal;
                                }
                            } else {
                                SmarterSMBApplication.isDecisionMakingQues = false;
                            }
                        } else {
                            SmarterSMBApplication.isDecisionMakingQues = false;
                        }

                        if (jsonobject.has("action_type")) {
                            actionType = jsonobject.getString("action_type");
                            actionTypeHash.put(rootQ, actionType);
                        }

                        if (jsonobject.has("title")) {
                            titleText = jsonobject.getString("title");
                        }

                        if (jsonobject.has("hint")) {
                            hintText = jsonobject.getString("hint");
                        }
                        if (jsonobject.has("dd_data")) {
                            dropDownData = jsonobject.getString("dd_data");
                            if (dropDownData != null && dropDownData.length() > 0) {
                                dropDownHash.put(rootQ, dropDownData);
                            }
                        }

                        if (jsonobject.has("sdd_data")) {
                            searchableDropDownData = jsonobject.getString("sdd_data");
                            if (searchableDropDownData != null && searchableDropDownData.length() > 0) {
                                searchableDropDownHash.put(rootQ, searchableDropDownData);
                            }
                        }
                        if (jsonobject.has("msdd_data")) {
                            multiSelectionDropDownData = jsonobject.getString("msdd_data");
                            if (multiSelectionDropDownData != null && multiSelectionDropDownData.length() > 0) {
                                multiSelectionDropDownHash.put(rootQ, multiSelectionDropDownData);
                            }
                        }

                        if (jsonobject.has("cb_data")) {
                            checkboxData = jsonobject.getString("cb_data");
                            if (checkboxData != null && checkboxData.length() > 0) {
                                checkboxHash = new LinkedHashMap();
                                checkboxHash.put(rootQ, checkboxData);
                            }
                        }

                        if (jsonobject.has("bt_data")) {
                            buttonData = jsonobject.getString("bt_data");
                            if (buttonData != null && buttonData.length() > 0) {
                                buttonHash.put(rootQ, buttonData);
                            }
                        }

                        if (jsonobject.has("rb_data")) {
                            radiobuttonData = jsonobject.getString("rb_data");
                            if (radiobuttonData != null && radiobuttonData.length() > 0) {
                                radiobuttonHash.put(rootQ, radiobuttonData);
                            }
                        }

                        if (jsonobject.has("status")) {
                            status = jsonobject.getString("status");
                            mmtStatus = status;
                            ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                        }

                        if (jsonobject.has("min_value")) {
                            min = Integer.parseInt(jsonobject.getString("min_value"));
                        }
                        if (jsonobject.has("max_value")) {
                            max = Integer.parseInt(jsonobject.getString("max_value"));
                        }

                        if (jsonobject.has("max_yes")) {
                            max_yes = Integer.parseInt(jsonobject.getString("max_yes"));
                        }

                        if (jsonobject.has("max_yes_action")) {
                            max_yes_action = jsonobject.getString("max_yes_action");
                        }

                        if (jsonobject.has("cb_action")) {
                            cb_action = jsonobject.getString("cb_action");
                        }

                        if (jsonobject.has("next_action")) {
                            JSONObject nextActionObj = jsonobject.getJSONObject("next_action");
                            if(nextActionObj != null &&  nextActionObj.has("post_url")){
                                next_action = String.valueOf(nextActionObj.get("post_url"));
                            }
                        } else {
                            next_action = "";
                        }

                        if (formStatus != null && !formStatus.isEmpty() && formStatus.equalsIgnoreCase("Y")) {
                            if (jsonobject.has("yes_action")) {
                                JSONObject nextActionJSONObj = jsonobject.getJSONObject("yes_action");
                                if (nextActionJSONObj != null) {

                                    String followUpToEmail = "";
                                    String followUpFromEmail = "";
                                    String followUpSource = "";
                                    String followUpSchedule = "";
                                    String followUpResponseStatus = "";

                                    if (nextActionJSONObj.has("followup_toemail")) {
                                        followUpToEmail = nextActionJSONObj.getString("followup_toemail");
                                    }
                                    if (nextActionJSONObj.has("followup_fromemail")) {
                                        followUpFromEmail = nextActionJSONObj.getString("followup_fromemail");
                                    }
                                    if (nextActionJSONObj.has("followup_source")) {
                                        followUpSource = nextActionJSONObj.getString("followup_source");
                                    }
                                    if (nextActionJSONObj.has("followup_schedule")) {
                                        followUpSchedule = nextActionJSONObj.getString("followup_schedule");
                                    }
                                    if (nextActionJSONObj.has("followup_responsestatus")) {
                                        followUpResponseStatus = nextActionJSONObj.getString("followup_responsestatus");
                                    }

                                    createAppointmentForIRCTC(followUpToEmail, followUpFromEmail, followUpSource, followUpSchedule, followUpResponseStatus);
                                }
                            }
                        }
                    }
                    questionnaireHash.put(rootQ, rootR);
                    if(tempQuesList != null && !tempQuesList.contains(rootQ)) {
                        tempQuesList.add(questionCount, rootQ);
                    }
                    tempQnAHash.put(rootQ, rootR);
                    if (titleText != null && !titleText.isEmpty()) {
                        titleQHash.put(rootQ, titleText);
                    }

                    if (rootR.equalsIgnoreCase("RT")) {
                        ratingsLayout();
                    } else if (rootR.equalsIgnoreCase("FT") || rootR.equalsIgnoreCase("EMAIL") || rootR.equalsIgnoreCase("BLANK")) {
                        freeTextLayout();
                        if (rootR.equalsIgnoreCase("FT")) {
                            setSelectedAnswerForPreviousQuestionnaire(rootQ, "FT");
                        } else if (rootR.equalsIgnoreCase("EMAIL")) {
                            setSelectedAnswerForPreviousQuestionnaire(rootQ, "EMAIL");
                        } else if (rootR.equalsIgnoreCase("BLANK")) {
                            setSelectedAnswerForPreviousQuestionnaire(rootQ, "BLANK");
                        }
                    } else if (rootR.equalsIgnoreCase("CALLPM")) {
                        callManagerLayout();
                    } else if (rootR.equalsIgnoreCase("DD")) {
                        dropDownLayout();
                        setSelectedAnswerForPreviousQuestionnaire(rootQ, "DD");
                    } else if (rootR != null && rootR.equalsIgnoreCase("CB")) {
                        checkBoxLayout();
                        setSelectedAnswerForPreviousQuestionnaire(rootQ, "CB");
                    } else if (rootR.equalsIgnoreCase("BT")) {
                        buttonLayout();
                        setSelectedAnswerForPreviousQuestionnaire(rootQ, "BT");
                    } else if (rootR.equalsIgnoreCase("RB")) {
                        radiobuttonLayout();
                        setSelectedAnswerForPreviousQuestionnaire(rootQ, "RB");
                    } else if (rootR.equalsIgnoreCase("NP")) {
                        numberpickerLayout();
                    } else if (rootR.equalsIgnoreCase("YN")) {
                        yesNoLayout();
                        setSelectedAnswerForPreviousQuestionnaire(rootQ, "YN");
                    } else if (rootR.equalsIgnoreCase("DATETIME") || rootR.equalsIgnoreCase("DATE")) {
                        dateTimeLayout();
                    } else if (rootR.equalsIgnoreCase("FLP")) {
                        followUpLayout();
                    } else if (rootR.equalsIgnoreCase("FN") || rootR.equalsIgnoreCase("SMS")) {
                        freeNumberLayout();
                        if (rootR.equalsIgnoreCase("FN")) {
                            setSelectedAnswerForPreviousQuestionnaire(rootQ, "FN");
                        } else if (rootR.equalsIgnoreCase("SMS")) {
                            setSelectedAnswerForPreviousQuestionnaire(rootQ, "SMS");
                        }
                    } else if (rootR.equalsIgnoreCase("SDD")) {
                        searchableDropdownLayout();
                        setSelectedAnswerForPreviousQuestionnaire(rootQ, "SDD");
                    } else if (rootR.equalsIgnoreCase("MSDD")) {
                        multiSelectionDropdownLayout();
                        setSelectedAnswerForPreviousQuestionnaire(rootQ, "MSDD");
                    } else if (rootR.equalsIgnoreCase("ATTACHMENT")) {
                        attachmentLayout();
                    }

                }
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    private void updateCustomKVS() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            customkvsText.evaluateJavascript(
                    "(function() { return ('<html>'+document.getElementsByTagName('html')[0].innerHTML+'</html>'); })();",
                    new ValueCallback<String>() {
                        @Override
                        public void onReceiveValue(String html) {
                            String result = removeUTFCharacters(html).toString();
                            if(result != null && !result.isEmpty()) {
                                NotificationData.updatedCustomKVS = result;
                            }
                        }
                    });
        }
    }

    public static StringBuffer removeUTFCharacters(String data){
        Pattern p = Pattern.compile("\\\\u(\\p{XDigit}{4})");
        Matcher m = p.matcher(data);
        StringBuffer buf = new StringBuffer(data.length());
        while (m.find()) {
            String ch = String.valueOf((char) Integer.parseInt(m.group(1), 16));
            m.appendReplacement(buf, Matcher.quoteReplacement(ch));
        }
        m.appendTail(buf);
        return buf;
    }

    private void createAppointmentForIRCTC(final String followUpToEmail, final String followUpFromEmail, final String followUpSource, final String followUpSchedule, final String followUpResponseStatus) {

        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db = dbHelper.getWritableDatabase();

        final long start_time = System.currentTimeMillis();
        final long end_time = (start_time + (60 * 60 * 1000));

        String email = SmarterSMBApplication.SmartUser.getEmail();
        String customerNumber = NotificationData.dialledCustomerNumber;
        final String customerName = getCallerName(customerNumber);

        ContentValues cv = new ContentValues();

        if (followUpSchedule != null && !followUpSchedule.isEmpty()) {
            cv.put("START_TIME", followUpSchedule);
            cv.put("END_TIME", followUpSchedule);
            cv.put("CREATED_AT", followUpSchedule);
            cv.put("UPDATED_AT", followUpSchedule);
        } else {
            cv.put("START_TIME", start_time);
            cv.put("END_TIME", end_time);
            cv.put("CREATED_AT", start_time);
            cv.put("UPDATED_AT", start_time);
        }

        cv.put("STATUS", "NEW DATA");
        cv.put("TO1", customerNumber);
        cv.put("TONAME", customerName);

        if (followUpResponseStatus != null && !followUpResponseStatus.isEmpty()) {
            cv.put("RESPONSE_STATUS", followUpResponseStatus);
        } else {
            cv.put("RESPONSE_STATUS", "accepted");
        }

        cv.put("UPLOAD_STATUS", 0);
        cv.put("COMPLETED", 1);
        cv.put("APPOINTMENT_TYPE", "update_appointment");

        cv.put("ORDER_POTENTIAL", "");

        if (followUpToEmail != null && !followUpToEmail.isEmpty()) {
            cv.put("ASSIGN_TO", followUpToEmail);
        } else {
            cv.put("ASSIGN_TO", email);
        }

        if (followUpFromEmail != null && !followUpFromEmail.isEmpty()) {
            cv.put("FROM", followUpFromEmail);
        } else {
            cv.put("FROM", email);
        }

        cv.put("LEAD_SOURCE", followUpSource);
        db.insert("remindertbNew", null, cv);

        if (db != null && db.isOpen()) {
            db.close();
        }
        if (dbHelper != null)
            dbHelper.close();

        new Thread() {
            @Override
            public void run() {
                Date startDate = new Date();
                startDate.setTime(start_time);
                String event_start_time = CommonUtils.getTimeFormatInISO(startDate);

                Date endDate = new Date();
                endDate.setTime(end_time);
                String event_end_time = CommonUtils.getTimeFormatInISO(endDate);

                GetCalendarEntryInfo getCalendarEntryInfo = new GetCalendarEntryInfo();

                if (followUpSchedule != null && !followUpSchedule.isEmpty()) {
                    getCalendarEntryInfo.setEvent_start_date(followUpSchedule);
                    getCalendarEntryInfo.setEvent_end_date(followUpSchedule);
                } else {
                    getCalendarEntryInfo.setEvent_start_date(event_start_time);
                    getCalendarEntryInfo.setEvent_end_date(event_end_time);
                }

                getCalendarEntryInfo.setCaller_number(NotificationData.dialledCustomerNumber);
                getCalendarEntryInfo.setCaller_name(customerName);

                String email = SmarterSMBApplication.SmartUser.getEmail();

                if (followUpToEmail != null && !followUpToEmail.isEmpty()) {
                    getCalendarEntryInfo.assign_to = followUpToEmail;
                } else {
                    getCalendarEntryInfo.assign_to = email;
                }

                if (followUpFromEmail != null && !followUpFromEmail.isEmpty()) {
                    getCalendarEntryInfo.from = followUpFromEmail;
                } else {
                    getCalendarEntryInfo.from = email;
                }

                getCalendarEntryInfo.setLead_source(followUpSource);
                getCalendarEntryInfo.setStatus("NEW DATA");
                getCalendarEntryInfo.setLatitude(String.valueOf(0));
                getCalendarEntryInfo.setLongitude(String.valueOf(0));

                if (CommonUtils.isNetworkAvailable(getApplicationContext())) {
                    JSONObject calendarJson = JSONParser.getnewJsonObjFromCalendar(getCalendarEntryInfo);
                    JSONObject responsejsonObject = null;

                    responsejsonObject = DataUploadUtils.postJsonData(Urls.getCalendarCreateUrl(), calendarJson);
                    if (responsejsonObject != null) {

                    }
                }
            }
        }.start();
    }

    public void killCall(Context context) {
        endCallButtonLayout.setVisibility(View.GONE);
        ServiceHandler.callDisconnected = true;

        try {
            statusGetInfoRelativeLayout.setVisibility(View.GONE);
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                TelecomManager tm = (TelecomManager) this.getSystemService(Context.TELECOM_SERVICE);
                if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ANSWER_PHONE_CALLS) != PackageManager.PERMISSION_GRANTED) {
                    return;
                }
                if (tm != null) {
                    tm.endCall();
                }
            } else {
                TelephonyManager telephonyManager = (TelephonyManager) this.getSystemService(Context.TELEPHONY_SERVICE);
                Class classTelephony = Class.forName(telephonyManager.getClass().getName());
                Method methodGetITelephony = classTelephony.getDeclaredMethod("getITelephony");
                methodGetITelephony.setAccessible(true);
                Object telephonyInterface = methodGetITelephony.invoke(telephonyManager);
                Class telephonyInterfaceClass = Class.forName(telephonyInterface.getClass().getName());
                Method methodEndCall = telephonyInterfaceClass.getDeclaredMethod("endCall");
                methodEndCall.invoke(telephonyInterface);
            }
            this.finish();
        } catch (Exception e) {
            Log.e("UearnActivity", "Error calling ITelephony#endActiveCall()", e);
            int version_code = CommonUtils.getVersionCode(this);
            String message = "<br/><br/>eMail : " + ApplicationSettings.getPref(AppConstants.USERINFO_EMAIL, "") + "<br/>ID : " +
                    ApplicationSettings.getPref(AppConstants.USERINFO_ID, "") + "<br/><br/>App Version: " + version_code + "<br/><br/>UearnActivity - Error calling ITelephony#endActiveCall(): " + e.getMessage();
            ServiceApplicationUsage.callErrorLog(message);
        }
    }

    public void muteCall() {
        try {
            AudioManager audioManager = (AudioManager) getApplicationContext().getSystemService(Context.AUDIO_SERVICE);
            audioManager.setMode(AudioManager.MODE_IN_CALL);
            if (audioManager.isMicrophoneMute() == false) {
                audioManager.setMicrophoneMute(true);
                muteCallButton.setImageResource(R.drawable.ic_mute_call);
            } else {
                audioManager.setMicrophoneMute(false);
                muteCallButton.setImageResource(R.drawable.ic_unmute_call);
            }
        } catch (Exception e) {
            Log.e("UearnActivity", "Error calling ITelephony#muteCall()", e);
        }
    }

    public void muteCallBasedOnPhoneDialler() {
        AudioManager audioManager = (AudioManager) getApplicationContext().getSystemService(Context.AUDIO_SERVICE);
        audioManager.setMode(AudioManager.MODE_IN_CALL);
        if (audioManager.isMicrophoneMute() == true) {
            audioManager.setMicrophoneMute(true);
            muteCallButton.setImageResource(R.drawable.ic_mute_call);
        } else {
            audioManager.setMicrophoneMute(false);
            muteCallButton.setImageResource(R.drawable.ic_unmute_call);
        }
    }

    public void launchApp() {
        String launchApp = ApplicationSettings.getPref(AppConstants.LAUNCH_APP, "");
        if (launchApp != null && !launchApp.isEmpty()) {
            try {
                Intent i = getPackageManager().getLaunchIntentForPackage(launchApp);
                startActivity(i);
            } catch (Exception e) {
            }
        } else {
        }
    }

    private void navigateToUearnFollowUpActivity() {
        SmarterSMBApplication.isDiallingFollowUpC2C = false;
        Intent intent = new Intent(this, UearnFollowupActivity.class);
        intent.putExtra("FollowUpType", "FollowUpMissed");
        intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
        startActivity(intent);
        this.finish();
    }

    private void goToHomeScreen() {
        SmarterSMBApplication.oneCallIsActive = false;
        SmarterSMBApplication.callEndedFromDuringCall = false;

        String remoteAutoEnabled = ApplicationSettings.getPref(AppConstants.RAD_OPTIMIZED_POST, "");
        boolean truePredictive = ApplicationSettings.getPref(AppConstants.TRUE_PREDICTIVE, false);
        if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty() && !truePredictive) {
            NotificationData.dialledCustomerNumber = "";
            NotificationData.dialledCustomerName = "";
        }

        if (UearnHome.retrySalesStageUpdateFailed) {
            SmarterSMBApplication.matchingInNumberNotInStartMode = false;
            navigateToUearnHome();
        } else {
            if (SmarterSMBApplication.actionMoveToNormalProcessed) {
                SmarterSMBApplication.actionMoveToNormalProcessed = false;
                ActivityManager am = (ActivityManager) getApplicationContext().getSystemService(Context.ACTIVITY_SERVICE);
                ComponentName cn = am.getRunningTasks(1).get(0).topActivity;
                if (cn != null && cn.getClassName().equals("smarter.uearn.money.activities.UearnActivity")) {
                    remoteAutoEnabled = ApplicationSettings.getPref(AppConstants.RAD_OPTIMIZED_POST, "");
                    truePredictive = ApplicationSettings.getPref(AppConstants.TRUE_PREDICTIVE, false);
                    if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty() && !truePredictive) {
                        String configText = ApplicationSettings.getPref(AppConstants.RAD_MESSAGE_VALUE, "");
                        if (configText != null && !configText.isEmpty() && configText.contains("Congratulations!. You have finished with all of your allocated numbers")) {
                            navigateToUearnHome();
                        }
                    } else {
                        navigateToUearnHome();
                    }
                }
            } else {
                remoteAutoEnabled = ApplicationSettings.getPref(AppConstants.REMOTE_AUTO_DIALLING, "");
                if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty()) {
                    if (SmarterSMBApplication.remoteEnabledRedialScenario) {
                        SmarterSMBApplication.remoteEnabledRedialScenario = false;
                        SmarterSMBApplication.callStateIsDisconnected = true;
                        SmarterSMBApplication.endTheSession = true;
                        navigateToUearnHome();
                    } else {
                        if (SmarterSMBApplication.callStateIsDisconnected && SmarterSMBApplication.endTheSession) {
                            navigateToUearnHome();
                        } else {
                            if(SmarterSMBApplication.systemAlertReceived){
                                SmarterSMBApplication.systemAlertReceived = false;
                                navigateToUearnHome();
                            } else {
                                SmarterSMBApplication.incomingCallRejectedByAgent = false;
                                Intent intent = getIntent();
                                this.finish();
                                intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
                                overridePendingTransition(0, 0);
                                startActivity(intent);
                            }
                        }
                    }
                } else {
                    this.finish();
                }
            }
        }
    }

    private void navigateToUearnHome() {
        SmarterSMBApplication.navigatingToUearnHome = true;
        Intent intent = new Intent(getApplicationContext(), UearnHome.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
        startActivity(intent);
        this.finish();
    }

    private void showACPScreen() {
        hideTitleTextViewAndWebView();
        if (statusGetInfoRelativeLayout != null) {
            statusGetInfoRelativeLayout.setVisibility(View.GONE);
        }
        if(SmarterSMBApplication.cloud2IncomingCall) {
            SmarterSMBApplication.cloud2IncomingCall = false;
            updateMainLinearLayout.setBackgroundResource(R.drawable.card_border_layout);
            submitLayout.setVisibility(View.VISIBLE);
        }
        redialClicked = false;
        if (NotificationData.dialledCustomerNumber == null || NotificationData.dialledCustomerNumber.isEmpty() || !NotificationData.isSocketResponse) {
            checkRNR = true;
        }
        String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");

        if (questionsAct != null && !questionsAct.isEmpty()) {

            callbacklayoutview.setEnabled(true);
            redialLayout.setEnabled(true);
            callbacklayoutview.setClickable(true);
            redialLayout.setClickable(true);
            callbacklayoutview.setOnClickListener(this);
            redialLayout.setOnClickListener(this);
            allianceSalesStage.setVisibility(View.GONE);
            if (checkRNR) {
                uView.setVisibility(View.GONE);
                if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty()) {
                    onClick(rnrLayout);
                } else {
                    rView.setVisibility(View.VISIBLE);
                    rnrMainLinearLayout.setBackgroundResource(R.drawable.card_border_layout);
                    redialMainLinearLayout.setBackgroundResource(R.color.card_background_color);
                    updateMainLinearLayout.setBackgroundResource(R.color.card_background_color);
                    callbackMainLinearLayout.setBackgroundResource(R.color.card_background_color);
                }
            } else {
                SmarterSMBApplication.currentAppState = "ACP";
                uView.setVisibility(View.VISIBLE);
                submitLayout.setVisibility(View.VISIBLE);
                updateMainLinearLayout.setBackgroundResource(R.drawable.card_border_layout);
                redialMainLinearLayout.setBackgroundResource(R.color.card_background_color);
                rnrMainLinearLayout.setBackgroundResource(R.color.card_background_color);
                callbackMainLinearLayout.setBackgroundResource(R.color.card_background_color);
            }

            flp_layout.setVisibility(View.VISIBLE);
            acpBottomLayout.setVisibility(View.VISIBLE);
            nameNumberRelativeLayout.setVisibility(View.GONE);
            endCallButtonLayout.setVisibility(View.GONE);
            layout5.setVisibility(View.GONE);
            ratingsLayout.setVisibility(View.GONE);
            freeTextLayout.setVisibility(View.GONE);
            dropdownLayout.setVisibility(View.GONE);
            checkboxLayout.setVisibility(View.GONE);
            buttonsLayout.setVisibility(View.GONE);
            radiobuttonsLayout.setVisibility(View.GONE);
            isInterestedLayout.setVisibility(View.GONE);
            dateTimeLayout.setVisibility(View.GONE);
            freeNumberLayout.setVisibility(View.GONE);
            searchableDropDownLayout.setVisibility(View.GONE);
            callManagerLayout.setVisibility(View.GONE);
            if (oyoLayout != null)
                oyoLayout.setVisibility(View.GONE);
            formButtonLayout.setVisibility(View.GONE);
            layout5.setVisibility(View.GONE);
            getCustomInfoLayout.setVisibility(View.GONE);
        } else {
            if (subStatus1 != null && (subStatus1.equalsIgnoreCase("APPROVED") || subStatus1.equalsIgnoreCase("APPROVED WITHOUT DOCS") || subStatus1.equalsIgnoreCase("REFERRED") || subStatus1.equalsIgnoreCase("BUREAU ERROR") || subStatus1.equalsIgnoreCase("REPEAT ENTRY") || subStatus1.equalsIgnoreCase("CIBIL NOT ELIGIBLE") || subStatus1.equalsIgnoreCase("LOW CIBIL") || subStatus1.equalsIgnoreCase("DEFAULTER") || subStatus1.equalsIgnoreCase("NOT ELIGIBLE") || subStatus1.equalsIgnoreCase("RECENT REJECT") || subStatus1.equalsIgnoreCase("ALREADY IN PROCESS") || subStatus1.equalsIgnoreCase("WRONG PAN NUMBER"))) {
            } else {
                updateLayout.setEnabled(true);
                updateLayout.setClickable(true);
                updateLayout.setOnClickListener(this);
                uView.setVisibility(View.VISIBLE);
                submitLayout.setVisibility(View.VISIBLE);
                SmarterSMBApplication.currentAppState = "ACP";
                updateMainLinearLayout.setBackgroundResource(R.drawable.card_border_layout);
                redialMainLinearLayout.setBackgroundResource(R.color.card_background_color);
                rnrMainLinearLayout.setBackgroundResource(R.color.card_background_color);
                callbackMainLinearLayout.setBackgroundResource(R.color.card_background_color);
            }

            callbacklayoutview.setEnabled(true);
            rnrLayout.setEnabled(true);
            redialLayout.setEnabled(true);
            callbacklayoutview.setClickable(true);
            rnrLayout.setClickable(true);
            redialLayout.setClickable(true);
            callbacklayoutview.setOnClickListener(this);
            rnrLayout.setOnClickListener(this);
            redialLayout.setOnClickListener(this);

            callbackCheck = false;
            checkRNR = false;

            if (leadSheetAttached) {
                changeLayoutColor(7);
            } else {
                changeLayoutColor(111);
            }
            uView.setVisibility(View.VISIBLE);
            cView.setVisibility(View.GONE);
            rView.setVisibility(View.GONE);
            redialView.setVisibility(View.GONE);
            flp_layout.setVisibility(View.VISIBLE);
            acpBottomLayout.setVisibility(View.VISIBLE);
            nameNumberRelativeLayout.setVisibility(View.VISIBLE);
            endCallButtonLayout.setVisibility(View.GONE);
            layout5.setVisibility(View.GONE);
            getCustomInfoLayout.setVisibility(View.GONE);
        }
    }

    private void showACPScreenSequencial() {

        redialClicked = false;

        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");

        if (questionsAct != null && !questionsAct.isEmpty()) {
            callbacklayoutview.setEnabled(true);
            redialLayout.setEnabled(true);

            callbacklayoutview.setClickable(true);
            redialLayout.setClickable(true);

            callbacklayoutview.setOnClickListener(this);
            redialLayout.setOnClickListener(this);
            uView.setVisibility(View.VISIBLE);
            flp_layout.setVisibility(View.VISIBLE);

            acpBottomLayout.setVisibility(View.VISIBLE);
            submitLayout.setVisibility(View.VISIBLE);
            nameNumberRelativeLayout.setVisibility(View.GONE);

            if (customersListLayout != null) {
                customersListLayout.setVisibility(View.GONE);
            }
            endCallButtonLayout.setVisibility(View.GONE);
            layout5.setVisibility(View.GONE);
            formButtonLayout.setVisibility(View.GONE);
            rnrMainLinearLayout.setBackgroundResource(R.color.card_background_color);
            redialMainLinearLayout.setBackgroundResource(R.color.card_background_color);
            updateMainLinearLayout.setBackgroundResource(R.drawable.card_border_layout);
            callbackMainLinearLayout.setBackgroundResource(R.color.card_background_color);
        } else {
            if (subStatus1 != null && (subStatus1.equalsIgnoreCase("APPROVED") || subStatus1.equalsIgnoreCase("APPROVED WITHOUT DOCS") || subStatus1.equalsIgnoreCase("REFERRED") || subStatus1.equalsIgnoreCase("BUREAU ERROR") || subStatus1.equalsIgnoreCase("REPEAT ENTRY") || subStatus1.equalsIgnoreCase("CIBIL NOT ELIGIBLE") || subStatus1.equalsIgnoreCase("LOW CIBIL") || subStatus1.equalsIgnoreCase("DEFAULTER") || subStatus1.equalsIgnoreCase("NOT ELIGIBLE") || subStatus1.equalsIgnoreCase("RECENT REJECT") || subStatus1.equalsIgnoreCase("ALREADY IN PROCESS") || subStatus1.equalsIgnoreCase("WRONG PAN NUMBER"))) {

            } else {
                updateLayout.setEnabled(true);
                updateLayout.setClickable(true);
                updateLayout.setOnClickListener(this);
                uView.setVisibility(View.VISIBLE);
            }
            callbacklayoutview.setEnabled(true);
            rnrLayout.setEnabled(true);
            redialLayout.setEnabled(true);

            callbacklayoutview.setClickable(true);
            rnrLayout.setClickable(true);
            redialLayout.setClickable(true);

            callbacklayoutview.setOnClickListener(this);
            rnrLayout.setOnClickListener(this);
            redialLayout.setOnClickListener(this);

            callbackCheck = false;
            checkRNR = false;

            if (leadSheetAttached) {
                changeLayoutColor(7);
            } else {
                changeLayoutColor(111);
            }
            uView.setVisibility(View.VISIBLE);
            cView.setVisibility(View.GONE);
            rView.setVisibility(View.GONE);
            redialView.setVisibility(View.GONE);
            create_followup_card.setVisibility(View.GONE);

            String noOfCustomersToCall = ApplicationSettings.getPref(AppConstants.NO_OF_CUSTOMERS_TO_CALL, "");
            if (noOfCustomersToCall != null && !noOfCustomersToCall.isEmpty() && !ServiceHandler.callDisconnected) {
                layout5.setVisibility(View.GONE);
                flp_layout.setVisibility(View.GONE);
                acpBottomLayout.setVisibility(View.GONE);
                nameNumberRelativeLayout.setVisibility(View.GONE);
                customersListLayout.setVisibility(View.VISIBLE);
                setEndCallButtonLayoutVisibility();
                if (leadSheetAttached) {
                    customersListLayout.setVisibility(View.GONE);
                    endCallButtonLayout.setVisibility(View.GONE);
                    flp_layout.setVisibility(View.VISIBLE);
                    acpBottomLayout.setVisibility(View.VISIBLE);
                    nameNumberRelativeLayout.setVisibility(View.VISIBLE);
                    pan_available_layout.setVisibility(View.VISIBLE);
                    remarks.setVisibility(View.VISIBLE);
                }
            } else {
                flp_layout.setVisibility(View.VISIBLE);
                acpBottomLayout.setVisibility(View.VISIBLE);
                nameNumberRelativeLayout.setVisibility(View.VISIBLE);
                layout5.setVisibility(View.GONE);
                customersListLayout.setVisibility(View.GONE);
                formButtonLayout.setVisibility(View.GONE);
                endCallButtonLayout.setVisibility(View.GONE);
            }
        }
        if ((connectedCustomer == null || connectedCustomer.isEmpty()) && (rnrCallsList != null && rnrCallsList.size() > 0)) {
            checkRNR = true;
            if (questionsAct != null && !questionsAct.isEmpty()) {
                rnrCard.setVisibility(View.VISIBLE);
                callBackCard.setVisibility(View.VISIBLE);
                flp_layout.setWeightSum(4);
                onClick(rnrLayout);
            } else {
                redialCard.setVisibility(View.GONE);
                flp_layout.setWeightSum(3);
                onClick(rnrLayout);
            }
        } else if (questionsAct != null && !questionsAct.isEmpty()) {

            rnrCard.setVisibility(View.VISIBLE);
            callBackCard.setVisibility(View.VISIBLE);
            flp_layout.setWeightSum(4);
            if (NotificationData.dialledCustomerNumber == null || NotificationData.dialledCustomerNumber.isEmpty()) {
                if (remoteAutoEnabled != null && !remoteAutoEnabled.isEmpty()) {
                    if (ApplicationSettings.containsPref(AppConstants.PARALLEL_GROUP_SIZE)) {
                        String parallelGroupSize = ApplicationSettings.getPref(AppConstants.PARALLEL_GROUP_SIZE, "");
                        if (parallelGroupSize != null && !parallelGroupSize.isEmpty()) {
                            redialCard.setVisibility(View.GONE);
                            getCustomInfoLayout.setVisibility(View.GONE);
                            flp_layout.setWeightSum(3);
                            onClick(rnrLayout);
                        }
                    }
                }
            }
        } else {
            redialCard.setVisibility(View.VISIBLE);
            flp_layout.setWeightSum(4);
        }

        boolean truePredictive = ApplicationSettings.getPref(AppConstants.TRUE_PREDICTIVE, false);
        if (truePredictive) {
            if (tpdrnrScenario) {
                checkRNR = true;
                rnrScenario = true;
                redialCard.setVisibility(View.GONE);
                flp_layout.setWeightSum(3);
                SmarterSMBApplication.connectedCustomerState = "ACP";
                onClick(rnrLayout);
                tpdrnrScenario = false;
            }
        }
    }

    private void updateHash() {
        String experience = customerExperience.getText().toString();
        String ratings = customerRatings.getText().toString();
        if (ratings != null && !ratings.isEmpty()) {
            if (ratings.contains("Please select")) {
                ratings = "0";
            } else {
                ratings = ratings.substring(ratings.lastIndexOf(":") + 1);
            }
            currentRatings = ratings;
        }
        yesnobuttonClicked = false;
        String currentStatus = String.valueOf(formStatus);
        String freeNum = freeNumber.getText().toString();
        String payModeFromList = String.valueOf(dropDownValueFromList);
        dropDownValueFromList = "";
        String searchableValueFromList = String.valueOf(searchableDropDownValueFromList);
        searchableDropDownValueFromList = "";
        String multiSelectionValueFromList = String.valueOf(multiSelectionDropDownValueFromList);
        if (multiSelectionDropDownValueFromList != null && !multiSelectionDropDownValueFromList.isEmpty()) {
            //multiSelectionDropDownValueCaptured = true;
            multiSelectionDropDownValueFromList = "";
        }
        String payModeFromButton = String.valueOf(paymentModeFromButton);
        String radioButtonText = String.valueOf(currentSelectedRadioButton);

        String numberpickerText = "";
        if (et_number != null) {
            numberpickerText = et_number.getText().toString();
        }

        if (tempQuesList != null && tempQuesList.size() > 0) {
            for (int k = 0; k < tempQuesList.size(); k++) {
                Set set = tempQnAHash.entrySet();
                Iterator i = set.iterator();
                while (i.hasNext()) {
                    Map.Entry me = (Map.Entry) i.next();
                    String value = "";
                    String key = (String) me.getKey();
                    if (tempQuesList.contains(key)) {
                        value = (String) me.getValue();
                    }
                    if (value != null && !value.isEmpty()) {
                        if (value.equalsIgnoreCase("RT")) {
                            String val = String.valueOf(questionAnswerHash.get(key));
                            if (!questionAnswerHash.containsKey(key)) {
                                questionAnswerHash.put(key, ratings);
                            } else if (questionAnswerHash.containsKey(key)) {
                                if(rootQ != null && !rootQ.isEmpty() && rootQ.equalsIgnoreCase(key)) {
                                    if (!val.equalsIgnoreCase(ratings)) {
                                        if (ratings != null && !ratings.isEmpty() && !ratings.equals("null")) {
                                            questionAnswerHash.put(key, ratings);
                                            ratings = "";
                                        }
                                    }
                                }
                            }
                        } else if (value.equalsIgnoreCase("FT") || value.equalsIgnoreCase("EMAIL")) {
                            String val = String.valueOf(questionAnswerHash.get(key));
                            if (!questionAnswerHash.containsKey(key)) {
                                if (value.equalsIgnoreCase("EMAIL")) {
                                    questionAnswerHash.put(key, "EMAIL-" + experience);
                                } else {
                                    questionAnswerHash.put(key, experience);
                                    if (key != null && !key.isEmpty() && (key.contains("Notes") || key.contains("Remarks"))) {
                                        String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
                                        if (questionsAct != null && !questionsAct.isEmpty()) {
                                            if (experience != null && !experience.isEmpty()) {
                                                ApplicationSettings.putPref(AppConstants.MMT_DURING_CALL_NOTES, experience);
                                            }
                                        }
                                    }
                                }
                                customerExperience.setText("");
                            } else if (questionAnswerHash.containsKey(key)) {
                                if(rootQ != null && !rootQ.isEmpty() && rootQ.equalsIgnoreCase(key)) {
                                    if (!val.equalsIgnoreCase(experience)) {
                                        if (experience != null && !experience.isEmpty() && !experience.equals("null")) {
                                            if (value.equalsIgnoreCase("EMAIL")) {
                                                questionAnswerHash.put(key, "EMAIL-" + experience);
                                            } else {
                                                questionAnswerHash.put(key, experience);
                                            }
                                            experience = "";
                                        }
                                    }
                                }
                                customerExperience.setText("");
                            }
                        } else if (value.equalsIgnoreCase("DD")) {
                            String val = String.valueOf(questionAnswerHash.get(key));
                            if (!questionAnswerHash.containsKey(key)) {
                                if (payModeFromList != null && !payModeFromList.isEmpty()) {
                                    questionAnswerHash.put(key, payModeFromList);
                                }
                            } else if (questionAnswerHash.containsKey(key)) {
                                if(rootQ != null && !rootQ.isEmpty() && rootQ.equalsIgnoreCase(key)) {
                                    if (!val.equalsIgnoreCase(payModeFromList)) {
                                        if (payModeFromList != null && !payModeFromList.isEmpty() && !payModeFromList.equals("null")) {
                                            questionAnswerHash.put(key, payModeFromList);
                                            payModeFromList = "";
                                        }
                                    }
                                }
                            }
                        } else if (value.equalsIgnoreCase("BT")) {
                            String val = String.valueOf(questionAnswerHash.get(key));
                            if (!questionAnswerHash.containsKey(key)) {
                                questionAnswerHash.put(key, payModeFromButton);
                            } else if (questionAnswerHash.containsKey(key)) {
                                if(rootQ != null && !rootQ.isEmpty() && rootQ.equalsIgnoreCase(key)) {
                                    if (!val.equalsIgnoreCase(payModeFromButton)) {
                                        if (payModeFromButton != null && !payModeFromButton.isEmpty() && !payModeFromButton.equals("null")) {
                                            questionAnswerHash.put(key, payModeFromButton);
                                            payModeFromButton = "";
                                        }
                                    }
                                }
                            }
                        } else if (value.equalsIgnoreCase("RB")) {
                            String val = String.valueOf(questionAnswerHash.get(key));
                            if (!questionAnswerHash.containsKey(key)) {
                                questionAnswerHash.put(key, radioButtonText);
                            } else if (questionAnswerHash.containsKey(key)) {
                                if(rootQ != null && !rootQ.isEmpty() && rootQ.equalsIgnoreCase(key)) {
                                    if (!val.equalsIgnoreCase(radioButtonText)) {
                                        if (radioButtonText != null && !radioButtonText.isEmpty() && !radioButtonText.equals("null")) {
                                            questionAnswerHash.put(key, radioButtonText);
                                            radioButtonText = "";
                                        }
                                    }
                                }
                            }
                        } else if (value.equalsIgnoreCase("NP")) {
                            String val = String.valueOf(questionAnswerHash.get(key));
                            if (!questionAnswerHash.containsKey(key)) {
                                questionAnswerHash.put(key, numberpickerText);
                            } else if (questionAnswerHash.containsKey(key)) {
                                if(rootQ != null && !rootQ.isEmpty() && rootQ.equalsIgnoreCase(key)) {
                                    if (!val.equalsIgnoreCase(numberpickerText)) {
                                        if (numberpickerText != null && !numberpickerText.isEmpty() && !numberpickerText.equals("null")) {
                                            questionAnswerHash.put(key, numberpickerText);
                                            numberpickerText = "";
                                        }
                                    }
                                }
                            }
                        } else if (value.equalsIgnoreCase("YN")) {
                            String val = String.valueOf(questionAnswerHash.get(key));
                            if (!questionAnswerHash.containsKey(key)) {
                                questionAnswerHash.put(key, currentStatus);
                            } else if (questionAnswerHash.containsKey(key)) {
                                if(rootQ != null && !rootQ.isEmpty() && rootQ.equalsIgnoreCase(key)) {
                                    if (val != null && !val.isEmpty() && !val.equals("null") && !val.equalsIgnoreCase(currentStatus)) {
                                        if (currentStatus != null && !currentStatus.isEmpty() && !currentStatus.equals("null")) {
                                            questionAnswerHash.put(key, currentStatus);
                                            currentStatus = "";
                                        }
                                    }
                                }
                            }
                        } else if (value.equalsIgnoreCase("FN") || value.equalsIgnoreCase("SMS")) {
                            String val = String.valueOf(questionAnswerHash.get(key));
                            if (!questionAnswerHash.containsKey(key)) {
                                if (value.equalsIgnoreCase("SMS")) {
                                    questionAnswerHash.put(key, "SMS-" + freeNum);
                                } else {
                                    questionAnswerHash.put(key, freeNum);
                                }
                                freeNumber.setText("");
                            } else if (questionAnswerHash.containsKey(key)) {
                                if(rootQ != null && !rootQ.isEmpty() && rootQ.equalsIgnoreCase(key)) {
                                    if (!val.equalsIgnoreCase(freeNum)) {
                                        if (freeNum != null && !freeNum.isEmpty() && !freeNum.equals("null")) {
                                            if (value.equalsIgnoreCase("SMS")) {
                                                questionAnswerHash.put(key, "SMS-" + freeNum);
                                            } else {
                                                questionAnswerHash.put(key, freeNum);
                                            }
                                            freeNum = "";
                                        }
                                    }
                                }
                                freeNumber.setText("");
                            }
                        } else if (value.equalsIgnoreCase("SDD")) {
                            String val = String.valueOf(questionAnswerHash.get(key));
                            if (!questionAnswerHash.containsKey(key) && !questionAnswerHash.containsValue(searchableValueFromList)) {
                                questionAnswerHash.put(key, searchableValueFromList);
                            } else if (questionAnswerHash.containsKey(key)) {
                                if(rootQ != null && !rootQ.isEmpty() && rootQ.equalsIgnoreCase(key)) {
                                    if (!val.equalsIgnoreCase(searchableValueFromList)) {
                                        if (searchableValueFromList != null && !searchableValueFromList.isEmpty() && !searchableValueFromList.equals("null")) {
                                            questionAnswerHash.put(key, searchableValueFromList);
                                            searchableValueFromList = "";
                                        }
                                    }
                                }
                            }
                        } else if (value.equalsIgnoreCase("MSDD")) {
                            String val = String.valueOf(questionAnswerHash.get(key));
                            if (!questionAnswerHash.containsKey(key)) {
                                questionAnswerHash.put(key, multiSelectionValueFromList);
                            } else if (questionAnswerHash.containsKey(key)) {
                                if(rootQ != null && !rootQ.isEmpty() && rootQ.equalsIgnoreCase(key)) {
                                    if (!val.equalsIgnoreCase(multiSelectionValueFromList)) {
                                        if (multiSelectionValueFromList != null && !multiSelectionValueFromList.isEmpty() && !multiSelectionValueFromList.equals("null")) {
                                            questionAnswerHash.put(key, multiSelectionValueFromList);
                                            multiSelectionValueFromList = "";
                                        }
                                    }
                                }
                            }
                        } else if (value.equalsIgnoreCase("DATETIME")) {
                            if (!questionAnswerHash.containsKey(key) && !questionAnswerHash.containsValue(selectedDateTime)) {
                                questionAnswerHash.put(key, selectedDateTime);
                            }
                        } else if (value.equalsIgnoreCase("FLP")) {

                            if ((final_start_year == 0) && (final_start_month == 0) && (final_start_dayOfMonth == 0) && (final_start_hour == 0) && (final_start_min == 0)) {
                                mCalendar = null;
                            } else {
                                mCalendar = new GregorianCalendar(final_start_year, final_start_month, final_start_dayOfMonth, final_start_hour, final_start_min);
                            }

                            if (mCalendar != null) {
                                if (mCalendar.getTime() != null) {
                                    String dateTime = String.valueOf(mCalendar.getTime());
                                    questionAnswerHash.put(key, "FOLLOWUP-" + dateTime);
                                }
                            } else {
                                String dateTime = "";
                                questionAnswerHash.put(key, dateTime);
                            }
                        } else if (value.equalsIgnoreCase("DATE")) {
                            if (!questionAnswerHash.containsKey(key) && !questionAnswerHash.containsValue(selectedDateTime))
                                questionAnswerHash.put(key, selectedDateTime);
                        } else if (value.equalsIgnoreCase("ATTACHMENT")) {
                            questionAnswerHash.put(key, imageUrl);
                        } else if (value.equalsIgnoreCase("CB")) {
                            String val = String.valueOf(questionAnswerHash.get(key));
                            if (!questionAnswerHash.containsKey(key)) {
                                questionAnswerHash.put(key, multiSelectionValueFromList);
                                Iterator<Map.Entry<String, Boolean>> it = checkedDataHashMap.entrySet().iterator();
                                while (it.hasNext()) {
                                    Map.Entry<String, Boolean> pair = (Map.Entry<String, Boolean>) it.next();
                                    questionAnswerHash.put(key, checkedDataHashMap.toString());
                                }
                            } else if (questionAnswerHash.containsKey(key)) {
                                if(rootQ != null && !rootQ.isEmpty() && rootQ.equalsIgnoreCase(key)) {
                                    Iterator<Map.Entry<String, Boolean>> it = checkedDataHashMap.entrySet().iterator();
                                    while (it.hasNext()) {
                                        Map.Entry<String, Boolean> pair = (Map.Entry<String, Boolean>) it.next();
                                        questionAnswerHash.put(key, checkedDataHashMap.toString());
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        Set set = questionAnswerHash.entrySet();
        Iterator i = set.iterator();
        JSONObject bankFeedbackFormObj = null;
        JSONObject actionObj = null;
        JSONArray jsonArray = new JSONArray();
        while (i.hasNext()) {

            Map.Entry me = (Map.Entry) i.next();
            String question = (String) me.getKey();
            String answer = (String) me.getValue();

            if (question.equals("Visit fixed for documentation") && answer.equals("Yes")) {

            }

            bankFeedbackFormObj = new JSONObject();
            try {

                String title = getTitleForQuestion(question);
                if (title != null && !title.isEmpty()) {
                    bankFeedbackFormObj.put("Title:", title);
                }

                bankFeedbackFormObj.put("Q:", question);

                if (answer != null && !answer.isEmpty()) {
                    if (answer.contains("EMAIL-")) {
                        answer = answer.substring(6, answer.length());
                        try {
                            actionObj = new JSONObject();
                            actionObj.put("type:", "EMAIL");
                            actionObj.put("value:", answer);
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                        bankFeedbackFormObj.put("A:", answer);
                        bankFeedbackFormObj.put("ACTION:", actionObj);
                    } else if (answer.contains("SMS-")) {
                        answer = answer.substring(4, answer.length());
                        try {
                            actionObj = new JSONObject();
                            actionObj.put("type:", "SMS");
                            actionObj.put("value:", answer);
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                        bankFeedbackFormObj.put("A:", answer);
                        bankFeedbackFormObj.put("ACTION:", actionObj);
                    } else if (answer.contains("FOLLOWUP-")) {
                        answer = answer.substring(9, answer.length());
                        try {
                            actionObj = new JSONObject();
                            actionObj.put("type:", "FLP");
                            String time = CommonUtils.getTimeFormatInISO(mCalendar.getTime());
                            actionObj.put("value:", time);
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                        bankFeedbackFormObj.put("A:", answer);
                        bankFeedbackFormObj.put("ACTION:", actionObj);
                    } else if(actionTypeHash != null && actionTypeHash.size() > 0) {
                        String actionType = String.valueOf(actionTypeHash.get(question));
                        if(actionType != null && !actionType.isEmpty() && !actionType.equals("null")){
                            bankFeedbackFormObj.put("A:", answer);
                            bankFeedbackFormObj.put("action_type:", actionType);
                        }else {
                            bankFeedbackFormObj.put("A:", answer);
                        }
                    } else {
                        bankFeedbackFormObj.put("A:", answer);
                    }
                } else {
                    bankFeedbackFormObj.put("A:", "");
                }

                jsonArray.put(bankFeedbackFormObj.toString());
            } catch (JSONException e) {
                e.printStackTrace();
                int version_code = CommonUtils.getVersionCode(this);
                String message = "<br/><br/>eMail : " + ApplicationSettings.getPref(AppConstants.USERINFO_EMAIL, "") + "<br/>ID : " +
                        ApplicationSettings.getPref(AppConstants.USERINFO_ID, "") + "<br/><br/>App Version: " + version_code + "<br/><br/>UearnActivity - updateHash()-1: " + e.getMessage();
                ServiceApplicationUsage.callErrorLog(message);
            }
        }

        JSONObject experienceObj = new JSONObject();
        try {
            experienceObj.put("experience", jsonArray);
        } catch (JSONException e) {
            e.printStackTrace();
            int version_code = CommonUtils.getVersionCode(this);
            String message = "<br/><br/>eMail : " + ApplicationSettings.getPref(AppConstants.USERINFO_EMAIL, "") + "<br/>ID : " +
                    ApplicationSettings.getPref(AppConstants.USERINFO_ID, "") + "<br/><br/>App Version: " + version_code + "<br/><br/>UearnActivity - updateHash()-2: " + e.getMessage();
            ServiceApplicationUsage.callErrorLog(message);
        }
        NotificationData.customerFeedback = experienceObj.toString();
        SmarterSMBApplication.lastConnectedCustomerFeedback = NotificationData.customerFeedback;
        updateCustomerFeedbackInSmarterContactTable(NotificationData.customerFeedback);
    }

    private void setSelectedAnswerForNextQuestionnaire(String ques, String type) {

        Set set = questionAnswerHash.entrySet();
        Iterator i = set.iterator();
        while (i.hasNext()) {
            Map.Entry me = (Map.Entry) i.next();
            String question = (String) me.getKey();
            String answer = (String) me.getValue();

            if (ques != null && !ques.isEmpty() && ques.equals(question)) {
                if (answer != null && !answer.isEmpty() && !answer.equals("null")) {
                    if (type != null && !type.isEmpty() && type.equalsIgnoreCase("YN")) {
                        if (answer.equals("YES")) {
                            yesnobuttonClicked = true;
                            formStatus = "YES";
                            yesButton.setBackgroundColor(ContextCompat.getColor(getApplicationContext(), R.color.selected_item_color));
                            yesButton.setTextColor(Color.WHITE);
                            yesButton.setBackground(getResources().getDrawable(R.drawable.custom_rounded_corners));
                            noButton.setBackground(getResources().getDrawable(R.drawable.call_flow_button));
                            noButton.setTextColor(ContextCompat.getColor(this, R.color.ques_text_color));
                        } else if (answer.equals("NO")) {
                            yesnobuttonClicked = true;
                            formStatus = "NO";
                            noButton.setBackgroundColor(ContextCompat.getColor(getApplicationContext(), R.color.selected_item_color));
                            noButton.setTextColor(Color.WHITE);
                            noButton.setBackground(getResources().getDrawable(R.drawable.custom_rounded_corners));
                            yesButton.setBackground(getResources().getDrawable(R.drawable.call_flow_button));
                            yesButton.setTextColor(ContextCompat.getColor(this, R.color.ques_text_color));
                        }
                    } else if (type != null && !type.isEmpty() && (type.equalsIgnoreCase("FT")|| type.equalsIgnoreCase("EMAIL") || type.equalsIgnoreCase("BLANK"))) {
                        customerExperience.setText(answer);
                    } else if (type != null && !type.isEmpty() && (type.equalsIgnoreCase("FN") || type.equalsIgnoreCase("SMS"))) {
                        freeNumber.setText(answer);
                    } else if (type != null && !type.isEmpty() && type.equalsIgnoreCase("DD")) {
                        dropDownValueFromList = answer;
                        createSpinner(ques);
                    } else if (type != null && !type.isEmpty() && type.equalsIgnoreCase("SDD")) {
                        searchableDropDownValueFromList = answer;
                        createSearchableSpinner(ques);
                    } else if (type != null && !type.isEmpty() && type.equalsIgnoreCase("MSDD")) {
                        multiSelectionDropDownValueFromList = answer;
                        createMultiSelectionSpinner(ques);
                    } else if (type != null && !type.isEmpty() && type.equalsIgnoreCase("BT")) {
                        paymentModeFromButton = answer;
                        currentSelectedButton = answer;
                        createButtons(ques, answer);
                    } else if (type != null && !type.isEmpty() && type.equalsIgnoreCase("RB")) {
                        currentSelectedRadioButton = answer;
                        if(rg != null) {
                            int count = rg.getChildCount();
                            for (int j = 0; j < count; j++) {
                                View view = rg.getChildAt(j);
                                if (view instanceof RadioButton) {
                                    String selectedRadioButtonText = ((RadioButton) view).getText().toString();
                                    if (selectedRadioButtonText != null && selectedRadioButtonText.equalsIgnoreCase(currentSelectedRadioButton)) {
                                        ((RadioButton) view).setChecked(true);
                                    }
                                }
                            }
                        }
                    } else if (type != null && !type.isEmpty() && type.equalsIgnoreCase("CB")) {
                        currentSelectedCheckboxHashMap = new HashMap<>();
                        if(answer != null && !answer.isEmpty()) {
                            if (answer.startsWith("{") && answer.endsWith("}")) {
                                answer = answer.substring(1, answer.length() - 1);
                                String[] valueList = answer.split("\\s*,\\s*");
                                if(valueList != null && valueList.length > 0){
                                    for (int k=0; k<valueList.length; k++) {
                                        String[] checkBoxList = valueList[k].split("\\s*=\\s*");
                                        if(checkBoxList != null && checkBoxList.length > 0){
                                            currentSelectedCheckboxHashMap.put(checkBoxList[0], Boolean.valueOf(checkBoxList[1]));
                                        }
                                    }
                                }
                            }
                        }
                        createCheckbox(ques, currentSelectedCheckboxHashMap);
                    }
                }
            }
        }
    }

    private void setSelectedAnswerForPreviousQuestionnaire(String ques, String type) {
        Set set = questionAnswerHash.entrySet();
        Iterator i = set.iterator();
        while (i.hasNext()) {
            Map.Entry me = (Map.Entry) i.next();
            String question = (String) me.getKey();
            String answer = (String) me.getValue();

            if (ques != null && !ques.isEmpty() && ques.equals(question)) {
                if (answer != null && !answer.isEmpty() && !answer.equals("null")) {
                    if (type != null && !type.isEmpty() && type.equalsIgnoreCase("YN")) {
                        if (answer.equals("YES")) {
                            yesButton.setBackgroundColor(ContextCompat.getColor(getApplicationContext(), R.color.selected_item_color));
                            yesButton.setTextColor(Color.WHITE);
                            yesButton.setBackground(getResources().getDrawable(R.drawable.custom_rounded_corners));
                            noButton.setBackground(getResources().getDrawable(R.drawable.call_flow_button));
                            noButton.setTextColor(ContextCompat.getColor(this, R.color.ques_text_color));
                        } else if (answer.equals("NO")) {
                            noButton.setBackgroundColor(ContextCompat.getColor(getApplicationContext(), R.color.selected_item_color));
                            noButton.setTextColor(Color.WHITE);
                            noButton.setBackground(getResources().getDrawable(R.drawable.custom_rounded_corners));
                            yesButton.setBackground(getResources().getDrawable(R.drawable.call_flow_button));
                            yesButton.setTextColor(ContextCompat.getColor(this, R.color.ques_text_color));
                        }
                    } else if (type != null && !type.isEmpty() && (type.equalsIgnoreCase("FT")|| type.equalsIgnoreCase("EMAIL") || type.equalsIgnoreCase("BLANK"))) {
                        customerExperience.setText(answer);
                    } else if (type != null && !type.isEmpty() && (type.equalsIgnoreCase("FN") || type.equalsIgnoreCase("SMS"))) {
                        freeNumber.setText(answer);
                    } else if (type != null && !type.isEmpty() && type.equalsIgnoreCase("DD")) {
                        dropDownValueFromList = answer;
                        createSpinner(ques);
                    } else if (type != null && !type.isEmpty() && type.equalsIgnoreCase("SDD")) {
                        searchableDropDownValueFromList = answer;
                        createSearchableSpinner(ques);
                    } else if (type != null && !type.isEmpty() && type.equalsIgnoreCase("MSDD")) {
                        multiSelectionDropDownValueFromList = answer;
                        createMultiSelectionSpinner(ques);
                    } else if (type != null && !type.isEmpty() && type.equalsIgnoreCase("BT")) {
                        paymentModeFromButton = answer;
                        currentSelectedButton = answer;
                        createButtons(ques, answer);
                    } else if (type != null && !type.isEmpty() && type.equalsIgnoreCase("RB")) {
                        currentSelectedRadioButton = answer;
                        if(rg != null) {
                            int count = rg.getChildCount();
                            for (int j = 0; j < count; j++) {
                                View view = rg.getChildAt(j);
                                if (view instanceof RadioButton) {
                                    String selectedRadioButtonText = ((RadioButton) view).getText().toString();
                                    if (selectedRadioButtonText != null && selectedRadioButtonText.equalsIgnoreCase(currentSelectedRadioButton)) {
                                        ((RadioButton) view).setChecked(true);
                                    }
                                }
                            }
                        }
                    } else if (type != null && !type.isEmpty() && type.equalsIgnoreCase("CB")) {
                        currentSelectedCheckboxHashMap = new HashMap<>();
                        if(answer != null && !answer.isEmpty()) {
                            if (answer.startsWith("{") && answer.endsWith("}")) {
                                answer = answer.substring(1, answer.length() - 1);
                                String[] valueList = answer.split("\\s*,\\s*");
                                if(valueList != null && valueList.length > 0){
                                    for (int k=0; k<valueList.length; k++) {
                                        String[] checkBoxList = valueList[k].split("\\s*=\\s*");
                                        if(checkBoxList != null && checkBoxList.length > 0){
                                            currentSelectedCheckboxHashMap.put(checkBoxList[0], Boolean.valueOf(checkBoxList[1]));
                                        }
                                    }
                                }
                            }
                        }
                        createCheckbox(ques, currentSelectedCheckboxHashMap);
                    }
                }
            }
        }
    }

    private void updateCustomerFeedbackInSmarterContactTable(String extraNotes) {
        MySql dbHelper = new MySql(this, "mydb", null, AppConstants.dBversion);
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        ContentValues cv = new ContentValues();
        long dbId;

        Cursor c = db.rawQuery("SELECT * FROM SmarterContact where NUMBER ='" + NotificationData.dialledCustomerNumber + "' AND UPLOAD_STATUS != '2'", null);

        if (c != null && c.getCount() > 0) {
            c.moveToFirst();
            long id = c.getLong(c.getColumnIndex("_id"));
            dbId = id;
        } else {
            dbId = 0;
        }
        if (c != null) {
            c.close();
        }

        if (dbId != 0) {
            cv.put("EXTRANOTES", extraNotes);
            db.update("SmarterContact", cv, "_id=" + dbId, null);
        }
    }

    private String getTitleForQuestion(String question) {
        Set set = titleQHash.entrySet();
        Iterator i = set.iterator();
        String title = "";
        while (i.hasNext()) {

            Map.Entry me = (Map.Entry) i.next();
            String questionInHash = (String) me.getKey();
            if (questionInHash.equals(question)) {
                title = (String) me.getValue();
            }
        }
        return title;
    }

    private void resetBackground(int value) {
        btnTen.setBackgroundResource(R.drawable.editext_background);
        btnThirty.setBackgroundResource(R.drawable.editext_background);
        btnSixty.setBackgroundResource(R.drawable.editext_background);
        if (value == 0) {
            btnTen.setBackgroundColor(getResources().getColor(R.color.selected_item_color));
        } else if (value == 1) {
            btnThirty.setBackgroundColor(getResources().getColor(R.color.selected_item_color));
        } else if (value == 2) {
            btnSixty.setBackgroundColor(getResources().getColor(R.color.selected_item_color));
        }
    }

    private void resetBackgroundQuestionnaire(int value) {
        questionnaire_btnTen.setBackgroundResource(R.drawable.call_flow_button);
        questionnaire_btnThirty.setBackgroundResource(R.drawable.call_flow_button);
        questionnaire_btnSixty.setBackgroundResource(R.drawable.call_flow_button);
        quesButtonTenTextView.setTextColor(getResources().getColor(R.color.ques_text_color));
        quesButtonThirtyTextView.setTextColor(getResources().getColor(R.color.ques_text_color));
        quesButtonSixtyTextView.setTextColor(getResources().getColor(R.color.ques_text_color));
        if (value == 0) {
            quesButtonTenTextView.setTextColor(getResources().getColor(R.color.white));
            questionnaire_btnTen.setBackground(getResources().getDrawable(R.drawable.call_flow_button_red));
        } else if (value == 1) {
            quesButtonThirtyTextView.setTextColor(getResources().getColor(R.color.white));
            questionnaire_btnThirty.setBackground(getResources().getDrawable(R.drawable.call_flow_button_red));
        } else if (value == 2) {
            quesButtonSixtyTextView.setTextColor(getResources().getColor(R.color.white));
            questionnaire_btnSixty.setBackground(getResources().getDrawable(R.drawable.call_flow_button_red));
        }
    }

    private void disable() {
        create_followup_card.setVisibility(View.GONE);
        pan_available_layout.setVisibility(View.GONE);

        followup_layout.setVisibility(View.GONE);

        if (followupError != null)
            followupError.setVisibility(View.GONE);
    }

    private void changeLayoutColor(int value) {
        if (value == 0) {
            assignToEmail = "";
            followup_layout.setVisibility(View.VISIBLE);
            status = "ACTIVATED";
            pan_available_layout.setVisibility(View.VISIBLE);
            create_followup_card.setVisibility(View.GONE);
            llCallAgain.setVisibility(View.GONE);
            orText.setVisibility(View.GONE);
            remarksCard.setVisibility(View.VISIBLE);
        } else if (value == 1) {
            assignToEmail = "";
            followup_layout.setVisibility(View.VISIBLE);
            status = "FOLLOW UP";
            pan_available_layout.setVisibility(View.VISIBLE);
            create_followup_card.setVisibility(View.VISIBLE);
            llCallAgain.setVisibility(View.VISIBLE);
            orText.setVisibility(View.VISIBLE);
            remarksCard.setVisibility(View.VISIBLE);
        } else if (value == 2) {
            assignToEmail = "";
            followup_layout.setVisibility(View.VISIBLE);
            status = "NO ANSWER";
            pan_available_layout.setVisibility(View.VISIBLE);
            create_followup_card.setVisibility(View.GONE);
            llCallAgain.setVisibility(View.GONE);
            orText.setVisibility(View.GONE);
            remarksCard.setVisibility(View.GONE);
        } else if (value == 3) {
            assignToEmail = "";
            followup_layout.setVisibility(View.VISIBLE);
            status = "NOT INTERESTED";
            pan_available_layout.setVisibility(View.VISIBLE);
            create_followup_card.setVisibility(View.GONE);
            llCallAgain.setVisibility(View.GONE);
            orText.setVisibility(View.GONE);
            remarksCard.setVisibility(View.GONE);
        }
    }

    private void redial() {
        uView.setVisibility(View.GONE);
        cView.setVisibility(View.GONE);
        rView.setVisibility(View.GONE);
        redialView.setVisibility(View.VISIBLE);
        if (!UearnHome.manualDialing)
            redialScenario = true;
        if (customerNumber != null && !customerNumber.isEmpty()) {
            String noOfCustomersToCall = ApplicationSettings.getPref(AppConstants.NO_OF_CUSTOMERS_TO_CALL, "");
            int noOfCustomersToDial = 0;

            if (noOfCustomersToCall != null && !noOfCustomersToCall.isEmpty()) {
                boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
                if (sequencialEndpoint) {
                    noOfCustomersToDial = Integer.valueOf(noOfCustomersToCall);
                }
            }
            boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
            if (sequencialEndpoint && noOfCustomersToDial >= 1) {
                getSelectedCustomer(customerNumber);
                navigateBackAndStop = true;
                clickToCall(customerNumber);
            } else {
                NotificationData.appointment_db_id = 0;
                navigateBackAndStop = true;
                clickToCall(customerNumber);
            }
        } else {
            tempcustomerList = new ArrayList<>();
            String noOfCustomersToCall = ApplicationSettings.getPref(AppConstants.NO_OF_CUSTOMERS_TO_CALL, "");
            int noOfCustomersToDial = 0;

            if (noOfCustomersToCall != null && !noOfCustomersToCall.isEmpty()) {
                boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
                if (sequencialEndpoint) {
                    noOfCustomersToDial = Integer.valueOf(noOfCustomersToCall);
                }
            }
            boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
            if (sequencialEndpoint && noOfCustomersToDial >= 1) {
                UearnActivity.redialScenarioCompleted = false;
                String customersListViewData = ApplicationSettings.getPref(AppConstants.CUSTOMER_LIST_DATA, "");
                CustomerLite[] listOfCustomers = new Gson().fromJson(customersListViewData, CustomerLite[].class);
                String number = "";
                if (listOfCustomers != null && listOfCustomers.length > 0) {
                    for (int i = 0; i < listOfCustomers.length; i++) {
                        CustomerLite customer = listOfCustomers[i];
                        String custNumber = customer.customerNumber;

                        if (customer.type != null && !customer.type.isEmpty() && customer.type.equalsIgnoreCase("INVALID")) {

                        } else {
                            customer.type = "";
                        }

                        number += custNumber + ",";
                        tempcustomerList.add(i, customer);
                        ContentValues cv = new ContentValues();
                        cv.put("COMPLETED", 0);
                        cv.put("RESPONSE_STATUS", "accepted");
                        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
                        SQLiteDatabase dbase = dbHelper.getWritableDatabase();
                        dbase.update("remindertbNew", cv, "_id=" + customer.id, null);
                    }
                    number = number.substring(0, number.length() - 1);
                }
                ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER, "");
                ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER_NAME, "");
                String customerListData = new Gson().toJson(tempcustomerList);
                ApplicationSettings.putPref(AppConstants.CUSTOMER_LIST_DATA, customerListData.toString());
                //System.out.print(customerListData.toString());
                clickToCall(number);
            }
        }
        submitButton.setVisibility(View.VISIBLE);
    }

    private void upSubStatus() {
        ContentValues cv = new ContentValues();
        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db1 = dbHelper.getWritableDatabase();

        if (status != null) {
            cv.put("STATUS", status);
        }
        if (subStatus1 != null) {
            cv.put("SUBSTATUS1", subStatus1);
        }
        if (subStatus2 != null) {
            cv.put("SUBSTATUS2", subStatus2);
        }

        String extraNotes = NotificationData.customerFeedback;
        if (extraNotes != null && !extraNotes.isEmpty()) {
            cv.put("EXTRANOTES", extraNotes);
        }

        if (remarks.getText().toString() != null && !remarks.getText().toString().isEmpty()) {
            NotificationData.remarks = remarks.getText().toString();
            ApplicationSettings.putPref(AFTER_CALL_NOTES, NotificationData.remarks);
        }

        String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
        if (questionsAct != null && !questionsAct.isEmpty()) {
            mmtStatus = ApplicationSettings.getPref(AppConstants.MMT_STATUS, "");
            mmtSubStatus1 = ApplicationSettings.getPref(AppConstants.MMT_SUBSTATUS, "");
            if (mmtStatus != null && !mmtStatus.isEmpty())
                status = mmtStatus;
            if (mmtSubStatus1 != null && !mmtSubStatus1.isEmpty())
                subStatus1 = mmtSubStatus1;
        }
        if (reminderdbId != 0) {
            db1.update("remindertbNew", cv, "_id=" + reminderdbId, null);
        } else if (lastDbId != 0) {
            db1.update("remindertbNew", cv, "_id=" + lastDbId, null);
        }
        if (db1 != null && db1.isOpen()) {
            db1.close();
        }
    }

    @Override
    protected void onStop() {
        super.onStop();
        if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
            boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
            if (ibControl) {

            }
        } else if (ApplicationSettings.containsPref(AppConstants.FK_CONTROL)) {
            boolean fkControl = ApplicationSettings.getPref(AppConstants.FK_CONTROL, false);
            if (fkControl) {
                if (UearnHome.retrySalesStageUpdateFailed) {

                } else {
                    if (CommonUtils.isNetworkAvailable(this)) {
                        hideSystemUI();
                        if (SmarterSMBApplication.callStateIsDisconnected) {

                        } else {
                            relaunchSameActivity();
                        }
                    }
                }
            }
        } else if(SmarterSMBApplication.stayAtHomeScenario && !SmarterSMBApplication.relaunchSameActivityStayHome){
            SmarterSMBApplication.relaunchSameActivityStayHome = true;
            if (UearnHome.retrySalesStageUpdateFailed) {

            } else if (SmarterSMBApplication.currentAppState != null && !SmarterSMBApplication.currentAppState.isEmpty() && SmarterSMBApplication.currentAppState.equalsIgnoreCase("ACP")) {

            } else {
                Intent currentIntent = new Intent("android.intent.action.MAIN");
                currentIntent.setComponent(getIntent().getComponent());
                currentIntent.addCategory("android.intent.category.LAUNCHER");
                currentIntent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
                startActivity(currentIntent);
            }
        }
    }

    private void updateMyTbl(long dbid, String connectedNumber) {
        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db1 = dbHelper.getWritableDatabase();
        ContentValues cv = new ContentValues();

        if (connectedNumber.contains("")) {
            connectedNumber = connectedNumber.replaceAll("\\s+", "");
        }
        if (connectedNumber != null && !connectedNumber.isEmpty() && !connectedNumber.startsWith("+")) {
            connectedNumber = "+" + connectedNumber;
        }

        cv.put("TO1", connectedNumber);
        if (dbid != 0) {
            db1.update("mytbl", cv, "_id=" + dbid, null);
            if (db1 != null && db1.isOpen()) {
                db1.close();
            }
        }
    }

    private void updateAppointmentCall(GetCalendarEntryInfo getCalendarEntryInfo) {

        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        ContentValues cv = new ContentValues();

        boolean serverAptUpdates = ApplicationSettings.getPref(AppConstants.SERVER_APT_UPDATES, false);

        if (serverAptUpdates) {
            cv.put("UPLOAD_STATUS", 1);
        } else {
            cv.put("UPLOAD_STATUS", 0);
        }
        cv.put("COMPLETED", 1);
        cv.put("RESPONSE_STATUS", "completed");
        cv.put("APPOINTMENT_TYPE", "complete_appointment");
        if (localdbId != 0) {
            db.update("remindertbNew", cv, "_id=" + localdbId, null);
        }
        if (db != null && db.isOpen()) {
            db.close();
        }
    }

    private void updateRnRLocaldb(int rnr_count, String customerNumber) {
        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        ArrayList<Long> ids = new ArrayList<>();

        Cursor cur = db.rawQuery("SELECT * FROM remindertbNew where TO1=" + "'" + customerNumber + "'", null);
        cur.moveToFirst();
        int i = 0;
        try {
            if (cur != null && cur.getCount() > 0) {
                while (!cur.isAfterLast()) {
                    long id = cur.getLong(cur.getColumnIndex("_id"));
                    ids.add(id);
                    cur.moveToNext();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cur.close();
        }

        if (duraionOfACall != null && !(duraionOfACall.equalsIgnoreCase("0"))) {
            rnr_count = 0;
        }
        if (ids != null && !ids.isEmpty()) {
            for (int k = 0; k < ids.size(); k++) {
                try {
                    ContentValues cv = new ContentValues();
                    cv.put("RNR_COUNT", rnr_count);
                    Long id = ids.get(k);
                    if (id != 0) {
                        db.update("remindertbNew", cv, "_id=" + id, null);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        if (db != null && db.isOpen()) {
            db.close();
        }
    }

    private boolean chechFirstCall(String number) {
        if (reminderdbId != 0) {
            return true;
        }
        if (number != null) {
            MySql dbhelpr = MySql.getInstance(SmarterSMBApplication.currentActivity);
            SQLiteDatabase dbase = dbhelpr.getWritableDatabase();
            Long current = System.currentTimeMillis();
            String selection = "START_TIME" + "<=" + current + " AND " + "TO1=" + "'" + number + "'" + " AND " + "STATUS != 'deleted' " + " AND" + " RESPONSE_STATUS = 'accepted' ";
            Cursor cursor = dbase.query("remindertbNew", null, selection, null, null, null, null);
            try {
                if (cursor != null && cursor.getCount() > 0) {
                    return true;
                }
            } finally {
                if (cursor != null) {
                    cursor.close();
                }
                if (dbase != null && dbase.isOpen()) {
                    dbase.close();
                }
            }
        }
        return false;
    }

    private void createFirstCallFollowup() {
        String statusValue = checkSalesList();

        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db = dbHelper.getWritableDatabase();

        long start_time = System.currentTimeMillis();
        long endTime = (start_time + (60 * 60 * 1000));

        ContentValues cv = new ContentValues();
        cv.put("SUBJECT", "");
        cv.put("NOTES", "");
        cv.put("START_TIME", start_time);
        cv.put("END_TIME", endTime);
        cv.put("LOCATION", "");
        cv.put("COMPANY_NAME", "");
        cv.put("DESIGNATION", "");
        cv.put("EMAILID", "");
        cv.put("WEBSITE", "");
        if (dbstatusString != null && !dbstatusString.isEmpty()) {
            cv.put("STATUS", dbstatusString);
        } else if (status != null && !status.isEmpty()) {
            cv.put("STATUS", status);
        } else {
            if (statusValue != null) {
                cv.put("STATUS", statusValue);
            } else {
                cv.put("STATUS", "NEW DATA");
            }
        }
        cv.put("UPLOAD_STATUS", 0);
        cv.put("ALARMSETTO", 0);
        cv.put("COMPANY_ADDRESS", "");
        cv.put("PRODUCT_TYPE", "");
        cv.put("ORDER_POTENTIAL", "");
        cv.put("LEAD_SOURCE", "");
        cv.put("FLP_COUNT", 0);
        cv.put("UPDATED_AT", start_time);
        if (callStartTime != null && !(callStartTime.isEmpty())) {
            cv.put("CREATED_AT", callStartTime);
            cv.put("UPDATED_AT", callStartTime);
        }

        cv.put("COMPLETED", 1);
        if (subStatus1 != null) {
            cv.put("SUBSTATUS1", subStatus1);
        }
        if (subStatus2 != null) {
            cv.put("SUBSTATUS2", subStatus2);
        }

        if (duraionOfACall != null && !(duraionOfACall.equalsIgnoreCase("0"))) {
            cv.put("RNR_COUNT", 1);
        } else {
            cv.put("RNR_COUNT", 0);
        }

        if (ApplicationSettings.getPref(AppConstants.AFTER_CALL_AUDIO_URL, "") != null) {
            cv.put("NOTES_AUDIO", ApplicationSettings.getPref(AppConstants.AFTER_CALL_AUDIO_URL, ""));
        }

        if (name1 != null) {
            cv.put("TONAME", name1);
        } else if (toname != null) {
            cv.put("TONAME", toname);
        }

        boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
        if (sequencialEndpoint) {
            if (customerNumber != null && !customerNumber.isEmpty()) {
                cv.put("TO1", customerNumber);
                if (!checkForAmeyoNumber(customerNumber)) {
                    cv.put("COMPLETED", 1);
                    cv.put("RESPONSE_STATUS", "completed");
                    db.insert("remindertbNew", null, cv);
                }
            }
        } else {
            if (customerNumber != null && !customerNumber.isEmpty()) {
                cv.put("TO1", customerNumber);
                if (!checkForAmeyoNumber(customerNumber)) {
                    cv.put("COMPLETED", 1);
                    cv.put("RESPONSE_STATUS", "completed");
                    db.insert("remindertbNew", null, cv);
                }
            }
        }

        if (db != null && db.isOpen()) {
            db.close();
        }
        dbHelper.close();
    }

    private boolean checkForAmeyoNumber(String phoneNumber) {
        if (phoneNumber != null) {
            phoneNumber = phoneNumber.replace(" ", "").replace("-", "");
            String[] ameyoNumber = loadCloudTelephony();
            if (ameyoNumber != null) {
                for (int i = 0; i < ameyoNumber.length; i++) {
                    if (PhoneNumberUtils.compare(phoneNumber, "+" + ameyoNumber[i])) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private String[] loadCloudTelephony() {
        return null;
    }

    private int getRNRCount() {
        int rnrCount = 1;
        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        if (customerNumber != null && !customerNumber.isEmpty()) {
            Long current = System.currentTimeMillis();
            String selection = "TO1=" + "'" + customerNumber + "'" + " AND " + "START_TIME" + "<=" + current;
            Cursor cur = db.query("remindertbNew", null, selection, null, null, null, "START_TIME ASC");
            try {
                if (cur != null && cur.getCount() > 0) {
                    cur.moveToFirst();
                    rnr_count = cur.getInt(cur.getColumnIndex("RNR_COUNT"));
                    rnr_id = cur.getLong(cur.getColumnIndex("_id"));
                    rnrCount = rnr_count;
                    return rnrCount;
                }
            } finally {
                cur.close();
                db.close();
            }
        }
        return rnrCount;
    }

    private Long getNextAppointmentData(String number) {
        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        long nextAppointmentdbId = 0L;
        Date date = new Date();
        String selection = "START_TIME" + ">" + date.getTime() + " AND " + "COMPLETED='" + 0 + "'";
        Cursor cursor = db.query("remindertbNew", null, selection, null, null, null, "START_TIME ASC");
        if (cursor.getCount() > 0) {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                String customer_number = cursor.getString(cursor.getColumnIndex("TO1"));
                if (PhoneNumberUtils.compare(customer_number, number)) {
                    nextAppointmentdbId = cursor.getLong(cursor.getColumnIndex("_id"));
                    appointmentId = cursor.getString(cursor.getColumnIndex("APPOINTMENT_ID"));
                }
                cursor.moveToNext();
            }
        }
        cursor.close();
        if (db.isOpen()) {
            db.close();
        }
        dbHelper.close();
        return nextAppointmentdbId;
    }

    private Long createNewAppointment() {

        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db = dbHelper.getWritableDatabase();

        if (reminderdbId != 0 && !cloudCheck) {
            Cursor cur = db.rawQuery("SELECT * FROM remindertbNew where _id=" + "'" + reminderdbId + "'", null);
            if (cur.getCount() > 0) {
                cur.moveToFirst();
                dbSubject = cur.getString(cur.getColumnIndex("SUBJECT"));
                if (ApplicationSettings.getPref(AFTER_CALL_NOTES, null) != null) {
                    dbNotes = ApplicationSettings.getPref(AFTER_CALL_NOTES, "");
                } else {
                    if (cur.getString(cur.getColumnIndex("NOTES")) == null) {
                        dbNotes = "";
                    } else {
                        dbNotes = cur.getString(cur.getColumnIndex("NOTES"));
                    }
                }
                dbLocation = cur.getString(cur.getColumnIndex("LOCATION"));
                dbCompanyName = cur.getString(cur.getColumnIndex("COMPANY_NAME"));
                dbDesignation = cur.getString(cur.getColumnIndex("DESIGNATION"));
                toNumber = cur.getString(cur.getColumnIndex("TO1"));
                dbImageUrl = cur.getString(cur.getColumnIndex("NOTES_IMAGE"));

                if (status != null) {
                    dbstatusString = status;
                } else {
                    dbstatusString = cur.getString(cur.getColumnIndex("STATUS"));
                }

                callRec_url = cur.getString(cur.getColumnIndex("CALLREC_URL"));
                toname = cur.getString(cur.getColumnIndex("TONAME"));
                db_appointmentId = cur.getString(cur.getColumnIndex("APPOINTMENT_ID"));
                dbwebsiteString = cur.getString(cur.getColumnIndex("WEBSITE"));
                db_external_reference = cur.getString(cur.getColumnIndex("EXTERNAL_REFERENCE"));
                dblead_source = cur.getString(cur.getColumnIndex("LEAD_SOURCE"));
                dbproduct_type = cur.getString(cur.getColumnIndex("PRODUCT_TYPE"));
                dbcompany_Address = cur.getString(cur.getColumnIndex("COMPANY_ADDRESS"));
                String followupValue = cur.getString(cur.getColumnIndex("FLP_COUNT"));
                if (followupValue != null && (!followupValue.isEmpty())) {
                    flpCount = Integer.parseInt(followupValue);
                    flpCount = flpCount + 1;
                } else {
                    flpCount = 1;
                }
                dbemailIdString = cur.getString(cur.getColumnIndex("EMAILID"));
                dborderValue = cur.getString(cur.getColumnIndex("ORDER_POTENTIAL"));
            }
            cur.close();
        }

        Long ameyoDbid = 0L;
        boolean sequencialEndpoint = ApplicationSettings.getPref(AppConstants.C2C_SEQUENCIAL_ENDPOINT, false);
        if (sequencialEndpoint) {
            if (UearnHome.manualDialing) {
                if (!existInDB()) {
                    String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
                    if (questionsAct != null && !questionsAct.isEmpty()) {

                    } else {
                        createDummyAppointmentForManualDial();
                    }
                    ameyoDbid = dosaveInDB();
                } else {
                    ameyoDbid = dosaveInDB();
                }
            } else {
                ameyoDbid = dosaveInDB();
            }
        } else {
            ameyoDbid = dosaveInDB();
        }

        if (db.isOpen()) {
            db.close();
        }
        dbHelper.close();
        return ameyoDbid;
    }

    private boolean existInDB() {
        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        Cursor cursor = db.rawQuery("SELECT * FROM remindertbNew where TO1=" + "'" + customerNumber + "'", null);
        return cursor.getCount() > 0;
    }

    private void createDummyAppointmentForManualDial() {

        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db = dbHelper.getWritableDatabase();

        long start_time = System.currentTimeMillis();
        long end_time = (start_time + (60 * 60 * 1000));

        ContentValues cv = new ContentValues();
        cv.put("START_TIME", start_time);
        cv.put("END_TIME", end_time);
        cv.put("STATUS", "NEW DATA");
        cv.put("TO1", customerNumber);

        cv.put("FLP_COUNT", 99);
        if (manualAndRNR) {
            cv.put("RNR_COUNT", 1);
            manualAndRNR = false;
        }

        if (cotactName != null && !(cotactName.isEmpty()) && !(cotactName.equalsIgnoreCase("NO NAME"))) {
            cv.put("TONAME", cotactName);
        } else if (toname != null && !(toname).isEmpty()) {
            cv.put("TONAME", toname);
        } else if (ApplicationSettings.containsPref(AFTER_CALL_NAME)) {
            String customerName = ApplicationSettings.getPref(AFTER_CALL_NAME, "");
            if (customerName != null && !(customerName.isEmpty())) {
                cv.put("TONAME", customerName);
            }
            ApplicationSettings.putPref(AFTER_CALL_NAME, "");
        } else {
            String customerName = getCallerName(customerNumber);
            if (customerName != null && !customerName.isEmpty()) {
                cv.put("TONAME", customerName);
            } else {
                cv.put("TONAME", "No Name");
            }
        }
        cv.put("UPLOAD_STATUS", 0);
        cv.put("COMPLETED", 1);
        cv.put("RESPONSE_STATUS", "completed");
        cv.put("APPOINTMENT_TYPE", "update_appointment");
        String start = CommonUtils.getTimeFormatInISO(new Date());
        cv.put("CREATED_AT", start_time);
        cv.put("UPDATED_AT", start_time);
        cv.put("ORDER_POTENTIAL", "");
        cv.put("ASSIGN_TO", assignToEmail);
        db.insert("remindertbNew", null, cv);

        if (db != null && db.isOpen()) {
            db.close();
        }
        if (dbHelper != null)
            dbHelper.close();
    }

    private void createDummyAppointmentForNewORNotInterestedScenario(String status, String substatus) {

        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db = dbHelper.getWritableDatabase();

        long start_time = System.currentTimeMillis();
        long end_time = (start_time + (60 * 60 * 1000));

        ContentValues cv = new ContentValues();
        cv.put("START_TIME", start_time);
        cv.put("END_TIME", end_time);
        cv.put("STATUS", status);
        cv.put("SUBSTATUS1", substatus);
        cv.put("TO1", customerNumber);

        cv.put("FLP_COUNT", 99);
        if (manualAndRNR) {
            cv.put("RNR_COUNT", 1);
            manualAndRNR = false;
        }

        if (cotactName != null && !(cotactName.isEmpty()) && !(cotactName.equalsIgnoreCase("NO NAME"))) {
            cv.put("TONAME", cotactName);
        } else if (toname != null && !(toname).isEmpty()) {
            cv.put("TONAME", toname);
        } else if (ApplicationSettings.containsPref(AFTER_CALL_NAME)) {
            String customerName = ApplicationSettings.getPref(AFTER_CALL_NAME, "");
            if (customerName != null && !(customerName.isEmpty())) {
                cv.put("TONAME", customerName);
            }
            ApplicationSettings.putPref(AFTER_CALL_NAME, "");
        } else {
            String customerName = getCallerName(customerNumber);
            if (customerName != null && !customerName.isEmpty()) {
                cv.put("TONAME", customerName);
            } else {
                cv.put("TONAME", "No Name");
            }
        }
        cv.put("UPLOAD_STATUS", 0);
        cv.put("COMPLETED", 1);
        cv.put("RESPONSE_STATUS", "completed");
        cv.put("APPOINTMENT_TYPE", "update_appointment");
        String start = CommonUtils.getTimeFormatInISO(new Date());
        cv.put("CREATED_AT", start_time);
        cv.put("UPDATED_AT", start_time);
        cv.put("ORDER_POTENTIAL", "");
        cv.put("ASSIGN_TO", assignToEmail);
        db.insert("remindertbNew", null, cv);

        if (db != null && db.isOpen()) {
            db.close();
        }
        if (dbHelper != null)
            dbHelper.close();
    }

    private void createDummyAppointmentForRedialScenario() {

        dummyAppointmentForRedial = true;

        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db = dbHelper.getWritableDatabase();

        long start_time = System.currentTimeMillis();
        long end_time = (start_time + (60 * 60 * 1000));

        ContentValues cv = new ContentValues();
        cv.put("START_TIME", start_time);
        cv.put("END_TIME", end_time);
        cv.put("STATUS", "NEW DATA");
        cv.put("TO1", customerNumber);

        cv.put("FLP_COUNT", 0);

        if (cotactName != null && !(cotactName.isEmpty()) && !(cotactName.equalsIgnoreCase("NO NAME"))) {
            cv.put("TONAME", cotactName);
        } else if (toname != null && !(toname).isEmpty()) {
            cv.put("TONAME", toname);
        } else if (ApplicationSettings.containsPref(AFTER_CALL_NAME)) {
            String customerName = ApplicationSettings.getPref(AFTER_CALL_NAME, "");
            if (customerName != null && !(customerName.isEmpty())) {
                cv.put("TONAME", customerName);
            }
            ApplicationSettings.putPref(AFTER_CALL_NAME, "");
        } else {
            String customerName = getCallerName(customerNumber);
            if (customerName != null && !customerName.isEmpty()) {
                cv.put("TONAME", customerName);
            } else {
                cv.put("TONAME", "No Name");
            }
        }

        String leadSource = NotificationData.leadSource;
        if (leadSource == null || leadSource.isEmpty()) {
            leadSource = getLeadSource(customerNumber);
        }
        cv.put("LEAD_SOURCE", leadSource);

        String customerToContact = ApplicationSettings.getPref(CUSTOMER_TO_CONTACT, "");
        if (customerToContact == null || customerToContact.isEmpty()) {
            customerToContact = getCustomerToContact(customerNumber);
        }
        cv.put("CUSTOMER_ID", customerToContact);

        cv.put("UPLOAD_STATUS", 0);
        cv.put("COMPLETED", 1);
        cv.put("RESPONSE_STATUS", "completed");
        cv.put("APPOINTMENT_TYPE", "update_appointment");
        String start = CommonUtils.getTimeFormatInISO(new Date());
        cv.put("CREATED_AT", start_time);
        cv.put("UPDATED_AT", start_time);
        cv.put("ORDER_POTENTIAL", "");
        cv.put("ASSIGN_TO", assignToEmail);
        db.insert("remindertbNew", null, cv);

        if (db != null && db.isOpen()) {
            db.close();
        }
        if (dbHelper != null)
            dbHelper.close();
    }

    private Long dosaveInDB() {

        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db = dbHelper.getWritableDatabase();

        Calendar calender = new GregorianCalendar(final_start_year, final_start_month, final_start_dayOfMonth, final_start_hour, final_start_min);
        long start_time = calender.getTimeInMillis();
        Calendar calender1 = new GregorianCalendar(final_end_year, final_end_month, final_end_dayOfMonth, final_end_hour, final_end_min);
        long end_time = calender1.getTimeInMillis();
        Date date = new Date();
        boolean canput = true;
        long alarmBefor = 0;
        ContentValues cv = new ContentValues();
        String userEmail = "";
        if (ApplicationSettings.getPref(AppConstants.USERINFO_EMAIL, "") != null) {
            userEmail = ApplicationSettings.getPref(AppConstants.USERINFO_EMAIL, "");
        }

        if (appointmentId != null && !appointmentId.isEmpty()) {
            cv.put("APPOINTMENT_ID", appointmentId);
            if (currentSubject != null && !currentSubject.equals("preflp") || !currentSubject.equals("postflp") && currentSalesStatus != null && !currentSalesStatus.equals("APT FIXED")) {
                cv.put("APPOINTMENT_TYPE", "update_appointment");
            }

            String asign = null;
        }

        cv.put("SUBJECT", dbSubject);
        cv.put("NOTES", ApplicationSettings.getPref(AFTER_CALL_NOTES, ""));
        cv.put("START_TIME", start_time);
        cv.put("END_TIME", end_time);
        cv.put("LOCATION", ApplicationSettings.getPref(AFTER_CALL_ADDRESS, ""));
        cv.put("COMPANY_NAME", ApplicationSettings.getPref(AFTER_CALL_COMPANY, ""));
        cv.put("DESIGNATION", ApplicationSettings.getPref(AFTER_CALL_DESIGNATION, ""));
        cv.put("EMAILID", ApplicationSettings.getPref(AFTER_CALL_EMAIL, ""));
        cv.put("WEBSITE", dbwebsiteString);

        if (status != null) {
            cv.put("STATUS", status);
        } else {
            cv.put("STATUS", dbstatusString);
        }

        if (checkForAmeyoNumber(toNumber)) {
            cv.put("UPLOAD_STATUS", 1);
        } else {
            cv.put("UPLOAD_STATUS", 0);
        }
        cv.put("ALARMSETTO", alarmBefor);
        cv.put("COMPANY_ADDRESS", dbCompanyName);
        cv.put("PRODUCT_TYPE", dbproduct_type);
        if (dborderValue != null && !(dborderValue.equalsIgnoreCase("null"))) {
            cv.put("ORDER_POTENTIAL", dborderValue);
        } else {
            cv.put("ORDER_POTENTIAL", "");
        }

        if (subStatus1 != null) {
            cv.put("SUBSTATUS1", subStatus1);
        }
        if (callbackCheck) {
            subStatus2 = "CALLBACK";
        }
        if (subStatus2 != null && !(subStatus2.isEmpty())) {
            cv.put("SUBSTATUS2", subStatus2);
        } else {
            cv.put("SUBSTATUS2", "");
        }

        cv.put("LEAD_SOURCE", ApplicationSettings.getPref(AFTER_CALL_LEAD, ""));
        if (customerNumber != null && !(customerNumber.isEmpty())) {
            if (customerNumber.equals(NotificationData.dialledCustomerNumber))
                cv.put("TO1", customerNumber);
            else if (NotificationData.dialledCustomerNumber != null && !(NotificationData.dialledCustomerNumber.isEmpty())) {
                customerNumber = NotificationData.dialledCustomerNumber;
                cv.put("TO1", NotificationData.dialledCustomerNumber);
            } else {
                cv.put("TO1", customerNumber);
            }
        } else if (ApplicationSettings.getPref(AFTER_CALL_PHONE, "") != null) {
            customerNumber = ApplicationSettings.getPref(AFTER_CALL_PHONE, "");
            cv.put("TO1", ApplicationSettings.getPref(AFTER_CALL_PHONE, ""));
        }
        cv.put("RESPONSE_STATUS", "accepted");

        if (UearnHome.manualDialing) {
            if (flpCount > 1) {
                flpCount = flpCount + 1;
            } else {
                flpCount = 1;
            }
        }

        cv.put("FLP_COUNT", flpCount);
        if (duraionOfACall == null) {
            cv.put("RNR_COUNT", 0);
        } else if (!(duraionOfACall.equalsIgnoreCase("0")) || duraionOfACall.isEmpty()) {
            cv.put("RNR_COUNT", 0);
        } else {
            int rnr = rnr_count + 1;
            cv.put("RNR_COUNT", rnr);
        }

        if (dbImageUrl != null && !dbImageUrl.isEmpty()) {
            cv.put("NOTES_IMAGE", dbImageUrl);
        }
        cv.put("NOTES_AUDIO", ApplicationSettings.getPref(AppConstants.AFTER_CALL_AUDIO_URL, ""));

        if (cotactName != null && !(cotactName.isEmpty()) && !(cotactName.equalsIgnoreCase("NO NAME"))) {
            cv.put("TONAME", cotactName);
        } else if (ApplicationSettings.containsPref(AFTER_CALL_NAME)) {
            String customerName = ApplicationSettings.getPref(AFTER_CALL_NAME, "");
            if (customerName != null && !(customerName.isEmpty())) {
                cv.put("TONAME", customerName);
            }
            ApplicationSettings.putPref(AFTER_CALL_NAME, "");
        } else if (toname != null && !toname.isEmpty()) {
            cv.put("TONAME", toname);
        } else {
            cv.put("TONAME", "");
        }

        if (ameyocallStartTime != null && !(ameyocallStartTime.isEmpty())) {
            cv.put("CREATED_AT", ameyocallStartTime);
        }

        long alarm_set_to_current = 0L;
        if (true) {

            boolean aFollow = false;

            String cmeridian = "";
            if (mCalendar == null)
                mCalendar = Calendar.getInstance();
            int minute = mCalendar.get(Calendar.MINUTE);
            int hour = mCalendar.get(Calendar.HOUR_OF_DAY);
            if (mCalendar.getTime().getTime() > currentTime) {
                switch (mCalendar.get(Calendar.AM_PM)) {
                    case Calendar.AM:
                        cmeridian = "AM";
                        break;
                    case Calendar.PM:
                        cmeridian = "PM";
                        break;
                }
            }

            int hourTw = hour;

            if (hourTw > 12) {
                hourTw -= 12;
            }

            int finalHour = final_start_hour;

            if (finalHour > 12) {
                finalHour -= 12;
            }

            String timeSet = " ";
            if (final_start_min < 10) {
                timeSet = " " + finalHour + ":0" + final_start_min + " " + cmeridian;
            } else {
                timeSet = " " + finalHour + ":" + final_start_min + " " + cmeridian;
            }

            SimpleDateFormat fmt = new SimpleDateFormat("EEE MMM dd hh:mm");
            Calendar checkInstance = Calendar.getInstance();
            checkInstance.set(Calendar.DAY_OF_MONTH, final_start_dayOfMonth);
            checkInstance.set(Calendar.MONTH, final_start_month);
            checkInstance.set(Calendar.YEAR, final_start_year);
            checkInstance.set(Calendar.HOUR, final_start_hour);
            checkInstance.set(Calendar.MINUTE, final_start_year);

            String showDate = fmt.format(calender.getTime());

            if (calender.getTime().getTime() > currentTime) {
                switch (calender.get(Calendar.AM_PM)) {
                    case Calendar.AM:
                        cmeridian = "AM";
                        break;
                    case Calendar.PM:
                        cmeridian = "PM";
                        break;
                }
            }

            if (preAlarmSet) { // Check pre alarm condition
                alarm_set_to_current = start_time - (alarmBefore * 60 * 1000);
            } else {
                // Check for flp count
                if (dbstatusString != null) {
                    if (!dbstatusString.equalsIgnoreCase("OTHERS") && !dbstatusString.equalsIgnoreCase("LOST") && !dbstatusString.equalsIgnoreCase("NOT INTERESTED")) {
                        if (ApplicationSettings.getPref(AppConstants.AUTO_FOLLOW_UPS_SETTINGS, false)) {
                            Toast.makeText(this, "Auto follow-up set for \n" + showDate + cmeridian, Toast.LENGTH_SHORT).show();
                            aFollow = true;
                        }
                        alarm_set_to_current = start_time - (alarmBefore * 60 * 1000);
                    }
                }
            }

            if (dbstatusString != null) {
                if (!dbstatusString.equalsIgnoreCase("OTHERS") && !dbstatusString.equalsIgnoreCase("LOST") && !aFollow && !dbstatusString.equalsIgnoreCase("NOT INTERESTED")) {
                    Calendar verifyCalendar = Calendar.getInstance();
                    int verifyDayOfMonth = verifyCalendar.get(Calendar.DAY_OF_MONTH);
                    int verifyMonth = verifyCalendar.get(Calendar.MONTH);
                    if ((final_start_dayOfMonth == verifyDayOfMonth) && (final_start_month == verifyMonth)) {
                        if (assignToEmail != null && assignToEmail.equalsIgnoreCase(userEmail)) {
                            Toast.makeText(this, "Next follow up set at \n" + timeSet + " to " + assignToEmail, Toast.LENGTH_SHORT).show();
                        } else {
                            Toast.makeText(this, "Next follow up set at\n" + timeSet, Toast.LENGTH_SHORT).show();
                        }
                    } else {
                        if (assignToEmail != null && assignToEmail.equalsIgnoreCase(userEmail)) {
                            Toast.makeText(this, "Next follow up set at \n" + showDate + timeSet + " to " + assignToEmail, Toast.LENGTH_SHORT).show();
                        } else {
                            Toast.makeText(this, "Next follow up set at\n" + showDate + timeSet, Toast.LENGTH_SHORT).show();
                        }
                    }
                }
            }

            if (!cloudCheck) {
                if (nextAppointment_dbId != 0) {
                    if (db == null) {
                        db = dbHelper.getWritableDatabase();
                    }
                    db.update("remindertbNew", cv, "_id=" + nextAppointment_dbId, null);

                    if (dbstatusString != null) {
                        if (!dbstatusString.equalsIgnoreCase("OTHERS") && !dbstatusString.equalsIgnoreCase("LOST") && !dbstatusString.equalsIgnoreCase("NOT INTERESTED")) {
                            CommonUtils.setAlarm(this, nextAppointment_dbId, alarm_set_to_current, "");
                        }
                    }
                    if (db != null && db.isOpen()) {
                        db.close();
                    }
                    dbHelper.close();

                    return nextAppointment_dbId;
                } else {
                    if (db == null) {
                        db = dbHelper.getWritableDatabase();
                    }

                    long dbId = db.insert("remindertbNew", null, cv);
                    if (dbstatusString != null) {
                        if (!dbstatusString.equalsIgnoreCase("OTHERS") && !dbstatusString.equalsIgnoreCase("LOST") && !dbstatusString.equalsIgnoreCase("NOT INTERESTED")) {
                            if (assignToEmail != null && assignToEmail.equalsIgnoreCase(userEmail)) {
                                CommonUtils.setAlarm(this, dbId, alarm_set_to_current, "");
                            }
                        }
                    }

                    if (db != null && db.isOpen()) {
                        db.close();
                    }
                    if (dbHelper != null)
                        dbHelper.close();
                    return dbId;
                }
            } else {
                if (callStartTime != null) {
                    cv.put("CALL_STARTIME", callStartTime);
                }

                if (db == null) {
                    db = dbHelper.getWritableDatabase();
                }
                Long dbId = db.insert("AmeyoReminderTable", null, cv);

                if (dbstatusString != null) {
                    if (!dbstatusString.equalsIgnoreCase("OTHERS") && !dbstatusString.equalsIgnoreCase("LOST") && !dbstatusString.equalsIgnoreCase("NOT INTERESTED")) {
                        CommonUtils.setAlarm(this, dbId, alarm_set_to_current, "");
                    }
                }
                if (db != null && db.isOpen()) {
                    db.close();
                }
                if (dbHelper != null)
                    dbHelper.close();
                return dbId;
            }
        }
        return 0L;
    }

    private void setrnrFollowup() {
        if (ApplicationSettings.containsPref(AppConstants.RNR_REMINDER)) {
            int rnrReminder = ApplicationSettings.getPref(AppConstants.RNR_REMINDER, 0);

            if (rnrReminder == 1) {
                int calculateMinute3 = Calendar.getInstance().get(Calendar.MINUTE) + 60;
                int calculateHour3 = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
                String closeTime = ApplicationSettings.getPref(AppConstants.CLOSE_TIME, null);
                String openTime = ApplicationSettings.getPref(AppConstants.OPEN_TIME, null);
                int close = 0, open = 0;
                try {
                    if (calculateMinute3 >= 60) {
                        final_start_min = calculateMinute3 - 60;
                        final_start_hour = calculateHour3 + 1;
                    } else {
                        final_start_min = calculateMinute3;
                        final_start_hour = calculateHour3;
                    }

                    int calculateEndMinute3 = Calendar.getInstance().get(Calendar.MINUTE) + 75;

                    if (calculateEndMinute3 >= 60) {
                        final_end_min = calculateEndMinute3 - 60;
                        final_end_hour = calculateHour3 + 1;

                        if (final_end_min >= 60) {
                            final_end_min = final_end_min - 60;
                            final_end_hour = calculateHour3 + 1;
                        }
                    }

                    Calendar cDtTm2 = Calendar.getInstance();

                    final_start_year = cDtTm2.get(Calendar.YEAR);
                    final_start_month = cDtTm2.get(Calendar.MONTH);
                    final_start_dayOfMonth = cDtTm2.get(Calendar.DAY_OF_MONTH);
                    final_end_year = cDtTm2.get(Calendar.YEAR);
                    final_end_month = cDtTm2.get(Calendar.MONTH);
                    final_end_dayOfMonth = cDtTm2.get(Calendar.DAY_OF_MONTH);

                    if ((open > final_start_hour) && (close < final_start_hour)) {

                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (rnrReminder > 1) {
                int calculateMinute3 = Calendar.getInstance().get(Calendar.MINUTE);
                int calculateHour3 = Calendar.getInstance().get(Calendar.HOUR_OF_DAY) + rnrReminder;

                if (calculateMinute3 >= 60) {
                    final_start_min = calculateMinute3 - 60;
                    final_start_hour = calculateHour3 + 1;
                } else {
                    final_start_min = calculateMinute3;
                    final_start_hour = calculateHour3;
                }

                int calculateEndMinute3 = Calendar.getInstance().get(Calendar.MINUTE) + 75;

                if (calculateEndMinute3 >= 60) {
                    final_end_min = calculateEndMinute3 - 60;
                    final_end_hour = calculateHour3 + 1;

                    if (final_end_min >= 60) {
                        final_end_min = final_end_min - 60;
                        final_end_hour = calculateHour3 + 1;
                    }
                }

                Calendar cDtTm2 = Calendar.getInstance();

                final_start_year = cDtTm2.get(Calendar.YEAR);
                final_start_month = cDtTm2.get(Calendar.MONTH);
                final_start_dayOfMonth = cDtTm2.get(Calendar.DAY_OF_MONTH);
                final_end_year = cDtTm2.get(Calendar.YEAR);
                final_end_month = cDtTm2.get(Calendar.MONTH);
                final_end_dayOfMonth = cDtTm2.get(Calendar.DAY_OF_MONTH);
            }
        }
    }

    @Override
    public void selectedIndices(List<Integer> indices) {

    }

    @Override
    public void selectedStrings(List<String> data) {
        if (data != null && data.size() > 0) {
            multiSelectionDropDownValueFromList = data.toString();
        }
    }

    @Override
    public void onCheckedChanged(RadioGroup group, int checkedId) {
        RadioButton button = (RadioButton) findViewById(checkedId);
        currentSelectedRadioButton = button.getText().toString();
    }

    class CallDisconnectInfo extends AsyncTask<Void, Void, Void> {

        @Override
        protected Void doInBackground(Void... params) {
            sendCallDisconnectInfoToServer(NotificationData.dialledCustomerNumber, NotificationData.source);
            return null;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected void onPostExecute(Void aVoid) {
            super.onPostExecute(aVoid);
        }
    }

    class TransferCallRequest extends AsyncTask<Void, Void, Void> {

        @Override
        protected Void doInBackground(Void... params) {
            sendTransferCallRequestToServer(NotificationData.dialledCustomerNumber);
            return null;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected void onPostExecute(Void aVoid) {
            super.onPostExecute(aVoid);
        }
    }

    class MergeCallRequest extends AsyncTask<Void, Void, Void> {

        @Override
        protected Void doInBackground(Void... params) {
            sendMergeCallRequestToServer(NotificationData.dialledCustomerNumber);
            return null;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected void onPostExecute(Void aVoid) {
            super.onPostExecute(aVoid);
        }
    }

    @Override
    protected void onPause() {
        super.onPause();
        overridePendingTransition(0, 0);
        if (ApplicationSettings.containsPref(AppConstants.IB_CONTROL)) {
            boolean ibControl = ApplicationSettings.getPref(AppConstants.IB_CONTROL, false);
            if (ibControl) {

            }
        } else if (ApplicationSettings.containsPref(AppConstants.FK_CONTROL)) {
            boolean fkControl = ApplicationSettings.getPref(AppConstants.FK_CONTROL, false);
            if (fkControl) {
                if (UearnHome.retrySalesStageUpdateFailed) {

                } else if (SmarterSMBApplication.currentAppState != null && !SmarterSMBApplication.currentAppState.isEmpty() && (SmarterSMBApplication.currentAppState.equalsIgnoreCase("Connected") || SmarterSMBApplication.currentAppState.equalsIgnoreCase("ACP"))) {

                } else {
                    if (CommonUtils.isNetworkAvailable(this)) {
                        if(SmarterSMBApplication.notificationAlertReceived){
                            SmarterSMBApplication.notificationAlertReceived = false;
                        } else {
                            hideSystemUI();
                            relaunchSameActivity();
                        }
                    }
                }
            }
        } else if(SmarterSMBApplication.stayAtHomeScenario && !SmarterSMBApplication.relaunchSameActivityStayHome){
            SmarterSMBApplication.relaunchSameActivityStayHome = true;
            if (UearnHome.retrySalesStageUpdateFailed) {

            } else if (SmarterSMBApplication.currentAppState != null && !SmarterSMBApplication.currentAppState.isEmpty() && SmarterSMBApplication.currentAppState.equalsIgnoreCase("ACP")) {

            } else {
                Intent currentIntent = new Intent("android.intent.action.MAIN");
                currentIntent.setComponent(getIntent().getComponent());
                currentIntent.addCategory("android.intent.category.LAUNCHER");
                currentIntent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
                startActivity(currentIntent);
            }
        }
    }

    @Override
    protected void onStart() {
        super.onStart();
        APP_MOVED_TO_BACKGROUND = false;
    }

    public void resetYesNoButton() {
        yesButton.setBackground(getResources().getDrawable(R.drawable.call_flow_button));
        yesButton.setTextColor(ContextCompat.getColor(this, R.color.ques_text_color));
        noButton.setBackground(getResources().getDrawable(R.drawable.call_flow_button));
        noButton.setTextColor(ContextCompat.getColor(this, R.color.ques_text_color));
    }

    private void initSeekBar() {
        ratingsView.setOnRatingBarChangeListener(new RatingBar.OnRatingBarChangeListener() {
            @Override
            public void onRatingChanged(RatingBar ratingBar, float rating, boolean fromUser) {
                customerRatings.setText("Value:" + String.valueOf(rating));
            }
        });
    }

    private void createButtons(String key, String selectedButton) {

        final List<String> buttonValues = new ArrayList<>();

        if (buttonHash.containsKey(key)) {
            String buttonData = buttonHash.get(key).toString();
            if (buttonData != null && !buttonData.isEmpty()) {
                if (buttonData.contains("[")) {
                    buttonData = buttonData.replace("[", "");
                }
                if (buttonData.contains("]")) {
                    buttonData = buttonData.replace("]", "");
                }
            }
            String[] buttonArray = buttonData.split(",");
            for (int i = 0; i < buttonArray.length; i++) {
                if (buttonArray[i].contains("'")) {
                    buttonArray[i] = buttonArray[i].substring(1, buttonArray[i].length() - 1);
                    if (buttonArray[i].contains("'")) {
                        buttonArray[i] = buttonArray[i].substring(1, buttonArray[i].length());
                    }
                    buttonValues.add(buttonArray[i]);
                }
            }
        }

        int num = buttonValues.size();

        if (num % 2 == 0) {
            LinearLayout layout = (LinearLayout) findViewById(R.id.buttonsLayout);
            layout.setOrientation(LinearLayout.VERTICAL);
            layout.removeAllViews();

            if (rootQ.startsWith("<html>")) {
                buttonsTextView.setVisibility(View.GONE);
                buttonsWebView.setVisibility(View.VISIBLE);
                buttonsWebView.loadData(rootQ, "text/html", "UTF-8");
            } else {
                buttonsWebView.setVisibility(View.GONE);
                buttonsTextView.setVisibility(View.VISIBLE);
                buttonsTextView.setText(rootQ);
            }

            layout.addView(buttonsTextView);
            layout.addView(buttonsWebView);

            TableLayout buttonTable = new TableLayout(this);
            TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams(TableLayout.LayoutParams.MATCH_PARENT, TableLayout.LayoutParams.WRAP_CONTENT);
            tableLayoutParams.setMargins(25, 15, 15, 25);
            buttonTable.setLayoutParams(tableLayoutParams);
            buttonTable.setColumnStretchable(0, true);
            buttonTable.setColumnStretchable(1, true);
            buttonTable.setStretchAllColumns(true);

            for (int i = 0; i < buttonValues.size(); i += 2) {

                TableRow buttonTableRow = new TableRow(this);
                buttonTableRow.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT));

                Button buttonLeft = new Button(this);
                TableRow.LayoutParams buttonLeftParam = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT, 1.0f);
                buttonLeftParam.setMargins(10, 10, 10, 10);
                buttonLeft.setLayoutParams(buttonLeftParam);
                buttonLeft.setGravity(Gravity.CENTER);
                buttonLeft.setBackground(getResources().getDrawable(R.drawable.call_flow_button));
                buttonLeft.setOnClickListener(this);
                buttonLeft.setText(buttonValues.get(i));

                if(selectedButton != null && !selectedButton.isEmpty() && selectedButton.equalsIgnoreCase(buttonValues.get(i))){
                    buttonLeft.setTextColor(getResources().getColor(R.color.white));
                    buttonLeft.setBackground(getResources().getDrawable(R.drawable.call_flow_button_red));
                }

                buttonLeft.setId(i);
                buttonTableRow.addView(buttonLeft);

                Button buttonRight = new Button(this);
                TableRow.LayoutParams buttonRightParam = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT, 1.0f);
                buttonRightParam.setMargins(10, 10, 10, 10);
                buttonRight.setLayoutParams(buttonRightParam);
                buttonRight.setGravity(Gravity.CENTER);
                buttonRight.setBackground(getResources().getDrawable(R.drawable.call_flow_button));
                buttonRight.setOnClickListener(this);
                buttonRight.setText(buttonValues.get(i + 1));

                if(selectedButton != null && !selectedButton.isEmpty() && selectedButton.equalsIgnoreCase(buttonValues.get(i + 1))){
                    buttonRight.setTextColor(getResources().getColor(R.color.white));
                    buttonRight.setBackground(getResources().getDrawable(R.drawable.call_flow_button_red));
                }

                buttonRight.setId(i + 1);
                buttonTableRow.addView(buttonRight);

                buttonTable.addView(buttonTableRow);
            }
            layout.addView(buttonTable);
        } else {
            LinearLayout layout = (LinearLayout) findViewById(R.id.buttonsLayout);
            layout.setOrientation(LinearLayout.VERTICAL);
            layout.removeAllViews();

            if (rootQ.startsWith("<html>")) {
                buttonsTextView.setVisibility(View.GONE);
                buttonsWebView.setVisibility(View.VISIBLE);
                buttonsWebView.loadData(rootQ, "text/html", "UTF-8");
            } else {
                buttonsWebView.setVisibility(View.GONE);
                buttonsTextView.setVisibility(View.VISIBLE);
                buttonsTextView.setText(rootQ);
            }

            layout.addView(buttonsTextView);
            layout.addView(buttonsWebView);

            TableLayout buttonTable = new TableLayout(this);
            TableLayout.LayoutParams tableLayoutParams = new TableLayout.LayoutParams(TableLayout.LayoutParams.MATCH_PARENT, TableLayout.LayoutParams.WRAP_CONTENT);
            tableLayoutParams.setMargins(25, 15, 15, 25);
            buttonTable.setLayoutParams(tableLayoutParams);
            buttonTable.setColumnStretchable(0, true);
            buttonTable.setColumnStretchable(1, true);
            buttonTable.setStretchAllColumns(true);

            for (int i = 0; i < buttonValues.size(); i += 2) {

                TableRow buttonTableRow = new TableRow(this);
                buttonTableRow.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT));

                Button buttonLeft = new Button(this);
                TableRow.LayoutParams buttonLeftParam = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT, 1.0f);
                buttonLeftParam.setMargins(10, 10, 10, 10);
                buttonLeft.setLayoutParams(buttonLeftParam);
                buttonLeft.setGravity(Gravity.CENTER);
                buttonLeft.setBackground(getResources().getDrawable(R.drawable.call_flow_button));
                buttonLeft.setOnClickListener(this);
                buttonLeft.setText(buttonValues.get(i));

                if(selectedButton != null && !selectedButton.isEmpty() && selectedButton.equalsIgnoreCase(buttonValues.get(i))){
                    buttonLeft.setTextColor(getResources().getColor(R.color.white));
                    buttonLeft.setBackground(getResources().getDrawable(R.drawable.call_flow_button_red));
                }

                buttonLeft.setId(i);
                buttonTableRow.addView(buttonLeft);

                Button buttonRight = new Button(this);
                TableRow.LayoutParams buttonRightParam = new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT, 1.0f);
                buttonRightParam.setMargins(10, 10, 10, 10);
                buttonRight.setLayoutParams(buttonRightParam);
                buttonRight.setGravity(Gravity.CENTER);
                buttonRight.setBackground(getResources().getDrawable(R.drawable.call_flow_button));
                buttonRight.setOnClickListener(this);
                if (buttonValues.size() > i + 1) {
                    buttonRight.setText(buttonValues.get(i + 1));

                    if(selectedButton != null && !selectedButton.isEmpty() && selectedButton.equalsIgnoreCase(buttonValues.get(i + 1))){
                        buttonRight.setTextColor(getResources().getColor(R.color.white));
                        buttonRight.setBackground(getResources().getDrawable(R.drawable.call_flow_button_red));
                    }

                    buttonRight.setId(i + 1);
                }
                buttonTableRow.addView(buttonRight);
                String buttonText = buttonRight.getText().toString();
                if (buttonText == null || buttonText.isEmpty()) {
                    buttonRight.setVisibility(View.INVISIBLE);
                } else {
                    buttonRight.setVisibility(View.VISIBLE);
                }
                buttonTable.addView(buttonTableRow);
            }
            layout.addView(buttonTable);
        }
    }

    private void createRadioButtons(String key) {

        final List<String> radiobuttonValues = new ArrayList<>();

        if (radiobuttonHash.containsKey(key)) {
            String radiobuttonData = radiobuttonHash.get(key).toString();
            if (radiobuttonData != null && !radiobuttonData.isEmpty()) {
                if (radiobuttonData.contains("[")) {
                    radiobuttonData = radiobuttonData.replace("[", "");
                }
                if (radiobuttonData.contains("]")) {
                    radiobuttonData = radiobuttonData.replace("]", "");
                }
            }
            String[] radiobuttonArray = radiobuttonData.split(",");
            for (int i = 0; i < radiobuttonArray.length; i++) {
                if (radiobuttonArray[i].contains("'")) {
                    radiobuttonArray[i] = radiobuttonArray[i].substring(1, radiobuttonArray[i].length() - 1);
                    if (radiobuttonArray[i].contains("'")) {
                        radiobuttonArray[i] = radiobuttonArray[i].substring(1, radiobuttonArray[i].length());
                    }
                    radiobuttonValues.add(radiobuttonArray[i]);
                }
            }
        }

        int num = radiobuttonValues.size();

        LinearLayout layout = (LinearLayout) findViewById(R.id.radiobuttonsLayout);
        layout.setOrientation(LinearLayout.VERTICAL);
        layout.removeAllViews();

        if (rootQ.startsWith("<html>")) {
            radiobuttonsTextView.setVisibility(View.GONE);
            radiobuttonsWebView.setVisibility(View.VISIBLE);
            radiobuttonsWebView.loadData(rootQ, "text/html", "UTF-8");
        } else {
            radiobuttonsWebView.setVisibility(View.GONE);
            radiobuttonsTextView.setVisibility(View.VISIBLE);
            radiobuttonsTextView.setText(rootQ);
        }

        layout.addView(radiobuttonsTextView);
        layout.addView(radiobuttonsWebView);

        RelativeLayout relativeLayout = new RelativeLayout(this);
        RelativeLayout.LayoutParams relativeLayoutParams = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
        relativeLayoutParams.setMargins(65, 25, 25, 25);
        relativeLayout.setLayoutParams(relativeLayoutParams);

        RadioButton[] rb = new RadioButton[num];
        rg = new RadioGroup(this); //create the RadioGroup
        rg.setOrientation(RadioGroup.VERTICAL);//or RadioGroup.VERTICAL
        rg.setOnCheckedChangeListener(this);
        RadioGroup.LayoutParams params = new RadioGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        params.setMargins(65, 12, 25, 15);

        for (int i = 0; i < radiobuttonValues.size(); i++) {
            rb[i] = new RadioButton(this);
            rb[i].setScaleX(1.2f);
            rb[i].setScaleY(1.2f);
            rb[i].setText(radiobuttonValues.get(i));
            rb[i].setPadding(20,0,20,0);
            rb[i].setLayoutParams(params);
            rg.setLayoutParams(params);
            rg.addView(rb[i]); //the RadioButtons are added to the radioGroup instead of the layout
        }
        relativeLayout.addView(rg);
        layout.addView(relativeLayout);
    }

    private void createNumberPicker(String key) {

        if (rootQ.startsWith("<html>")) {
            numberpickerTextView.setVisibility(View.GONE);
            numberpickerWebView.setVisibility(View.VISIBLE);
            numberpickerWebView.loadData(rootQ, "text/html", "UTF-8");
        } else {
            numberpickerWebView.setVisibility(View.GONE);
            numberpickerTextView.setVisibility(View.VISIBLE);
            numberpickerTextView.setText(rootQ);
        }

        final Button btn_less = findViewById(R.id.btn_less);
        btn_less.setOnClickListener(new AddHandler(-1));

        final Button btn_more = findViewById(R.id.btn_more);
        btn_more.setOnClickListener(new AddHandler(1));
    }

    private void createSpinner(String key) {

        final List<String> dropDownValues = new ArrayList<>();
        questionerDropDownValues = new ArrayList<>();

        if (dropDownHash.containsKey(key)) {
            String dropDownData = dropDownHash.get(key).toString();
            if (dropDownData != null && !dropDownData.isEmpty()) {
                if (dropDownData.contains("[")) {
                    dropDownData = dropDownData.replace("[", "");
                }
                if (dropDownData.contains("]")) {
                    dropDownData = dropDownData.replace("]", "");
                }
            }
            String[] dropDownArray = dropDownData.split(",");
            for (int i = 0; i < dropDownArray.length; i++) {
                if (dropDownArray[i].contains("'")) {
                    dropDownArray[i] = dropDownArray[i].substring(1, dropDownArray[i].length() - 1);
                    if (dropDownArray[i].contains("'")) {
                        dropDownArray[i] = dropDownArray[i].substring(1, dropDownArray[i].length());
                    }
                    questionerDropDownValues.add(dropDownArray[i]);
                    dropDownValues.add(dropDownArray[i]);
                }
            }
        }

        spinner = findViewById(R.id.activity_spinner1);


        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, dropDownValues) {

            public View getView(int position, View convertView, ViewGroup parent) {
                View v = super.getView(position, convertView, parent);
                Typeface font = Typeface.createFromAsset(getAssets(), "fonts/poppins.medium.ttf");
                ((TextView) v).setTypeface(font);
                ((TextView) v).setTextColor(getResources().getColor(R.color.ques_text_color));
                return v;
            }

            public View getDropDownView(int position, View convertView, ViewGroup parent) {
                View v = super.getDropDownView(position, convertView, parent);
                Typeface font = Typeface.createFromAsset(getAssets(), "fonts/poppins.medium.ttf");
                ((TextView) v).setTypeface(font);
                ((TextView) v).setTextColor(getResources().getColor(R.color.ques_text_color));
                return v;
            }
        };

        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinner.setAdapter(adapter);

        final String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
        if (questionsAct != null && !questionsAct.isEmpty()) {
            if (dropDownValues != null && dropDownValues.size() > 0) {
                for (int i = 0; i < dropDownValues.size(); i++) {
                    String title = dropDownValues.get(i);
                    if (statusString != null && !statusString.isEmpty() && statusString.equalsIgnoreCase(title)) {
                        spinner.setSelection(i);
                        break;
                    } else if (dropDownValueFromList != null && !dropDownValueFromList.isEmpty() && dropDownValueFromList.equalsIgnoreCase(title)) {
                        spinner.setSelection(i);
                        break;
                    }
                }
            }
        }

        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                String title = dropDownValues.get(i);
                dropDownHasItem = false;
                if (title != null && !title.isEmpty() && !title.equalsIgnoreCase("Choose an option")) {
                    dropDownValueFromList = title;
                    if (title != null && !title.isEmpty() && title.contains("\n")) {
                        title = title.replace("\n", "");
                    }
                    dropDownHasItem = true;
                    currentSelectedScenario = title;
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });
    }

    private void createSearchableSpinner(String key) {

        final List<String> dropDownValues = new ArrayList<>();

        if (searchableDropDownHash.containsKey(key)) {
            String dropDownData = searchableDropDownHash.get(key).toString();
            if (dropDownData != null && !dropDownData.isEmpty()) {
                if (dropDownData.contains("[")) {
                    dropDownData = dropDownData.replace("[", "");
                }
                if (dropDownData.contains("]")) {
                    dropDownData = dropDownData.replace("]", "");
                }
            }
            String[] dropDownArray = dropDownData.split(",");
            for (int i = 0; i < dropDownArray.length; i++) {
                if (dropDownArray[i].contains("'")) {
                    dropDownArray[i] = dropDownArray[i].substring(1, dropDownArray[i].length() - 1);
                    if (dropDownArray[i].contains("'")) {
                        dropDownArray[i] = dropDownArray[i].substring(1, dropDownArray[i].length());
                    }
                    dropDownValues.add(dropDownArray[i]);
                }
            }
        }

        searchableSpinner = findViewById(R.id.activity_searchableSpinner);

        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, dropDownValues) {

            public View getView(int position, View convertView, ViewGroup parent) {
                View v = super.getView(position, convertView, parent);
                Typeface font = Typeface.createFromAsset(getAssets(), "fonts/poppins.medium.ttf");
                ((TextView) v).setTypeface(font);
                ((TextView) v).setTextColor(getResources().getColor(R.color.ques_text_color));
                return v;
            }

            public View getDropDownView(int position, View convertView, ViewGroup parent) {
                View v = super.getDropDownView(position, convertView, parent);
                Typeface font = Typeface.createFromAsset(getAssets(), "fonts/poppins.medium.ttf");
                ((TextView) v).setTypeface(font);
                ((TextView) v).setTextColor(getResources().getColor(R.color.ques_text_color));
                return v;
            }
        };
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        searchableSpinner.setAdapter(adapter);

        if (dropDownValues != null && dropDownValues.size() > 0) {
            for (int i = 0; i < dropDownValues.size(); i++) {
                String title = dropDownValues.get(i);
                if (searchableDropDownValueFromList != null && !searchableDropDownValueFromList.isEmpty() && searchableDropDownValueFromList.equalsIgnoreCase(title)) {
                    searchableSpinner.setSelection(i);
                    break;
                }
            }
        }

        searchableSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                String title = dropDownValues.get(i);
                searchableDropDownValueFromList = title;
                currentSelectedScenario = title;
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });
    }

    private void createMultiSelectionSpinner(String key) {

        final List<String> dropDownValues = new ArrayList<>();

        if (multiSelectionDropDownHash.containsKey(key)) {
            String dropDownData = multiSelectionDropDownHash.get(key).toString();
            if (dropDownData != null && !dropDownData.isEmpty()) {
                if (dropDownData.contains("[")) {
                    dropDownData = dropDownData.replace("[", "");
                }
                if (dropDownData.contains("]")) {
                    dropDownData = dropDownData.replace("]", "");
                }
            }
            String[] dropDownArray = dropDownData.split(",");
            for (int i = 0; i < dropDownArray.length; i++) {
                if (dropDownArray[i].contains("'")) {
                    dropDownArray[i] = dropDownArray[i].substring(1, dropDownArray[i].length() - 1);
                    if (dropDownArray[i].contains("'")) {
                        dropDownArray[i] = dropDownArray[i].substring(1, dropDownArray[i].length());
                    }
                    dropDownValues.add(dropDownArray[i]);
                }
            }
        }

        multiSelectionSpinner = findViewById(R.id.activity_multiselectionSpinner);
        multiSelectionSpinner.setItems(dropDownValues);
        multiSelectionSpinner.setListener(this);

        if(multiSelectionDropDownValueFromList != null && !multiSelectionDropDownValueFromList.isEmpty()){
            if (multiSelectionDropDownValueFromList != null && !multiSelectionDropDownValueFromList.isEmpty()) {
                if (multiSelectionDropDownValueFromList.contains("[")) {
                    multiSelectionDropDownValueFromList = multiSelectionDropDownValueFromList.replace("[", "");
                }
                if (multiSelectionDropDownValueFromList.contains("]")) {
                    multiSelectionDropDownValueFromList = multiSelectionDropDownValueFromList.replace("]", "");
                }
            }
            String[] valueList = multiSelectionDropDownValueFromList.split("\\s*,\\s*");
            multiSelectionSpinner.setSelection(valueList);
        } else {
            if(dropDownValues != null && dropDownValues.size() > 0) {
                multiSelectionDropDownValueFromList = dropDownValues.get(0);
            }
            multiSelectionSpinner.setSelection(0);
        }
    }

    public void putRNRCallDetailsToDb(List<CustomerLite> rnrCallsList) {
        if (rnrCallsList != null && rnrCallsList.size() > 0) {

            SQLiteDatabase db;
            MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
            db = dbHelper.getWritableDatabase();
            for (int i = 0; i < rnrCallsList.size(); i++) {
                CustomerLite customerLite = rnrCallsList.get(i);
                ContentValues cv = new ContentValues();
                cv.put("EMAIL", ApplicationSettings.getPref(AppConstants.USERINFO_EMAIL, null));
                if (UearnHome.autoDial) {
                    cv.put("PARENT", 1);
                } else {
                    cv.put("PARENT", 0);
                }
                cv.put("STARTTIME", CommonUtils.getTimeFormatInISO(new Date()));
                cv.put("ENDTIME", CommonUtils.getTimeFormatInISO(new Date()));
                cv.put("UNREAD", "false");
                cv.put("EVENT_TYPE", "call_out_rnr");
                if (ApplicationSettings.getPref(AppConstants.USERINFO_PHONE, "") != null) {
                    cv.put("FROM1", ApplicationSettings.getPref(AppConstants.USERINFO_PHONE, ""));
                }
                cv.put("TO1", customerLite.customerNumber);
                cv.put("MESSAGE", "Outgoing Call");
                cv.put("MSG_RECEPIENT_NO", customerLite.customerNumber);
                cv.put("SUBJECT", "Outgoing Call");

                cv.put("UPLOAD_STATUS", 0);

                String lat = Double.toString(latitude);
                String lon = Double.toString(longitude);

                if (lat != null && lon != null) {
                    cv.put("DISP_MAP_LOC", 1);
                    cv.put("LAT", lat);
                    cv.put("LONG", lon);
                }

                int trCount = ApplicationSettings.getPref(AppConstants.APP_INT_TRANSACTION_COUNTER, 0);
                trCount++;
                cv.put("CMAIL_TR_COUNT", trCount);
                ApplicationSettings.putPref(AppConstants.APP_INT_TRANSACTION_COUNTER, trCount);

                if (UearnHome.manualDialing) {
                    manualAndRNR = true;
                }

                if (checkForAmeyoNumber(customerLite.customerNumber)) {
                    db.insert("ameyo_entries", null, cv);
                } else {
                    String selection = "TO1=" + "'" + customerLite.customerNumber + "'";
                    Cursor cur = db.query("mytbl", null, selection, null, null, null, null);
                    if (cur != null && cur.getCount() > 0) {
                        cur.close();
                        return;
                    } else {
                        db.insert("mytbl", null, cv);
                    }
                }

                if (manualAndRNR) {
                    String questionsAct = ApplicationSettings.getPref(AppConstants.QUESTIONS_ACT, "");
                    if (questionsAct != null && !questionsAct.isEmpty()) {

                    } else {
                        createDummyAppointmentForManualDial();
                    }
                } else {
                    if (customerLite.status != null && !customerLite.status.isEmpty())
                        updateAppointmentToCompletedStatus(customerLite.customerNumber);
                }
            }
            if (db != null && db.isOpen()) {
                db.close();
            }
            if (dbHelper != null)
                dbHelper.close();
        }
    }

    private void updateAppointmentToCompletedStatus(String number) {
        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        Date date = new Date();
        String selection = "TO1=" + "'" + number + "'" + " AND ( " + "COMPLETED" + "=" + 0 + " OR" + " RESPONSE_STATUS " + "=" + " 'accepted' ) ";
        Cursor cursor = db.query("remindertbNew", null, selection, null, null, null, "START_TIME ASC");
        if (cursor.getCount() > 0) {
            cursor.moveToFirst();
            while (!cursor.isAfterLast()) {
                String customer_number = cursor.getString(cursor.getColumnIndex("TO1"));
                if (PhoneNumberUtils.compare(customer_number, number)) {
                    long localdbId = cursor.getLong(cursor.getColumnIndex("_id"));
                    String appointment_id = cursor.getString(cursor.getColumnIndex("APPOINTMENT_ID"));
                    long startMls = cursor.getLong(cursor.getColumnIndex("START_TIME"));
                    //Modified By Srinath.k
                    int flpCount = cursor.getInt(cursor.getColumnIndex("FLP_COUNT"));
                    updateLocalDB(db, localdbId);
                    SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
                    TimeZone tz = TimeZone.getTimeZone("UTC");
                    df.setTimeZone(tz);
                    Date calldate = new Date();
                    try {
                        calldate = df.parse(String.valueOf(startMls));
                    } catch (Exception e) {
                    }
                    long callTime = calldate.getTime();
                    long tatValue = callTime - startMls;
                    Integer tat = (int) (long) (tatValue);
                    int tatInSec = tat / 60000;
                    GetCalendarEntryInfo getCalendarEntryInfo = new GetCalendarEntryInfo();
                    getCalendarEntryInfo.user_id = SmarterSMBApplication.SmartUser.getId();
                    getCalendarEntryInfo.appointment_id = appointment_id;
                    getCalendarEntryInfo.responsestatus = "completed";
                    getCalendarEntryInfo.update_all_fields = false;
                    getCalendarEntryInfo.tat = tatInSec;
                    getCalendarEntryInfo.flp_count = "" + flpCount;
                    updateAppointment(getCalendarEntryInfo);
                }
                cursor.moveToNext();
            }
        }
    }

    private void updateLocalDB(SQLiteDatabase db, long localDBId) {
        if (!db.isOpen()) {
            MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
            db = dbHelper.getWritableDatabase();
        }
        ContentValues cv = new ContentValues();
        cv.put("COMPLETED", 1);
        cv.put("APPOINTMENT_TYPE", "complete_appointment");
        cv.put("RESPONSE_STATUS", "completed");
        cv.put("UPDATED_AT", System.currentTimeMillis());
        cv.put("UPLOAD_STATUS", 0);

        if (db != null) {
            db.update("remindertbNew", cv, "_id=" + localDBId, null);
        }
        if (db != null && db.isOpen()) {
            db.close();
        }
    }

    private void updateAppointment(GetCalendarEntryInfo getCalendarEntryInfo) {
        if (CommonUtils.isNetworkAvailable(this)) {
            new APIProvider.Update_Appointment(getCalendarEntryInfo, 1, null, null, new API_Response_Listener<String>() {
                @Override
                public void onComplete(String data, long request_code, int failure_code) {

                }
            }).call();
        }
    }

    private String getNotesFromDB() {
        MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        String notes = "";
        Cursor cursor = db.rawQuery("SELECT * FROM remindertbNew where _id=" + "'" + dbid + "'" + " ORDER BY UPDATED_AT DESC", null);
        if (cursor.getCount() > 0) {
            cursor.moveToFirst();
            notes = cursor.getString(cursor.getColumnIndex("NOTES"));
        }
        cursor.close();
        return notes;
    }

    private String getCallerName(String number) {
        String customerName = "";
        try {
            MySql dbHelper = new MySql(this, "mydb", null, AppConstants.dBversion);
            SQLiteDatabase dbase = dbHelper.getWritableDatabase();
            String selection = "TO1=" + "'" + number + "'";
            Cursor cursor = dbase.query("remindertbNew", null, selection, null, null, null, "UPDATED_AT ASC");
            if (cursor != null && cursor.getCount() > 0) {
                cursor.moveToFirst();
                customerName = cursor.getString(cursor.getColumnIndex("TONAME"));
            }
            if (dbase.isOpen()) {
                dbase.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return customerName;
    }

    private String getQuestionnaire(String number) {
        String questionnaire = "";
        try {
            MySql dbHelper = MySql.getInstance(SmarterSMBApplication.currentActivity);
            SQLiteDatabase dbase = dbHelper.getWritableDatabase();
            String selection = "TO1=" + "'" + number + "'";
            Cursor cursor = dbase.query("remindertbNew", null, selection, null, null, null, "UPDATED_AT ASC");
            if (cursor != null && cursor.getCount() > 0) {
                cursor.moveToFirst();
                questionnaire = cursor.getString(cursor.getColumnIndex("QUESTIONNAIRE"));
            }
            if (dbase.isOpen()) {
                dbase.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return questionnaire;
    }

    static int getTimeDifference(long callEndTime, long callSubmitTime) {
        if (callEndTime > 0 && callSubmitTime > 0) {
            int processTime = (int) callSubmitTime - (int) callEndTime;
            return processTime;
        }
        return 0;
    }

    static int getLoggedInTimeDifference(long loggedInStartTime, long loggedInEndTime) {
        if (loggedInEndTime > 0 && loggedInStartTime > 0) {
            int totalLoggedInTime = (int) loggedInEndTime - (int) loggedInStartTime;
            return totalLoggedInTime;
        }
        return 0;
    }

    static int getActiveTimeDifference(long activeTimeStart, long activeTimeEnd) {
        if (activeTimeEnd > 0 && activeTimeStart > 0) {
            int totalActiveTime = (int) activeTimeEnd - (int) activeTimeStart;
            return totalActiveTime;
        }
        return 0;
    }

    static int getTotalLoggedInTime(long totalLoggedInTime, long loggedInTime) {
        int sumOfLoggedInTime = (int) totalLoggedInTime + (int) loggedInTime;
        return sumOfLoggedInTime;
    }

    static int getTotalActiveTime(long totalActiveTime, long activeTime) {
        int sumOfActiveTime = (int) totalActiveTime + (int) activeTime;
        return sumOfActiveTime;
    }

    private static void totalLoggedInTime() {
        long loggedInEndTime = System.currentTimeMillis();
        ApplicationSettings.putPref(AppConstants.LOGGED_IN_END_TIME, loggedInEndTime);
        long loggedInStartTime = ApplicationSettings.getPref(AppConstants.LOGGED_IN_START_TIME, 0l);
        long loggedInTime = getLoggedInTimeDifference(loggedInStartTime, loggedInEndTime);
        ApplicationSettings.putPref(AppConstants.LOGGED_IN_TIME, loggedInTime);

        //Log.d("LoginTime", "UearnActivity - totalLoggedInTime()- loggedInStartTime" + loggedInStartTime);
        //Log.d("LoginTime", "UearnActivity - totalLoggedInTime()- loggedInEndTime" + loggedInEndTime);
        //Log.d("LoginTime", "UearnActivity - totalLoggedInTime()- loggedInTime" + loggedInTime);


        long totalLoggedInTime = ApplicationSettings.getPref(AppConstants.TOTAL_LOGGED_IN_TIME, 0l);
        totalLoggedInTime = getTotalLoggedInTime(totalLoggedInTime, loggedInTime);
        ApplicationSettings.putPref(AppConstants.TOTAL_LOGGED_IN_TIME, totalLoggedInTime);
        //Log.d("LoginTime", "UearnActivity - totalLoggedInTime()- totalLoggedInTime" + totalLoggedInTime);
        ApplicationSettings.putPref(AppConstants.LOGGED_IN_START_TIME, 0l);
        ApplicationSettings.putPref(AppConstants.LOGGED_IN_END_TIME, 0l);
        ApplicationSettings.putPref(AppConstants.LOGGED_IN_TIME, 0l);

        long activeTimeStart = System.currentTimeMillis();
        ApplicationSettings.putPref(AppConstants.ACTIVE_TIME_START, activeTimeStart);
    }

    private static void totalActiveTime() {
        long activeTimeEnd = System.currentTimeMillis();
        ApplicationSettings.putPref(AppConstants.ACTIVE_TIME_END, activeTimeEnd);
        long activeTimeStart = ApplicationSettings.getPref(AppConstants.ACTIVE_TIME_START, 0l);
        long activeTime = getActiveTimeDifference(activeTimeStart, activeTimeEnd);
        ApplicationSettings.putPref(AppConstants.ACTIVE_TIME, activeTime);

        //Log.d("LoginTime", "UearnActivity - totalActiveTime()- activeTimeStart" + activeTimeStart);
        //Log.d("LoginTime", "UearnActivity - totalActiveTime()- activeTimeEnd" + activeTimeEnd);
        //Log.d("LoginTime", "UearnActivity - totalActiveTime()- activeTime" + activeTime);

        long totalActiveTime = ApplicationSettings.getPref(AppConstants.TOTAL_ACTIVE_TIME, 0l);
        totalActiveTime = getTotalActiveTime(totalActiveTime, activeTime);
        ApplicationSettings.putPref(AppConstants.TOTAL_ACTIVE_TIME, totalActiveTime);
        //Log.d("LoginTime", "UearnActivity - totalActiveTime()- totalActiveTime" + totalActiveTime);
        ApplicationSettings.putPref(AppConstants.ACTIVE_TIME_START, 0l);
        ApplicationSettings.putPref(AppConstants.ACTIVE_TIME_END, 0l);
        ApplicationSettings.putPref(AppConstants.ACTIVE_TIME, 0l);

        long loggedInStartTime = System.currentTimeMillis();
        ApplicationSettings.putPref(AppConstants.LOGGED_IN_START_TIME, loggedInStartTime);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == UPLOAD_ATTACHMENT) {
            if (resultCode == RESULT_OK) {
                if (CommonUtils.isNetworkAvailable(this)) {
                    BitmapFactory.Options bmOptions = new BitmapFactory.Options();
                    Bitmap bitmap = BitmapFactory.decodeFile(imagePath, bmOptions);
                    attachmentReadyButton.setVisibility(View.VISIBLE);
                    uploadAttachmentButton.setVisibility(View.GONE);
                    ll_call_flow_upload_file.setVisibility(View.GONE);
                    //uploadAttachmentTv.setText("FILE ATTACHED :");
                    tv_attached_name.setText("FILE ATTACHED :");

                    try {
                        FileOutputStream out = new FileOutputStream(imagePath);
                        bitmap = Bitmap.createScaledBitmap(bitmap, 400, 667, false);
                        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, out);
                        out.flush();
                        out.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    new UearnActivity.UploadBitmap().execute();
                    doNotCloseActivity = false;
                } else {
                    Toast.makeText(this, "You have no Internet connection.", Toast.LENGTH_SHORT).show();
                }
            } else {
                leadSheetAttachCancel = true;
            }
        }

        if (requestCode == PICK_Camera_IMAGE && resultCode == AppCompatActivity.RESULT_OK) {
            if (CommonUtils.isNetworkAvailable(this)) {
                imageFilePath = Uri.fromFile(photoFile);
                if (photoFile.exists()) {
                    //imageFilePath = file.getAbsolutePath();
                    imagePath = photoFile.getAbsolutePath();
                    attachmentReadyButton.setVisibility(View.VISIBLE);
                    uploadAttachmentButton.setVisibility(View.GONE);
                    ll_call_flow_upload_file.setVisibility(View.GONE);
                    //uploadAttachmentTv.setText("FILE ATTACHED :");
                    tv_attached_name.setText(imagePath.substring(imagePath.lastIndexOf('/') + 1));
                    new UearnActivity.UploadBitmap().execute();
                }

            } else {
                Toast.makeText(this, "You have no Internet connection.", Toast.LENGTH_SHORT).show();
            }
        } else if (requestCode == PICK_Profile_IMAGE && resultCode == AppCompatActivity.RESULT_OK) {
            if (CommonUtils.isNetworkAvailable(this)) {
                imageFilePath = Uri.fromFile(photoFile);
                if (photoFile.exists()) {
                    imagePath = photoFile.getAbsolutePath();
                    attachmentReadyButton.setVisibility(View.VISIBLE);
                    uploadAttachmentButton.setVisibility(View.GONE);
                    ll_call_flow_upload_file.setVisibility(View.GONE);
                    //uploadAttachmentTv.setText("FILE ATTACHED :");
                    tv_attached_name.setText(imagePath.substring(imagePath.lastIndexOf('/') + 1));
                    new UearnActivity.UploadBitmap().execute();
                }

            } else {
                Toast.makeText(this, "You have no Internet connection.", Toast.LENGTH_SHORT).show();
            }

        } else if (requestCode == GALLERY_PICTURE && resultCode == AppCompatActivity.RESULT_OK) {
            if (CommonUtils.isNetworkAvailable(this)) {
                if (data != null) {
                    Uri selectedImage = data.getData();
                    String[] filePathColumn = {MediaStore.Images.Media.DATA};
                    Cursor cursor = getContentResolver().query(selectedImage,
                            filePathColumn, null, null, null);
                    cursor.moveToFirst();

                    int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
                    String picturePath = cursor.getString(columnIndex);
                    Drawable user_theame_img = Drawable.createFromPath(picturePath);
                    attachmentReadyButton.setVisibility(View.VISIBLE);
                    uploadAttachmentButton.setVisibility(View.GONE);
                    ll_call_flow_upload_file.setVisibility(View.GONE);
                    //uploadAttachmentTv.setText("FILE ATTACHED :");
                    tv_attached_name.setText(cursor.getString(columnIndex).substring(cursor.getString(columnIndex).lastIndexOf('/') + 1));
                    Uri selectedImages = data.getData();
                    String[] filePath = {MediaStore.Images.Media.DATA};
                    Cursor c = getContentResolver().query(selectedImages, filePath, null, null, null);
                    c.moveToFirst();
                    int columnIndexs = c.getColumnIndex(filePath[0]);
                    selectedImagePath = c.getString(columnIndexs);
                    c.close();
                    cursor.close();
                    Bitmap bitmap = BitmapFactory.decodeFile(selectedImagePath); // load
                    // preview image
                    bitmap = Bitmap.createScaledBitmap(bitmap, 400, 400, false);

                    try {
                        FileOutputStream out = new FileOutputStream(selectedImagePath);
                        imagePath = selectedImagePath;
                        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, out);
                        out.flush();
                        out.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    new UearnActivity.UploadBitmap().execute();

                } else {
                    Toast.makeText(getApplicationContext(), "Cancelled",
                            Toast.LENGTH_SHORT).show();
                }
            } else {
                Toast.makeText(this, "You have no Internet connection.", Toast.LENGTH_SHORT).show();
            }
        }

        if (requestCode == 3) {
            if (getUrl != null && !getUrl.isEmpty()) {
                callToServerGetApi(getUrl + "&result=" + resultCode, "", 1);
            }
        }

        super.onActivityResult(requestCode, resultCode, data);
    }

    private void loadDataFromUrl(String url) {
        String s = "<html><body style=\"margin: 0; padding: 0\"><IMG  width=\"100%\" height=\"100%\" src=\"" + url + "\"><body><html>";
        AlertDialog.Builder imageDialog = new AlertDialog.Builder(this);
        LayoutInflater inflater = (LayoutInflater) this.getSystemService(LAYOUT_INFLATER_SERVICE);

        View layout = inflater.inflate(R.layout.image_dailog, (ViewGroup) findViewById(R.id.layout_root));
        WebView wvNotes = layout.findViewById(R.id.fullimage);
        wvNotes.getSettings().setJavaScriptEnabled(true);
        wvNotes.setWebViewClient(new WebViewClient());
        wvNotes.setVerticalScrollBarEnabled(true);
        wvNotes.setHorizontalScrollBarEnabled(true);
        wvNotes.loadData(s, "text/html", "UTF-8");
        wvNotes.getSettings().setUseWideViewPort(true);
        wvNotes.getSettings().setLoadWithOverviewMode(true);

        imageDialog.setView(layout);
        imageDialog.setPositiveButton(
                "OK", new DialogInterface.OnClickListener() {

                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }

                });
        imageDialog.create();
        imageDialog.show();
    }

    @Override
    public void onCheckBoxSelected(int position, String title, boolean isSelected) {
        checkedDataHashMap.put(title, isSelected);
    }

    class UploadBitmap extends AsyncTask<Void, Void, Void> {

        @Override
        protected Void doInBackground(Void... params) {
            uploadImageFile();
            return null;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected void onPostExecute(Void aVoid) {
            super.onPostExecute(aVoid);
        }
    }

    public void uploadImageFile() {
        String filePath = imagePath;
        JSONObject response = DataUploadUtils.uploadImageFileToServer(filePath, Urls.getUploadFileUrl());
        try {
            if (response != null && response.getString("url") != null) {
                imageUrl = response.getString("url");
                getCalendarEntryInfo.setNotesImageUrl(imageUrl);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onDestroy() {
        if (mMessageReceiver != null) {
            try {
                LocalBroadcastManager.getInstance(this).unregisterReceiver(mMessageReceiver);
                mMessageReceiver = null;
            } catch (Exception e) {

            }
        }
        dismissProgressDialog();
        super.onDestroy();
    }

    private void getConnectedCustomerInfoNotInStartMode(String transactionId) {
        if (CommonUtils.isNetworkAvailable(this)) {
            getInfoCalled = true;
            new APIProvider.GetConnectedCustomerInfo(transactionId, 0, this, "Please wait...", new API_Response_Listener<String>() {
                @Override
                public void onComplete(String data, long request_code, int failure_code) {
                    if (data != null && !data.isEmpty()) {
                        try {
                            JSONObject jsonObject = new JSONObject(data);
                            if (jsonObject.has("info")) {
                                String info = jsonObject.getString("info");
                                if (info != null && !info.isEmpty()) {
                                    JSONObject infoObject = new JSONObject(info);

                                    if (infoObject.has("number")) {
                                        String customerNumber = infoObject.getString("number");
                                        NotificationData.outboundDialledCustomerNumber = customerNumber;
                                    }

                                    if (infoObject.has("customer_name")) {
                                        String customerName = infoObject.getString("customer_name");
                                        NotificationData.outboundDialledCustomerName = customerName;
                                    }
                                    if (infoObject.has("transactionid")) {
                                        String transactionId = infoObject.getString("transactionid");
                                        NotificationData.outboundDialledTransactionId = transactionId;
                                    }

                                    if (infoObject.has("message")) {
                                        NotificationData.customKVS = infoObject.getString("message");
                                    }

                                    if (infoObject.has("number")) {
                                        String numberOfConnectedCustomer = infoObject.getString("number");
                                        if (numberOfConnectedCustomer != null && !numberOfConnectedCustomer.isEmpty() && !numberOfConnectedCustomer.equals(SmarterSMBApplication.lastConnectedCustomerNumber)) {
                                            if (ApplicationSettings.containsPref(AppConstants.CONNECTED_TEXT)) {
                                                String connectedTextStr = ApplicationSettings.getPref(AppConstants.CONNECTED_TEXT, "");
                                                if (connectedTextStr != null && !connectedTextStr.isEmpty() && !connectedTextStr.equals("null")) {
                                                    String[] connectedTextStrArr = connectedTextStr.split("\\|");
                                                    connection_status.setText(connectedTextStrArr[0].toString());
                                                    connectingText1.setText(connectedTextStrArr[1].toString());
                                                    connectingText2.setText(connectedTextStrArr[2].toString());
                                                    endCallButtonLayout.setVisibility(View.VISIBLE);
                                                    muteCallButton.setVisibility(View.VISIBLE);
                                                    launchAppButton.setVisibility(View.VISIBLE);
                                                    getInfo.setVisibility(View.GONE);
                                                }
                                            }

                                            String qanda = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");
                                            if (qanda != null && !qanda.isEmpty() && !qanda.equals("null")) {
                                                layout5.setVisibility(View.VISIBLE);
                                                submitLayout.setVisibility(View.GONE);
                                                nextButton.setVisibility(View.VISIBLE);
                                                previousButton.setVisibility(View.VISIBLE);
                                                enableCallOptions();
                                                SmarterSMBApplication.currentAppState = "Connected";
                                                SmarterSMBApplication.agentIsInConnectingState = false;
                                                //Log.d("PredictiveTesting", "showQuestionnaireForInboundCall() Outside");
                                                showQuestionnaireForInboundCall();
                                            } else {
                                                layout5.setVisibility(View.GONE);
                                                submitLayout.setVisibility(View.GONE);
                                                nextButton.setVisibility(View.GONE);
                                                previousButton.setVisibility(View.GONE);
                                                disableCallOptions();
                                                nameNumberRelativeLayout.setVisibility(View.GONE);
                                                flp_layout.setVisibility(View.GONE);
                                                acpBottomLayout.setVisibility(View.GONE);
                                            }

                                            if (!ServiceHandler.callDisconnected) {
                                                if (NotificationData.customKVS != null && !NotificationData.customKVS.isEmpty() && !NotificationData.customKVS.equals("null")) {
                                                    if (customkvsText != null) {
                                                        customkvsText.loadDataWithBaseURL(null, NotificationData.customKVS, "text/html", "utf-8", null);
                                                        customkvsLayout.setVisibility(View.VISIBLE);
                                                        customkvsText.setVisibility(View.VISIBLE);
                                                    }
                                                }
                                            }
                                        } else {
                                            Toast.makeText(getApplicationContext(), "No connected customer", Toast.LENGTH_SHORT).show();
                                            return;
                                        }
                                    } else {
                                        if (jsonObject.has("success")) {
                                            String msg = jsonObject.getString("success");
                                            if (msg != null && !msg.isEmpty()) {
                                                Toast.makeText(getApplicationContext(), msg, Toast.LENGTH_SHORT).show();
                                            }
                                        }
                                    }
                                } else {
                                    Toast.makeText(getApplicationContext(), "No info for connected customer", Toast.LENGTH_SHORT).show();
                                }
                            }
                        } catch (Exception e) {

                        }
                    } else {
                        if(SmarterSMBApplication.isSocketConnectionTimeOut){
                            SmarterSMBApplication.isSocketConnectionTimeOut = false;
                            Toast.makeText(getApplicationContext(), "You seem to be out of data network. Please check your broadband connection", Toast.LENGTH_SHORT).show();
                        } else {
                            Toast.makeText(getApplicationContext(), "No data for connected customer", Toast.LENGTH_SHORT).show();
                        }
                    }
                }
            }).call();
        } else {
            Toast.makeText(this, "You have no Internet connection.", Toast.LENGTH_SHORT).show();
        }
    }

    private void getConnectedCustomerInfo(String transactionId) {
        if (CommonUtils.isNetworkAvailable(this)) {
            getInfoCalled = true;
            titleText = "";
            new APIProvider.GetConnectedCustomerInfo(transactionId, 0, this, "Please wait...", new API_Response_Listener<String>() {
                @Override
                public void onComplete(String data, long request_code, int failure_code) {
                    if (data != null && !data.isEmpty()) {
                        try {
                            JSONObject jsonObject = new JSONObject(data);
                            if (jsonObject.has("info")) {
                                String info = jsonObject.getString("info");
                                if (info != null && !info.isEmpty()) {
                                    JSONObject infoObject = new JSONObject(info);

                                    if (infoObject.has("number")) {
                                        String numberOfConnectedCustomer = infoObject.getString("number");
                                        if (numberOfConnectedCustomer != null && !numberOfConnectedCustomer.isEmpty() && !numberOfConnectedCustomer.equals(SmarterSMBApplication.lastConnectedCustomerNumber)) {
                                            customersInfoLayout.setVisibility(View.VISIBLE);
                                            if (titleText != null && !titleText.isEmpty()) {
                                                titleLayout.setVisibility(View.VISIBLE);
                                                if (titleText.startsWith("<html>")) {
                                                    showTitleWebView();
                                                } else {
                                                    showTitleTextView();
                                                }
                                            }
                                            NotificationData.isSocketResponse = true;
                                            connection_status.setText("Connected");
                                            SmarterSMBApplication.currentAppState = "Connected";
                                            SmarterSMBApplication.agentIsInConnectingState = false;
                                            SmarterSMBApplication.endTheSession = false;
                                            SmarterSMBApplication.incomingCallAcceptedByAgent = true;
                                            layout5.setVisibility(View.VISIBLE);
                                            submitLayout.setVisibility(View.GONE);
                                            nextButton.setVisibility(View.VISIBLE);
                                            previousButton.setVisibility(View.VISIBLE);
                                            enableCallOptions();

                                            if (CommonUtils.isNetworkAvailable(getApplicationContext())) {
                                                if (!SmarterSMBApplication.agentIsInConnectedState) {
                                                    SmarterSMBApplication.lastConnectedCustomer = NotificationData.dialledCustomerNumber;
                                                    new ConnectedInfo().execute();
                                                }
                                            }
                                        } else {
                                            Toast.makeText(getApplicationContext(), "No connected customer", Toast.LENGTH_SHORT).show();
                                            return;
                                        }
                                    }

                                    if (infoObject.has("transactionid")) {
                                        String transactionId = infoObject.getString("transactionid");
                                        if (transactionId != null && !transactionId.isEmpty()) {
                                            NotificationData.transactionId = transactionId;
                                            NotificationData.uuid = transactionId;
                                        }
                                    }
                                    if (infoObject.has("name")) {
                                        String name = infoObject.getString("name");
                                        if (name != null && !name.isEmpty()) {
                                            customername.setText(name);
                                            NotificationData.dialledCustomerName = name;
                                        }
                                    }
                                    if (infoObject.has("lead_source")) {
                                        String leadSource = infoObject.getString("lead_source");
                                        if (leadSource != null && !leadSource.isEmpty()) {
                                            NotificationData.leadSource = leadSource;
                                        }
                                    }
                                    if (infoObject.has("stage")) {
                                        String stage = infoObject.getString("stage");
                                        if (stage != null && !stage.isEmpty()) {
                                            NotificationData.statusString = stage;
                                        }
                                    }
                                    if (infoObject.has("substage1")) {
                                        String substage1 = infoObject.getString("substage1");
                                        if (substage1 != null && !substage1.isEmpty()) {
                                            NotificationData.substatus1 = substage1;
                                        }
                                    }
                                    if (infoObject.has("substage2")) {
                                        String substage2 = infoObject.getString("substage2");
                                        if (substage2 != null && !substage2.isEmpty()) {
                                            NotificationData.substatus2 = substage2;
                                        }
                                    }
                                    if (infoObject.has("id")) {
                                        String id = infoObject.getString("id");
                                        if (id != null && !id.isEmpty()) {
                                            NotificationData.id = id;
                                        }
                                    }

                                    if (infoObject.has("notes")) {
                                        String notes = infoObject.getString("notes");
                                        if (notes != null && !notes.isEmpty() && !notes.equals("null")) {
                                            NotificationData.notes_string = notes;
                                        } else {
                                            NotificationData.notes_string = "";
                                        }
                                    } else if (infoObject.has("remarks")) {
                                        String remarks = infoObject.getString("remarks");
                                        if (remarks != null && !remarks.isEmpty() && !remarks.equals("null")) {
                                            NotificationData.notes_string = remarks;
                                        } else {
                                            NotificationData.notes_string = "";
                                        }
                                    }

                                    if (infoObject.has("message")) {
                                        NotificationData.customKVS = infoObject.getString("message");
                                    } else if (infoObject.has("customkvs")) {
                                        NotificationData.customKVS = infoObject.getString("customkvs");
                                    }

                                    if (NotificationData.customKVS != null && !NotificationData.customKVS.isEmpty() && !NotificationData.customKVS.equals("null")) {
                                        if (customkvsText != null) {
                                            customkvsText.loadDataWithBaseURL(null, NotificationData.customKVS, "text/html", "utf-8", null);
                                            customkvsLayout.setVisibility(View.VISIBLE);
                                            customkvsText.setVisibility(View.VISIBLE);
                                        }
                                    }

                                    if (infoObject.has("number")) {
                                        String numberOfConnectedCustomer = infoObject.getString("number");
                                        if (infoObject.has("questionnaire")) {
                                            String questionnaire = "";
                                            ApplicationSettings.putPref(AppConstants.QUESTIONNAIRE, "");
                                            if (ApplicationSettings.containsPref(AppConstants.CUSTOMER_QUES)) {
                                                boolean customerQues = ApplicationSettings.getPref(AppConstants.CUSTOMER_QUES, false);
                                                if (customerQues) {
                                                    questionnaire = infoObject.getString("questionnaire");
                                                    if (questionnaire != null && !questionnaire.isEmpty() && !questionnaire.equals("null")) {
                                                        if (questionnaire.contains("\\n")) {
                                                            String newline = System.getProperty("line.separator");
                                                            questionnaire = questionnaire.replaceAll("\\\\n", newline);
                                                            ApplicationSettings.putPref(AppConstants.QUESTIONNAIRE, questionnaire);
                                                        } else if (!questionnaire.equals("[]")) {
                                                            ApplicationSettings.putPref(AppConstants.QUESTIONNAIRE, questionnaire);
                                                        } else {
                                                            ApplicationSettings.putPref(AppConstants.QUESTIONNAIRE, questionnaire);
                                                        }
                                                    } else {
                                                        questionnaire = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE_FROM_SETTINGS, "");
                                                        ApplicationSettings.putPref(AppConstants.QUESTIONNAIRE, questionnaire);
                                                    }
                                                } else {
                                                    questionnaire = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE_FROM_SETTINGS, "");
                                                    ApplicationSettings.putPref(AppConstants.QUESTIONNAIRE, questionnaire);
                                                }
                                            } else {
                                                questionnaire = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE_FROM_SETTINGS, "");
                                                ApplicationSettings.putPref(AppConstants.QUESTIONNAIRE, questionnaire);
                                            }
                                        }
                                        if (numberOfConnectedCustomer != null && !numberOfConnectedCustomer.isEmpty()) {
                                            ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER, "");
                                            ApplicationSettings.putPref(AppConstants.CONNECTED_CUSTOMER, numberOfConnectedCustomer);
                                            NotificationData.dialledCustomerNumber = numberOfConnectedCustomer;
                                            if (SmarterSMBApplication.outgoingCallNotInStartMode) {
                                                NotificationData.outboundDialledCustomerNumber = numberOfConnectedCustomer;
                                            }
                                            connectedCustomer = numberOfConnectedCustomer;
                                            customerNumber = numberOfConnectedCustomer;
                                            CommonUtils.storeUuidHash(numberOfConnectedCustomer, NotificationData.uuid);
                                            CommonUtils.storeAutoDialerHash(numberOfConnectedCustomer);//
                                        }

                                        String qanda = ApplicationSettings.getPref(AppConstants.QUESTIONNAIRE, "");
                                        if (qanda != null && !qanda.isEmpty() && !qanda.equals("null")) {

                                            try {
                                                JSONArray rootArrayData = new JSONArray(qanda);
                                                rootArrayDataOrg = rootArrayData;
                                                if(decisionArrayList != null && !decisionArrayList.contains(rootArrayDataOrg)) {
                                                    decisionArrayList.add(rootArrayDataOrg.toString());
                                                }
                                                JSONObject jsonobject = rootArrayData.getJSONObject(0);

                                                if (jsonobject.has("mandatory")) {
                                                    mandatory = jsonobject.getString("mandatory");
                                                    if (mandatory != null && !mandatory.isEmpty() && mandatory.equalsIgnoreCase("y")) {
                                                        SmarterSMBApplication.isCurrentQuesMandatory = true;
                                                    } else {
                                                        SmarterSMBApplication.isCurrentQuesMandatory = false;
                                                    }
                                                } else {
                                                    SmarterSMBApplication.isCurrentQuesMandatory = false;
                                                }

                                                if (jsonobject.has("decision")) {
                                                    decision = jsonobject.getString("decision");
                                                    if (decision != null && !decision.isEmpty() && decision.equalsIgnoreCase("y")) {
                                                        SmarterSMBApplication.isDecisionMakingQues = true;
                                                        String currentSelectedVal = String.valueOf(questionAnswerHash.get(rootQ));
                                                        if(currentSelectedVal != null && !currentSelectedVal.isEmpty()){
                                                            SmarterSMBApplication.currentSelectedValue = currentSelectedVal;
                                                        }
                                                    } else {
                                                        SmarterSMBApplication.isDecisionMakingQues = false;
                                                    }
                                                } else {
                                                    SmarterSMBApplication.isDecisionMakingQues = false;
                                                }

                                                if (jsonobject.has("action_type")) {
                                                    actionType = jsonobject.getString("action_type");
                                                    actionTypeHash.put(rootQ, actionType);
                                                }

                                                if (jsonobject.has("title")) {
                                                    titleText = jsonobject.getString("title");
                                                }

                                                if (titleText != null && !titleText.isEmpty()) {
                                                    titleLayout.setVisibility(View.VISIBLE);
                                                    if (titleText.startsWith("<html>")) {
                                                        showTitleWebView();
                                                    } else {
                                                        showTitleTextView();
                                                    }
                                                }
                                            } catch (Exception e) {

                                            }
                                        }

                                        setHeaderTitle();
                                        handleQuestionnaireAndACP();
                                    } else {
                                        if (jsonObject.has("success")) {
                                            String msg = jsonObject.getString("success");
                                            if (msg != null && !msg.isEmpty()) {
                                                Toast.makeText(getApplicationContext(), msg, Toast.LENGTH_SHORT).show();
                                            }
                                        }
                                    }
                                } else {
                                    Toast.makeText(getApplicationContext(), "No info for connected customer", Toast.LENGTH_SHORT).show();
                                }
                            }

                        } catch (Exception e) {

                        }
                    } else {
                        if(SmarterSMBApplication.isSocketConnectionTimeOut){
                            SmarterSMBApplication.isSocketConnectionTimeOut = false;
                            Toast.makeText(getApplicationContext(), "You seem to be out of data network. Please check your broadband connection", Toast.LENGTH_SHORT).show();
                        } else {
                            Toast.makeText(getApplicationContext(), "No data for connected customer", Toast.LENGTH_SHORT).show();
                        }
                    }
                }
            }).call();
        } else {
            Toast.makeText(this, "You have no Internet connection.", Toast.LENGTH_SHORT).show();
        }
    }

    private void processNextAction(JSONObject jsonobject) {

        try {

            if (jsonobject != null) {
                if (jsonobject.has("q")) {
                    rootQ = jsonobject.getString("q");
                }
                if (jsonobject.has("at")) {
                    rootR = jsonobject.getString("at");
                    currentObject = rootR;
                }

                if (jsonobject.has("a")) {
                    rootA = jsonobject.getString("a");
                }

                if (jsonobject.has("last-updated")) {
                    rootLastUpdate = jsonobject.getString("last-updated");
                }

                if (jsonobject.has("value")) {
                    rootValue = jsonobject.getString("value");
                }

                if (jsonobject.has("mandatory")) {
                    mandatory = jsonobject.getString("mandatory");
                    if (mandatory != null && !mandatory.isEmpty() && mandatory.equalsIgnoreCase("y")) {
                        SmarterSMBApplication.isCurrentQuesMandatory = true;
                    } else {
                        SmarterSMBApplication.isCurrentQuesMandatory = false;
                    }
                } else {
                    SmarterSMBApplication.isCurrentQuesMandatory = false;
                }

                if (jsonobject.has("decision")) {
                    decision = jsonobject.getString("decision");
                    if (decision != null && !decision.isEmpty() && decision.equalsIgnoreCase("y")) {
                        SmarterSMBApplication.isDecisionMakingQues = true;
                        String currentSelectedVal = String.valueOf(questionAnswerHash.get(rootQ));
                        if(currentSelectedVal != null && !currentSelectedVal.isEmpty()){
                            SmarterSMBApplication.currentSelectedValue = currentSelectedVal;
                        }
                    } else {
                        SmarterSMBApplication.isDecisionMakingQues = false;
                    }
                } else {
                    SmarterSMBApplication.isDecisionMakingQues = false;
                }

                if (jsonobject.has("action_type")) {
                    actionType = jsonobject.getString("action_type");
                    actionTypeHash.put(rootQ, actionType);
                }

                if (jsonobject.has("title")) {
                    titleText = jsonobject.getString("title");
                }

                if (jsonobject.has("hint")) {
                    hintText = jsonobject.getString("hint");
                }
                if (jsonobject.has("dd_data")) {
                    dropDownData = jsonobject.getString("dd_data");
                    if (dropDownData != null && dropDownData.length() > 0) {
                        dropDownHash.put(rootQ, dropDownData);
                    }
                }

                if (jsonobject.has("sdd_data")) {
                    searchableDropDownData = jsonobject.getString("sdd_data");
                    if (searchableDropDownData != null && searchableDropDownData.length() > 0) {
                        searchableDropDownHash.put(rootQ, searchableDropDownData);
                    }
                }
                if (jsonobject.has("msdd_data")) {
                    multiSelectionDropDownData = jsonobject.getString("msdd_data");
                    if (multiSelectionDropDownData != null && multiSelectionDropDownData.length() > 0) {
                        multiSelectionDropDownHash.put(rootQ, multiSelectionDropDownData);
                    }
                }

                if (jsonobject.has("cb_data")) {
                    checkboxData = jsonobject.getString("cb_data");
                    if (checkboxData != null && checkboxData.length() > 0) {
                        checkboxHash = new LinkedHashMap();
                        checkboxHash.put(rootQ, checkboxData);
                    }
                }

                if (jsonobject.has("bt_data")) {
                    buttonData = jsonobject.getString("bt_data");
                    if (buttonData != null && buttonData.length() > 0) {
                        buttonHash.put(rootQ, buttonData);
                    }
                }

                if (jsonobject.has("rb_data")) {
                    radiobuttonData = jsonobject.getString("rb_data");
                    if (radiobuttonData != null && radiobuttonData.length() > 0) {
                        radiobuttonHash.put(rootQ, radiobuttonData);
                    }
                }

                if (jsonobject.has("status")) {
                    status = jsonobject.getString("status");
                    mmtStatus = status;
                    ApplicationSettings.putPref(AppConstants.MMT_STATUS, mmtStatus);
                }

                if (jsonobject.has("min_value")) {
                    min = Integer.parseInt(jsonobject.getString("min_value"));
                }
                if (jsonobject.has("max_value")) {
                    max = Integer.parseInt(jsonobject.getString("max_value"));
                }

                if (jsonobject.has("max_yes")) {
                    max_yes = Integer.parseInt(jsonobject.getString("max_yes"));
                }

                if (jsonobject.has("next_action")) {
                    JSONObject nextActionObj = jsonobject.getJSONObject("next_action");
                    if(nextActionObj != null &&  nextActionObj.has("post_url")){
                        next_action = String.valueOf(nextActionObj.get("post_url"));
                    }
                } else {
                    next_action = "";
                }
            }
            questionnaireHash.put(rootQ, rootR);
            if(tempQuesList != null && !tempQuesList.contains(rootQ)) {
                tempQuesList.add(questionCount, rootQ);
            }
            tempQnAHash.put(rootQ, rootR);
            if (titleText != null && !titleText.isEmpty()) {
                titleQHash.put(rootQ, titleText);
            }

            if (rootR.equalsIgnoreCase("RT")) {
                ratingsLayout();
            } else if (rootR.equalsIgnoreCase("FT") || rootR.equalsIgnoreCase("EMAIL") || rootR.equalsIgnoreCase("BLANK")) {
                freeTextLayout();
                if(rootR.equalsIgnoreCase("FT")) {
                    setSelectedAnswerForNextQuestionnaire(rootQ, "FT");
                } else if(rootR.equalsIgnoreCase("EMAIL")) {
                    setSelectedAnswerForNextQuestionnaire(rootQ, "EMAIL");
                } else if(rootR.equalsIgnoreCase("BLANK")) {
                    setSelectedAnswerForNextQuestionnaire(rootQ, "BLANK");
                }
            } else if (rootR.equalsIgnoreCase("CALLPM")){
                callManagerLayout();
            } else if (rootR.equalsIgnoreCase("DD")) {
                dropDownLayout();
                setSelectedAnswerForNextQuestionnaire(rootQ, "DD");
            } else if (rootR != null && rootR.equalsIgnoreCase("CB")) {
                checkBoxLayout();
                setSelectedAnswerForNextQuestionnaire(rootQ, "CB");
            } else if (rootR.equalsIgnoreCase("BT")) {
                buttonLayout();
                setSelectedAnswerForNextQuestionnaire(rootQ, "BT");
            } else if (rootR.equalsIgnoreCase("RB")) {
                radiobuttonLayout();
                setSelectedAnswerForNextQuestionnaire(rootQ, "RB");
            } else if (rootR.equalsIgnoreCase("NP")) {
                numberpickerLayout();
            } else if (rootR.equalsIgnoreCase("YN")) {
                yesNoLayout();
                setSelectedAnswerForNextQuestionnaire(rootQ, "YN");
            } else if (rootR.equalsIgnoreCase("DATETIME") || rootR.equalsIgnoreCase("DATE")) {
                dateTimeLayout();
            } else if (rootR.equalsIgnoreCase("FLP")) {
                followUpLayout();
            } else if (rootR.equalsIgnoreCase("FN") || rootR.equalsIgnoreCase("SMS")) {
                freeNumberLayout();
                if(rootR.equalsIgnoreCase("FN")) {
                    setSelectedAnswerForNextQuestionnaire(rootQ, "FN");
                } else if(rootR.equalsIgnoreCase("SMS")) {
                    setSelectedAnswerForNextQuestionnaire(rootQ, "SMS");
                }
            } else if (rootR.equalsIgnoreCase("SDD")) {
                searchableDropdownLayout();
                setSelectedAnswerForNextQuestionnaire(rootQ, "SDD");
            } else if (rootR.equalsIgnoreCase("MSDD")) {
                multiSelectionDropdownLayout();
                setSelectedAnswerForNextQuestionnaire(rootQ, "MSDD");
            } else if (rootR.equalsIgnoreCase("ATTACHMENT")) {
                attachmentLayout();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void restartActivity() {
        Intent currentIntent = new Intent("android.intent.action.MAIN");
        currentIntent.setComponent(getIntent().getComponent());
        currentIntent.addCategory("android.intent.category.LAUNCHER");
        currentIntent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
        startActivity(currentIntent);
    }

    private void relaunchSameActivity() {
        //Log.d("FKDemoTest", "UearnActivity - INSIDE relaunchSameActivity() IF"+SmarterSMBApplication.incomingCallRejectedByAgent+SmarterSMBApplication.endTheSession);
        if (SmarterSMBApplication.incomingCallRejectedByAgent || SmarterSMBApplication.endTheSession) {
            SmarterSMBApplication.incomingCallRejectedByAgent = false;
            //Log.d("FKDemoTest", "UearnActivity - relaunchSameActivity() IF");
            navigateToUearnHome();
        } else {
            if (SmarterSMBApplication.incomingCallAcceptedByAgent && SmarterSMBApplication.callEndedFromDuringCall) {
                //Log.d("FKDemoTest", "UearnActivity - relaunchSameActivity() ELSE IF");
                SmarterSMBApplication.callEndedFromDuringCall = false;
            } else {
                ServiceHandler.callDisconnected = false;
                if (SmarterSMBApplication.connectedCustomerNumber != null && !SmarterSMBApplication.connectedCustomerNumber.isEmpty()) {
                    SmarterSMBApplication.currentAppState = "Connected";
                    SmarterSMBApplication.agentIsInConnectingState = false;
                } else {
                    SmarterSMBApplication.currentAppState = "Connecting";
                }
                Intent intent = getIntent();

                if (this.isFinishing()) {
                    //Log.d("FKDemoTest", "UearnActivity - relaunchSameActivity() is finishing()");
                } else {
                    //Log.d("FKDemoTest", "UearnActivity - relaunchSameActivity() is finishing() ELSE");
                    this.finish();
                    intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
                    overridePendingTransition(0, 0);
                    startActivity(intent);
                }
            }
        }
    }

    @Override
    public void onSystemUiVisibilityChange(int visibility) {
        if (ApplicationSettings.containsPref(AppConstants.SYSTEM_CONTROL)) {
            boolean systemControl = ApplicationSettings.getPref(AppConstants.SYSTEM_CONTROL, false);
            if (systemControl) {
                if (SmarterSMBApplication.disableStatusBarAndNavigation) {
                    hideSystemUI();
                }
            }
        }
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        return true;
    }

    public void onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);
        if (ApplicationSettings.containsPref(AppConstants.SYSTEM_CONTROL)) {
            boolean systemControl = ApplicationSettings.getPref(AppConstants.SYSTEM_CONTROL, false);
            if (systemControl) {
                hideSystemUI();
                if (SmarterSMBApplication.disableStatusBarAndNavigation) {
                    if (hasFocus) {
                        hideSystemUI();
                    } else {
                        hideSystemUI();
                    }
                } else {
                    hideSystemUI();
                }
            }
        }
    }

//    public void collapseNow() {
//        collapseNotificationHandler.postDelayed( collapseNotificationRunnable = new Runnable() {
//            public void run() {
//                @SuppressLint("WrongConstant") Object statusBarService = getSystemService("statusbar");
//                Class<?> statusBarManager = null;
//                try {
//                    statusBarManager = Class.forName("android.app.StatusBarManager");
//                } catch (ClassNotFoundException e) {
//                    e.printStackTrace();
//                }
//                Method collapseStatusBar = null;
//                try {
//                    if (Build.VERSION.SDK_INT > 16) {
//                        collapseStatusBar = statusBarManager.getMethod("collapsePanels");
//                    } else {
//                        collapseStatusBar = statusBarManager.getMethod("collapse");
//                    }
//                } catch (NoSuchMethodException e) {
//                    e.printStackTrace();
//                }
//                collapseStatusBar.setAccessible(true);
//                try {
//                    collapseStatusBar.invoke(statusBarService);
//                } catch (IllegalArgumentException e) {
//                    e.printStackTrace();
//                } catch (IllegalAccessException e) {
//                    e.printStackTrace();
//                } catch (InvocationTargetException e) {
//                    e.printStackTrace();
//                }
//                if (collapseNotificationHandler != null) {
//                    collapseNotificationHandler.postDelayed(collapseNotificationRunnable, 1L);
//                }
//            }
//        }, 1L);
//    }

    private void hideSystemUI() {
        if (ApplicationSettings.containsPref(AppConstants.SYSTEM_CONTROL)) {
            boolean systemControl = ApplicationSettings.getPref(AppConstants.SYSTEM_CONTROL, false);
            if (systemControl) {
                if (decorView == null) {
                    decorView = getWindow().getDecorView();
                }
                decorView.setSystemUiVisibility(
                        View.SYSTEM_UI_FLAG_IMMERSIVE
                                | View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                                | View.SYSTEM_UI_FLAG_FULLSCREEN);
            }
        }
    }

    private void showSystemUI() {
        if (ApplicationSettings.containsPref(AppConstants.SYSTEM_CONTROL)) {
            boolean systemControl = ApplicationSettings.getPref(AppConstants.SYSTEM_CONTROL, false);
            if (systemControl) {
                if (decorView == null) {
                    decorView = getWindow().getDecorView();
                }
                decorView.setSystemUiVisibility(
                        View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
            }
        }
    }

    @RequiresPermission(android.Manifest.permission.MODIFY_PHONE_STATE)
    public void endActiveCall() {
        try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                TelecomManager tm = (TelecomManager) this.getSystemService(Context.TELECOM_SERVICE);
                if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ANSWER_PHONE_CALLS) != PackageManager.PERMISSION_GRANTED) {
                    return;
                }
                if (tm != null) {
                    tm.endCall();
                }
            } else {
                TelephonyManager telephonyManager = (TelephonyManager) this.getSystemService(Context.TELEPHONY_SERVICE);
                Class classTelephony = Class.forName(telephonyManager.getClass().getName());
                Method methodGetITelephony = classTelephony.getDeclaredMethod("getITelephony");
                methodGetITelephony.setAccessible(true);
                Object telephonyInterface = methodGetITelephony.invoke(telephonyManager);
                Class telephonyInterfaceClass = Class.forName(telephonyInterface.getClass().getName());
                Method methodEndCall = telephonyInterfaceClass.getDeclaredMethod("endCall");
                methodEndCall.invoke(telephonyInterface);
            }
        } catch (Exception e) {
            Log.e("UearnActivity", "Error calling ITelephony#endActiveCall()", e);
            int version_code = CommonUtils.getVersionCode(this);
            String message = "<br/><br/>eMail : " + ApplicationSettings.getPref(AppConstants.USERINFO_EMAIL, "") + "<br/>ID : " +
                    ApplicationSettings.getPref(AppConstants.USERINFO_ID, "") + "<br/><br/>App Version: " + version_code + "<br/><br/>UearnActivity - Error calling ITelephony#endActiveCall(): " + e.getMessage();
            ServiceApplicationUsage.callErrorLog(message);
        }
    }

    class ConnectingInfo extends AsyncTask<Void, Void, Void> {

        @Override
        protected Void doInBackground(Void... params) {
            SmarterSMBApplication.agentIsInConnectingState = true;
            SmarterSMBApplication.agentIsInConnectedState = false;
            sendConnectingStateInfoToServer();
            return null;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected void onPostExecute(Void aVoid) {
            super.onPostExecute(aVoid);
        }
    }

    private void sendConnectingStateInfoToServer() {
        long totalActiveTime = ApplicationSettings.getPref(AppConstants.TOTAL_ACTIVE_TIME, 0l);
        JSONObject lastConnectedCustomerObject = new JSONObject();
        try {
            lastConnectedCustomerObject.put("customernumber", SmarterSMBApplication.lastConnectedCustomer);
            lastConnectedCustomerObject.put("feedback", SmarterSMBApplication.lastConnectedCustomerFeedback);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        JSONObject jsonObject = new JSONObject();
        try {
            if (ApplicationSettings.getPref(AppConstants.USERINFO_ID, "0") != null && !ApplicationSettings.getPref(AppConstants.USERINFO_ID, "0").equals("0")) {
                jsonObject.put("user_id", ApplicationSettings.getPref(AppConstants.USERINFO_ID, "0"));
            }
            jsonObject.put("number", "");
            jsonObject.put("transactionid", NotificationData.transactionId);
            jsonObject.put("from", "UearnActivity");
            jsonObject.put("state", "Connecting");
            jsonObject.put("prevconnectedcustomer", lastConnectedCustomerObject.toString());
            jsonObject.put("active_time", totalActiveTime);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        try {
            JSONObject postIVRCustomerResponseJsonObj = DataUploadUtils.postIvrCustomerMapping(Urls.postIvrCustomerMappingUrl(), jsonObject);
            if (postIVRCustomerResponseJsonObj != null) {
                if (postIVRCustomerResponseJsonObj.has("action")) {
                    String action = postIVRCustomerResponseJsonObj.getString("action");
                    if (action != null && !action.isEmpty() && action.equalsIgnoreCase("pdstarted")) {
                        SmarterSMBApplication.followupsInPredictive = false;
                    }

                    if (action != null && !action.isEmpty() && action.equalsIgnoreCase("followupsstarted")) {
                        SmarterSMBApplication.followupsInPredictive = true;
                    }

                    if (action != null && !action.isEmpty() && action.equalsIgnoreCase("campaigncompleted")) {
                        SmarterSMBApplication.endTheSession = true;
                        navigateToUearnHome();
                    }
                }
            }
            SmarterSMBApplication.lastConnectedCustomer = "";
            SmarterSMBApplication.lastConnectedCustomerFeedback = "";
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    static class ConnectedInfo extends AsyncTask<Void, Void, Void> {

        @Override
        protected Void doInBackground(Void... params) {
            if (ApplicationSettings.containsPref(AppConstants.FK_CONTROL)) {
                boolean fkControl = ApplicationSettings.getPref(AppConstants.FK_CONTROL, false);
                if (fkControl) {
                    totalLoggedInTime();
                }
            }
            SmarterSMBApplication.agentIsInConnectedState = true;
            sendConnectedStateInfoToServer();
            return null;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected void onPostExecute(Void aVoid) {
            super.onPostExecute(aVoid);
        }
    }

    private static void sendConnectedStateInfoToServer() {
        long totalLoggedInTime = ApplicationSettings.getPref(AppConstants.TOTAL_LOGGED_IN_TIME, 0l);
        JSONObject jsonObject = new JSONObject();
        try {
            if (ApplicationSettings.getPref(AppConstants.USERINFO_ID, "0") != null && !ApplicationSettings.getPref(AppConstants.USERINFO_ID, "0").equals("0")) {
                jsonObject.put("user_id", ApplicationSettings.getPref(AppConstants.USERINFO_ID, "0"));
            }
            jsonObject.put("number", NotificationData.dialledCustomerNumber);
            jsonObject.put("transactionid", NotificationData.transactionId);
            jsonObject.put("from", "UearnActivity");
            jsonObject.put("state", "Connected");
            jsonObject.put("loggedin_time", totalLoggedInTime);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        //Log.d("LoginTime", "UearnActivity - sendConnectedStateInfoToServer()" + jsonObject.toString());
        DataUploadUtils.postIvrCustomerMapping(Urls.postIvrCustomerMappingUrl(), jsonObject);
    }

    private class AddHandler implements View.OnClickListener {
        final int diff;

        public AddHandler(int diff) {
            this.diff = diff;
        }

        @Override
        public void onClick(View v) {
            int newValue = getValue() + diff;
            if (newValue < min) {
                newValue = min;
            } else if (newValue > max) {
                newValue = max;
            }
            et_number.setText(String.valueOf(newValue));
        }
    }

    public int getValue() {
        if (et_number != null) {
            try {
                final String value = et_number.getText().toString();
                return Integer.parseInt(value);
            } catch (NumberFormatException ex) {
                Log.e("HorizontalNumberPicker", ex.toString());
            }
        }
        return 0;
    }

    public void changeStatusBarColor(Activity activity) {

        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
            Window window = activity.getWindow();
            window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
            window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
            window.setStatusBarColor(activity.getResources().getColor(R.color.status_bar_blue));
        }
    }

    public void setValue(final int value) {
        if (et_number != null) {
            et_number.setText(String.valueOf(value));
        }
    }

    public int getMin() {
        return min;
    }

    public void setMin(int min) {
        this.min = min;
    }

    public int getMax() {
        return max;
    }

    public void setMax(int max) {
        this.max = max;
    }

    File photoFile = null;
    String mCurrentPhotoPath;
    private static final String IMAGE_DIRECTORY_NAME = "UEARN";
    protected static final int PICK_Camera_IMAGE = 0;
    protected static final int PICK_Profile_IMAGE = 2;
    protected static final int CAMERA_REQUEST = 0;
    protected static final int GALLERY_PICTURE = 3;
    static final int CAPTURE_IMAGE_REQUEST = 1;
    private Uri imageFilePath, logoUri;
    String selectedImagePath;

    private void startDialog() {
        final Dialog networkDialog = CustomTwoButtonDialog.capturePhotoType(this, "Upload Pictures Option", "How do you want to set picture?");
        TextView btnNo = networkDialog.findViewById(R.id.btn_no);
        btnNo.setText("CAMERA");
        btnNo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                networkDialog.dismiss();
                try {
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                        captureImage();
                    } else {
                        captureImage2();
                    }
                } catch (SecurityException se) {
                    CommonUtils.displayDialog(UearnActivity.this);
                }

            }
        });

        TextView btnYes = networkDialog.findViewById(R.id.btn_yes);
        btnYes.setText("GALLERY");
        btnYes.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                networkDialog.dismiss();
                Intent pictureActionIntent = null;

                pictureActionIntent = new Intent(
                        Intent.ACTION_PICK,
                        android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                startActivityForResult(pictureActionIntent, GALLERY_PICTURE);
            }
        });
        networkDialog.show();
    }

    private void captureImage2() {
        try {
            Intent cameraIntent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
            photoFile = createImageFile4();
            if (photoFile != null) {
                displayMessage(getBaseContext(), photoFile.getAbsolutePath());
                LogUtils.e("CameraImageFilePath: " + photoFile.getAbsolutePath());
                Uri photoURI = Uri.fromFile(photoFile);
                cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
                startActivityForResult(cameraIntent, CAPTURE_IMAGE_REQUEST);
            }
        } catch (Exception e) {
            displayMessage(getBaseContext(), "Camera is not available." + e.toString());
        }
    }

    private void captureImage() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE}, 0);
        } else {
            Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
            if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
                // Create the File where the photo should go
                try {
                    photoFile = createImageFile();
                    //   displayMessage(getBaseContext(), photoFile.getAbsolutePath());
                    LogUtils.e(photoFile.getAbsolutePath());
                    // Continue only if the File was successfully created
                    if (photoFile != null) {
                        Uri photoURI = FileProvider.getUriForFile(this, "smarter.uearn.money.fileprovider", photoFile);
                        takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);

                        startActivityForResult(takePictureIntent, PICK_Profile_IMAGE);

                        // startActivityForResult(takePictureIntent, CAPTURE_IMAGE_REQUEST);
                    }
                } catch (Exception ex) {
                    // Error occurred while creating the File
                    ex.printStackTrace();
                    displayMessage(getBaseContext(), "Unable capture photo.");
                }
            } else {
                displayMessage(getBaseContext(), "Unable capture photo.");
            }
        }

    }

    private void displayMessage(Context context, String message) {
        Toast.makeText(context, message, Toast.LENGTH_LONG).show();
    }

    private File createImageFile4() {
        // External sdcard location
        File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES), IMAGE_DIRECTORY_NAME);
        // Create the storage directory if it does not exist
        if (!mediaStorageDir.exists()) {
            if (!mediaStorageDir.mkdirs()) {
                displayMessage(getBaseContext(), "Unable capture photo.");
                return null;
            }
        }
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(new Date());
        File mediaFile = new File(mediaStorageDir.getPath() + File.separator + "IMG_" + timeStamp + ".jpg");
        return mediaFile;
    }

    private File createImageFile() throws IOException {
        // Create an image file name
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
        String imageFileName = "JPEG_" + timeStamp + "_";
        File storageDir = getExternalFilesDir(Environment.DIRECTORY_PICTURES);
        File image = File.createTempFile(
                imageFileName,  /* prefix */
                ".jpg",         /* suffix */
                storageDir      /* directory */
        );

        // Save a file: path for use with ACTION_VIEW intents
        mCurrentPhotoPath = image.getAbsolutePath();
        return image;
    }

    private void adhocCallFromHome(String number) {


        String toNumber = "";
        if(number != null && !number.isEmpty() && !number.startsWith("+91")) {
            toNumber = "+91" + number;
        } else {
            toNumber = number;
        }

        if(CommonUtils.allowPMC2C()){
            //chatMakingCall = true;
            chatMakeCall(this, toNumber, 0, "",
                    "", "", "",
                    "", "");

        }else {
            Intent callIntent = new Intent(Intent.ACTION_CALL);
            callIntent.setData(Uri.parse("tel:"+toNumber));

            et_sm_number.setText("");
            sm_call_button.setEnabled(true);

            if (ActivityCompat.checkSelfPermission(this,
                    Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {
                return;
            }
            startActivity(callIntent);
        }


    }

    public boolean checkPermission(Context context) {
        return ContextCompat.checkSelfPermission(context,
                Manifest.permission.READ_PHONE_STATE) == PackageManager.PERMISSION_GRANTED;
    }

    public void chatMakeCall(final Context context, final String number,final long dbid, final String appointmentId,final String status, final  String substatus1, final  String substatus2, final String callername, final String notes) {
        if(context != null) {
            boolean secondSim = false;
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP_MR1) {
                SubscriptionManager subscriptionManager = SubscriptionManager.from(this);
                List<SubscriptionInfo> subsInfoList = subscriptionManager.getActiveSubscriptionInfoList();

                //Log.d("Test", "Current list = " + subsInfoList);
                if (subsInfoList != null) {
                    for (SubscriptionInfo subscriptionInfo : subsInfoList) {

                        String number1 = subscriptionInfo.getNumber();
                        int SimStotNumber = subscriptionInfo.getSimSlotIndex();
                        if (SimStotNumber == 1) {
                            secondSim = true;
                        }

                        //Log.d("Test", " Number is  " + number);
                    }
                } else {
                    Toast.makeText(context, "No SIM", Toast.LENGTH_SHORT).show();
                }
            } else {
                secondSim = true;
            }

            /*boolean mobileOnSimData = false;
            if (ApplicationSettings.containsPref(AppConstants.MOBILE_DATA_ON_SIM)) {
                mobileOnSimData = ApplicationSettings.getPref(AppConstants.MOBILE_DATA_ON_SIM, false);
            }*/

            if (ApplicationSettings.getPref(AppConstants.CLOUD_OUTGOING, false)) {
                /*if ((!secondSim && !(mobileOnSimData)) || (secondSim && mobileOnSimData)) {*/
                if (number != null) {
                    String userNumber = ApplicationSettings.getPref(AppConstants.USERINFO_PHONE, "");
                    if (userNumber != null && !(userNumber.isEmpty())) {
                        final String customernumber = number;
                        String toNumber = "";
                        if(number != null && !number.isEmpty() && !number.startsWith("+91")) {
                            toNumber = "+91" + number;
                        } else {
                            toNumber = number;
                        }
                        String sr_number = ApplicationSettings.getPref(AppConstants.SR_NUMBER, "");
                        String caller_id = ApplicationSettings.getPref(AppConstants.CLOUD_OUTGOING1, "");
                        if (caller_id != null && !(caller_id.isEmpty())) {
                            if (sr_number != null && !(sr_number.isEmpty())) {
                                Log.e("CommonUtils","Data :: "+sr_number + " :: "+userNumber + " :: "+toNumber);
                                KnowlarityModel knowlarityModel = new KnowlarityModel(sr_number, userNumber, toNumber);
                                knowlarityModel.setClient_id(caller_id);
                                if (CommonUtils.isC2cNetworkAvailable(context)) {
                                    //NotificationData.appointment_db_id = dbid;
                                    new APIProvider.ReClickToCall(knowlarityModel, 213, true, new API_Response_Listener<String>() {
                                        @Override
                                        public void onComplete(String data, long request_code, int failure_code) {
                                            if (data != null && !(data.isEmpty())) {
                                                et_sm_number.setText("");
                                                sm_call_button.setEnabled(true);
                                                if (data.contains("_SMBALERT_")) {
                                                    CommonUtils.setToast(context,data.replace("_SMBALERT_", ""));
                                                } else if (data.contains("_SMBACP_")) {

                                                    Toast.makeText(context, "Connecting to the customer. Please wait ...", Toast.LENGTH_LONG).show();
                                                } else {

                                                    Toast.makeText(context, "Connecting to the customer. Please wait ...", Toast.LENGTH_LONG).show();
                                                }

                                            } else if (failure_code == APIProvider.INVALID_AUTH_KEY) {
                                                if (context != null) {
                                                    CommonUtils.setToast(context, "Invalid Auth key");
                                                }
                                            } else if (failure_code == APIProvider.INVALID_REQUEST) {
                                                if (context != null) {
                                                    CommonUtils.setToast(context, "Request Not Allowed");
                                                }
                                            } else if (failure_code == APIProvider.INVALID_PARAMETER) {
                                                if (context != null) {
                                                    CommonUtils.setToast(context, "Invalid Parameters");
                                                }
                                            } else if (failure_code == APIProvider.INVALID_NUMBER) {
                                                if (context != null) {
                                                    CommonUtils.setToast(context, "This number is not valid");
                                                }
                                            } else if (failure_code == APIProvider.SERVER_ALERT) {
                                                Toast.makeText(context, APIProvider.SERVER_ALERT_MESSAGE, Toast.LENGTH_LONG).show();
                                            } else if (failure_code == APIProvider.DND) {

                                                Toast.makeText(context, "This number is NDNC.", Toast.LENGTH_LONG).show();
                                            } else if (failure_code == APIProvider.AGENET_NOT_VERIFIED) {
                                                Toast.makeText(context, "Call Failed!", Toast.LENGTH_LONG).show();

                                            } else if (failure_code == APIProvider.SR_NOT_REGISTERED) {
                                                Toast.makeText(context, "Hey! Ask your admin to call Support at 9113907215.", Toast.LENGTH_LONG).show();
                                            } else if (failure_code == APIProvider.AGENT_NOT_REGISTERED) {
                                                Toast.makeText(getApplicationContext(), "Number not registered for outbound services for this agent", Toast.LENGTH_LONG).show();
                                            } else {
                                                Toast.makeText(context, "Please check your internet connection.", Toast.LENGTH_LONG).show();
                                            }
                                        }
                                    }).reClickToCall(knowlarityModel);
                                    Toast toastMessage = Toast.makeText(context, "Dialling", Toast.LENGTH_LONG);
                                    toastMessage.setGravity(Gravity.CENTER, 0, 0);
                                    toastMessage.show();
                                } else {
                                    Toast.makeText(context, "You have no Internet connection.", Toast.LENGTH_SHORT).show();
                                }
                            } else {
                                Toast.makeText(context, "No SR Number", Toast.LENGTH_SHORT).show();
                            }
                        } else {
                            Toast.makeText(context, "No Client ID", Toast.LENGTH_SHORT).show();
                        }
                    } else {
                        Toast.makeText(context, "Invalid User Number", Toast.LENGTH_SHORT).show();
                    }
                } else {
                    Toast.makeText(context, "Invalid Customer Number", Toast.LENGTH_SHORT).show();
                }
                /*} else {
                    callToCustomer(context, number, appointmentId, status, substatus1, substatus2, callername, notes);
                }*/
            } else {
                callToCustomer(context, number, appointmentId, status, substatus1, substatus2, callername, notes);
            }
        }
    }

    public void storeUuidHash(String custNo, String uuidval) {
        HashMap<String, String> testHashMap = new HashMap<String, String>();
        testHashMap.put("customer", custNo);
        testHashMap.put("uuid",uuidval);
        Gson gson = new Gson();
        String hashMapString = gson.toJson(testHashMap);
        ApplicationSettings.putPref(AppConstants.CUSTOMER_UUID_MAP, hashMapString);
    }

    private Dialog callOptionsDialog(final Activity activity, String title, String message, final String type) {

        final Dialog exitDialog = buildTwoButtonDialog(activity, title, message);
        exitDialog.setCanceledOnTouchOutside(false);

        exitDialog.getWindow().getDecorView().setSystemUiVisibility(
                View.SYSTEM_UI_FLAG_IMMERSIVE
                        | View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                        | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                        | View.SYSTEM_UI_FLAG_FULLSCREEN);

        TextView btnNo = exitDialog.findViewById(R.id.btn_no);
        btnNo.setText("CANCEL");
        btnNo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                SmarterSMBApplication.launchAppButtonClicked = false;
                if (exitDialog != null) {
                    exitDialog.dismiss();
                }
            }
        });

        TextView btnYes = exitDialog.findViewById(R.id.btn_yes);
        btnYes.setText("YES");
        btnYes.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (exitDialog != null) {
                    exitDialog.cancel();
                }
                if(type.equalsIgnoreCase("Transfer Call")) {
                    if(SmarterSMBApplication.cloud2IncomingCall){
                        SmarterSMBApplication.endCallButtonClicked = true;
                    }
                    new TransferCallRequest().execute();
                } else if(type.equalsIgnoreCase("Merge Call")) {
                    new MergeCallRequest().execute();
                }
            }
        });
        return exitDialog;
    }

    private void enableCallOptions() {
        if(transferCallEnabled && conferenceCallEnabled){
            transferCallButton.setImageResource(R.drawable.ic_transfer_call_e);
            conferenceCallButton.setImageResource(R.drawable.ic_merge_call_e);
        } else if(transferCallEnabled){
            transferCallButton.setImageResource(R.drawable.ic_transfer_call_e);
            conferenceCallButton.setImageResource(R.drawable.ic_merge_call_d);
        } else if(conferenceCallEnabled){
            conferenceCallButton.setImageResource(R.drawable.ic_merge_call_e);
            transferCallButton.setImageResource(R.drawable.ic_transfer_call_d);
        } else {
            transferCallButton.setImageResource(R.drawable.ic_transfer_call_d);
            conferenceCallButton.setImageResource(R.drawable.ic_merge_call_d);
        }
    }

    private void disableCallOptions() {
        transferCallButton.setImageResource(R.drawable.ic_transfer_call_d);
        conferenceCallButton.setImageResource(R.drawable.ic_merge_call_d);
    }

    private void showCallOptionsBasedOnSettings() {
        if(transferCallEnabled && conferenceCallEnabled){
            transferCallButton.setImageResource(R.drawable.ic_transfer_call_e);
            conferenceCallButton.setImageResource(R.drawable.ic_merge_call_e);
        } else if(transferCallEnabled){
            transferCallButton.setImageResource(R.drawable.ic_transfer_call_e);
            conferenceCallButton.setImageResource(R.drawable.ic_merge_call_d);
        } else if(conferenceCallEnabled){
            conferenceCallButton.setImageResource(R.drawable.ic_merge_call_e);
            transferCallButton.setImageResource(R.drawable.ic_transfer_call_d);
        } else {
            transferCallButton.setImageResource(R.drawable.ic_transfer_call_d);
            conferenceCallButton.setImageResource(R.drawable.ic_merge_call_d);
        }
    }

    private void resetAllUIComponents() {
        customerExperience.setText("");
        freeNumber.setText("");
//        currentSelectedScenario = "";
//        paymentModeFromButton = "";
//        currentSelectedButton = "";
//        currentSelectedRadioButton = "";
//        dropDownValueFromList = "";
//        searchableDropDownValueFromList = "";
//        multiSelectionDropDownValueFromList = "";
    }
}